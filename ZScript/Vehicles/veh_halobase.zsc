class HaloVehCamera : VehCamera
{
	double dist_xy, dist_z;
	double zmin, zmax;
	Actor source;
	Actor followact;

	override void UpdatePos(bool moving)
	{
		if(!base) return;
		if(!source) return;
		if(!followact) followact = base;
		
		double maxdist = dist_xy;
		FLineTraceData lndata;
		followact.LineTrace(source.angle,dist_xy,0,TRF_THRUACTORS|TRF_THRUBLOCK|TRF_ABSOFFSET,dist_z+sin(source.pitch),0,0,lndata);
		if( lndata.HitType == lndata.TRACE_HitWall    || 
		    lndata.HitType == lndata.TRACE_HitCeiling || 
			lndata.HitType == TRACE_HitFloor			  ) 
		{
			maxdist = lndata.Distance;
		}		
		
		double a = source.angle;
		double p = source.pitch;
		vector3 followpos = (
			cos(a) * cos(p),
			sin(a) * cos(p),
			-sin(p)
		) * maxdist;
		followpos.z += dist_z;
		followpos.z = clamp(followpos.z, zmin, zmax);
		
		vector3 topos = level.vec3offset(followact.pos, followpos + relposoffs);
		vector3 curpos = HaloMath.Lerp3D(pos, topos, 0.65);
		curpos.z += base.GetBobOffset();
		
		A_SetAngle(a, SPF_INTERPOLATE);
		A_SetPitch(p, SPF_INTERPOLATE);
		SetOrigin(curpos, true);
	}
}

class HaloVehicle : VehBase
{
	double veharmor;
	Property Armored : veharmor;
	
	Default
	{
		Mass 800;
		Radius 32;
		Height 16;
		Scale 10.0;
		+VehBase.FALLINGPITCH;
		+SOLID;
		+INTERPOLATEANGLES;
		+SHOOTABLE;
		+NOFRICTION;
		MaxStepHeight 36;
		Gravity 0.3;
	}
	
	override int DamageMobj(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		int diff = veharmor-damage;
		if(diff > 0)
		{
			veharmor -= damage;
			return 0;
		}
		else
		{
			veharmor = 0;
			return super.DamageMobJ(inflictor, source, damage, mod, flags, angle);
		}
	}
	
	virtual HaloVehCamera SetupHaloCamera(class<HaloVehCamera> cam = "HaloVehCamera", double dist = 50, double offs_oz = 50, double zmin = 50, double zmax = 80, bool setcam = true)
	{
		let vehcam = HaloVehCamera(SetupCamera(camtype:cam, setcam:setcam));	
		if(vehcam)
		{
			vehcam.dist_xy = dist;
			vehcam.dist_z = offs_oz;
			vehcam.zmin = zmin;
			vehcam.zmax = zmax;
			vehcam.source = driver;
		}
		return vehcam;
	}
	
	virtual void DoCollisionDamage(double knockback = 1.0, double dmgmod = 30, Sound hitsound = "")
	{
		// Process enemies to run over.
		if(vel.length() > 3)
		{
			let act_it = ThinkerIterator.Create();
			Actor roadkill;
			while(roadkill = Actor(act_it.Next()))
			{
				if( roadkill == self   || 
				    roadkill == driver || 
				   !roadkill.bSHOOTABLE  ) continue;
				if(!CanCollideWith(roadkill, false)) continue;
				
				double closedist = (roadkill.radius+radius) * 2.0;
				if( roadkill.health >= 0 && Distance3DSquared(roadkill) <= closedist*closedist)
				{
					vector3 hitdiff = level.SphericalCoords(pos, roadkill.pos, (angle, pitch));
					double hitang = angle - hitdiff.x;
					
					if(abs(hitdiff.x) > 30) continue;
					
					vector2 hitdir = (cos(hitang), sin(hitang));
					double force = HaloMath.GetInertia(roadkill.mass) * vel.length() * 1.5;
					double massmod = (mass/300.0);
					
					vel.xy -= hitdir * vel.length() * knockback;
					roadkill.Thrust(force, angle - hitdiff.x);
					roadkill.DamageMobj(self, self, vel.length() * dmgmod * massmod, "Vehicular", 0, hitang);
					if(hitsound) A_StartSound(hitsound, flags:CHANF_OVERLAP);
				}
			}
		}
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		
		Death:
			MODL A -1;
		stop;
	}
}
class FastActor : CheapActor abstract
{
	Default
	{
		Radius 1;
		+NOINTERACTION;
		RenderStyle "Add";
		Alpha 1.0;
	}
}

// Scorpion Rocket
class TankRocket : FastProjectile
{
	vector3 movedir;
	Default
	{
		Radius 16;
		Height 8;
		Speed 354 * 3.75;
		Damage 300;
		Projectile;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == target) return false;
		return super.CanCollideWith(other, passive);
	}
	
	static TankRocket Fire(Actor from, vector3 posoffs, vector3 viewoffs = (0,0,0))
	{
		vector3 view = (from.angle + viewoffs.x, from.pitch + viewoffs.y, from.roll + viewoffs.z);
		vector3 offs = HaloMath.V3Offset(view.x, view.y, view.z, posoffs.x, posoffs.y, posoffs.z, 1.);
		vector3 spawnpos = level.vec3offset(from.pos, offs);
		
		let proj = TankRocket(Actor.Spawn("TankRocket", spawnpos));
		let flare = Actor.Spawn("TankRocket_MuzzleFlare", spawnpos);
		
		if(proj)
		{
			proj.SetDamage(proj.default.damage);
			proj.target = from;
			proj.angle = view.x;
			proj.pitch = view.y;
			proj.roll = view.z;
			
			// Assign velocity vector
			double cosp = cos(view.y);
			proj.vel = (
				cos(view.x) * cosp,
				sin(view.x) * cosp,
				-sin(view.y)
			) * ((proj.default.speed / 35) * UNIT_METER); 
			proj.movedir = proj.vel.Unit();
			
			FLineTraceData lt;
			proj.LineTrace(proj.angle, 1024*1024, proj.pitch, data:lt);
			let trail = SmokeTrail.Start(0x969696, spawnpos, lt.HitLocation, (view.x, view.y), 1.0);
			trail.A_SetScale(3.0);
		}
		
		return proj;
	}
	
	void DoExplosion()
	{
		A_Explode(250, 512);
		double maxdist = 512*512;
		let it = ThinkerIterator.Create();
		Actor victim;
		while(victim = Actor(it.Next()))
		{
			if(!victim.bISMONSTER) continue;
			double dist = Distance3DSquared(victim);
			if(dist <= maxdist && dist > 0)
			{
				// Thrust away
				double ang = AngleTo(victim);
				double interia = clamp(HaloMath.getInertia(victim.mass), 0.1, 1.0);
				double force = (dist/maxdist) * 50 * interia;

				victim.vel.xy += AngleToVector(ang, force);
				victim.vel.z += force*0.25;
			}
		}
		
		vector3 fxoffs = (-30, 0, 10);
		fxoffs = HaloMath.V3Offset(angle, pitch, roll, fxoffs.x, fxoffs.y, fxoffs.z, 1.);
		
		vector3 fxpos = level.vec3offset(pos, fxoffs);
		Spawn("TankRocket_Explosion", fxpos);
		
		HaloMath.SpawnFX("TankRocket_MiniExplosion", fxpos, angle, random(5,15), 160, 40);
		HaloMath.SpawnFX("TankRocket_Smoke", fxpos, angle, random(10,30), 120, 60);
		HaloMath.SpawnFX("TankRocket_Smoke", fxpos, angle, random(10,30), 80, 60, rstyle:STYLE_Subtract);
		
		// Flying explosions
		for(int i = 0; i < random(20,30); i++)
		{
			double spawnang = frandom(0,180);
			double spawndist = frandom(-30, 30);
			vector3 spawndir = (
				cos(angle + spawnang),
				sin(angle + spawnang),
				0
			) * spawndist;
			
			spawndir.z = frandom(-30,30);
			let expl = Spawn("TankRocket_FlyingExplosion", level.vec3offset(fxpos, spawndir));
			if(expl)
			{
				double velang = frandom(-180,180);
				vector3 veldir = (
					cos(velang),
					sin(velang),
					sin(frandom(-45,45))
				);
				expl.vel = veldir * 15;
			}
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
		
		Death:
			TNT1 A 1 DoExplosion();
		stop;
	}	
}

// NoDelay isn't implemented properly apparently, so thats
// why we need TNT1 A 0 frames for these...
class TankRocket_Explosion : FastActor
{
	Default
	{
		Scale 4.0;
	//	Translation "0:255=@[66, 194, 245]";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				A_StartSound("Halo/Scorpion/MissileExplosion", flags:CHANF_OVERLAP, attenuation: 0.1);
				Spawn("ImpactSparks", pos);
			}
			SX04 A 1 
			{	
				Spawn("TankRocket_Flare", pos);
			}
			SX04 BCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}

class TankRocket_Flare : FastActor
{
	Default
	{
		Scale 2.0;
	//	Translation "0:255=#[66, 194, 245]";
	}
	
	States
	{
		Spawn:
			FSH1 ABCDEFGHHIJKLMNOPQRS 1 Bright;
		stop;
	}
}

class TankRocket_MuzzleFlare : FastActor
{
	Default
	{
		Scale 2.0;
	}

	States
	{
		Spawn:
			BFSH A 2 Bright;
		stop;
	}
}

class ImpactSparks : FastActor
{
	Default
	{
		Scale 1.5;
		Alpha 0.8;
	}
	
	States
	{
		Spawn:
			TNT1 A 0; 
			IPF2 "#" 4 Bright
			{
				frame = random(0,3);
			}
		stop;
	}
}

class TankRocket_Smoke : FastActor
{
	double rollvel;
	double upforce;
	vector2 wind_dir;
	Default
	{
		Scale 1.0;
		+ROLLSPRITE;
	}
	
	override void BeginPlay()
	{	
		alpha = frandom(0.5, 1.0);
		A_SetScale(frandom(default.scale.x * 0.15, default.scale.x));
		rollvel = frandom(-2.0, 2.0);
		upforce = frandom(0.015, 0.08);
		wind_dir = AngleToVector(frandom(0,180), frandom(-0.005, 0.005)); 
		super.BeginPlay();
	}
	
	override void Tick()
	{
		super.Tick();
		
		SetOrigin(level.vec3offset(pos, vel), true);
		A_SetRoll(roll + rollvel, SPF_INTERPOLATE);
		vel += wind_dir * frandom(0.25, 1.0);
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
			SMK5 "#" 1 { frame = random(0, 23); }
		SpawnLoop:
			SMK5 "#" 1
			{
				vel.z += upforce * 0.5;
				A_FadeOut(0.004);
			}
		wait;
	}
}

class TankRocket_DarkSmoke : FastActor
{
	double rollvel;
	Default
	{
		RenderStyle "Subtract";
		+ROLLSPRITE;
	}
	
	override void BeginPlay()
	{	
		alpha = frandom(0.35, 0.77);
		A_SetScale(frandom(0.10,0.20));
		rollvel = frandom(-2.0, 2.0);
		super.BeginPlay();
	}
	
	override void Tick()
	{
		super.Tick();
		A_SetRoll(roll + rollvel, SPF_INTERPOLATE);
	}
	
	States
	{
		Spawn:	
			SMK5 H 1 A_FadeOut(0.01);
		wait;
	}
}

class TankRocket_MiniExplosion : TankRocket_Smoke
{
	override void BeginPlay()
	{	
		super.BeginPlay();	
		wind_dir *= 0;
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
			TNT1 A 0 A_JumpIf(random(0,2)==2, "SpawnLoop_Two");
			TNT1 A 0 A_SetScale(frandom(2.0, 3.0));
		SpawnLoop_One:
			FX58 AAABCDEFGHIJKLMNOP 2 Bright
			{
				vel.z += upforce * 5.0; 
				A_FadeOut(0.003);
			}
			FX58 Q 2 Bright A_FadeOut(0.004);
		stop;
		
		SpawnLoop_Two:
			FRME AAAABCDEFGHIJKLMNOPQR 2
			{
				vel.z += upforce * 2.0; 
				A_FadeOut(0.004);
			}
			TNT1 A 0 A_Jump(128, "SpawnLoop_One");
		stop;
	}
}

class TankRocket_FlyingExplosion : FastActor
{
	Default
	{
		Scale 0.5;
	}

	override void BeginPlay()
	{	
		super.BeginPlay();	
		A_SetScale(frandom(default.scale.x * 0.3, default.scale.x));
	}
	
	override void Tick()
	{
		super.Tick();
		SetOrigin(level.vec3offset(pos, vel), true);
		vel.z -= 0.32;
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
		SpawnLoop_One:
			FX58 ABCDEFGHIJKLMNOP 2 Bright
			{
				let trail = Actor.Spawn("TankRocket_DarkSmoke", pos);
				if(trail) trail.A_SetScale(Scale.X);
			}
			FX58 Q 2 Bright
			{
				A_FadeOut(0.006);
				let trail = Actor.Spawn("TankRocket_DarkSmoke", pos);
				if(trail) trail.A_SetScale(Scale.X);
			}
		wait;
	}
}

// Wraith Plasma
class WraithPlasma : Actor
{
	Default
	{
		Radius 16;
		Height 8;
		Speed 200;
		Damage 300;
		RenderStyle "Add";
		Alpha 1.0;
		Projectile;
		-NOGRAVITY;
		Gravity 0.8;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == target) return false;
		return super.CanCollideWith(other, passive);
	}
	
	static WraithPlasma Fire(Actor from, vector3 posoffs, vector3 viewoffs = (0,0,0))
	{
		vector3 view = (from.angle + viewoffs.x, from.pitch + viewoffs.y, from.roll + viewoffs.z);
		vector3 offs = HaloMath.V3Offset(view.x, view.y, view.z, posoffs.x, posoffs.y, posoffs.z, 1.);
		vector3 spawnpos = level.vec3offset(from.pos, offs);
		
		let proj = WraithPlasma(Actor.Spawn("WraithPlasma", spawnpos));
		if(proj)
		{
			proj.SetDamage(proj.default.damage);
			proj.target = from;
			proj.angle = view.x;
			proj.pitch = view.y;
			
			// Assign velocity vector
			double cosp = cos(view.y);
			proj.vel = (
				cos(view.x) * cosp,
				sin(view.x) * cosp,
				-sin(view.y)
			) * ((proj.default.speed / 35) * UNIT_METER); 
			proj.A_StartSound("Halo/Wraith/MortarFlight", CHAN_BODY, CHANF_LOOPING);
		}
		
		return proj;
	}
	
	void DoExplosion()
	{
		A_StopSound(CHAN_BODY);
		A_Explode(250, 512);
		
		vector3 fxoffs = (-30, 0, 10);
		fxoffs = HaloMath.V3Offset(angle, pitch, roll, fxoffs.x, fxoffs.y, fxoffs.z, 1.);
		
		vector3 fxpos = level.vec3offset(pos, fxoffs);
		let expl = Spawn("WraithPlasma_Explosion", fxpos);
		if(expl)
		{
			expl.A_SetRenderStyle(1.0, STYLE_AddShaded);
			expl.SetShade(0xFF1051de);
		}
		
		HaloMath.SpawnFX("TankRocket_Smoke", fxpos, angle, random(4,12), 120, 60);
		
		// Flying explosions
		for(int i = 0; i < random(20,30); i++)
		{
			double spawnang = frandom(0,180);
			double spawndist = frandom(-30, 30);
			vector3 spawndir = (
				cos(angle + spawnang),
				sin(angle + spawnang),
				0
			) * spawndist;
			
			spawndir.z = frandom(-30,30);
			let expl = Spawn("WraithPlasma_FlyingPlasma", level.vec3offset(fxpos, spawndir));
			if(expl)
			{
				expl.A_SetRenderStyle(1.0, STYLE_AddShaded);
				expl.SetShade(0xFF1051de);
				double velang = frandom(-180,180);
				vector3 veldir = (
					cos(velang),
					sin(velang),
					sin(frandom(-45,45))
				);
				expl.vel = veldir * 15;
			}
		}
	}
	
	States
	{
		Spawn:
			FSP2 A 1 Bright;
			TNT1 A 0 Spawn("WraithPlasma_Trail", pos);
		loop;
		
		Death:
			TNT1 A 1 DoExplosion();
		stop;
	}	
}

class WraithPlasma_Trail : FastActor
{
	Default
	{
		RenderStyle "Add";
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			L2NB B 2 Bright;
			L2NB B 1 Bright 
			{
				A_FadeOut(0.04);
				A_SetScale(Scale.X * 0.90);
			}
		wait;
	}
}

class WraithPlasma_Explosion : FastActor
{
	Default
	{
		Scale 4.0;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				A_StartSound("Halo/Wraith/MissileExplosion", flags:CHANF_OVERLAP, attenuation: 0.1);
				Spawn("ImpactSparks", pos);
			}
			SX04 A 1 
			{	
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+30));
				if(flare)
				{
					flare.A_SetRenderStyle(1.0, STYLE_AddShaded);
					flare.SetShade(0xFF1051de);
				}
			}
			SX04 BCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}

class WraithPlasma_FlyingPlasma : FastActor
{
	override void BeginPlay()
	{	
		super.BeginPlay();	
		A_SetScale(frandom(0.15, 0.50));
	}
	
	override void Tick()
	{
		super.Tick();
		SetOrigin(level.vec3offset(pos, vel), true);
		vel.z -= 0.32;
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
		SpawnLoop_One:
			FX58 A 2 Bright
			{
				A_FadeOut(0.006);
				A_SetScale(Scale.X * 0.95);
				let trail = Actor.Spawn("WraithPlasma_Trail", pos);
				if(trail) trail.A_SetScale(Scale.X);
			}
		wait;
	}
}


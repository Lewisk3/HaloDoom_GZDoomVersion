class PartName : VehPart
{
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		if(!base || !base.driver) return;
		
		A_SetAngle(base.driver.angle, SPF_INTERPOLATE);
		A_SetPitch(base.driver.pitch, SPF_INTERPOLATE);
	}
		
	override void DoUpdate(VehCamera cam)
	{
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}

class HaloVehName : HaloVehicle
{
	Default
	{
		Radius 40;
		Height 40;
	
		Mass 800;
		Health 1000;
		HaloVehicle.Armored 500;
		MaxSlopeSteepness 0.4;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
	}
	
	override void OnDestroy()
	{
	}
	
	override bool RemoveDriver(PlayerPawn user, vector3 exitpos)
	{
		bool success = super.RemoveDriver(user, exitpos);
		return success;
	}
	
	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		SetupHaloCamera(dist:80,50,30,50);
		ReadyDriver(user);
	}
	
	override vector3 GetDrivePos()
	{
		return (-20,-5,0);
	}
	
	override void DoMove(float forwardmove, float sidemove)
	{	
		vel.xy *= 0.97;

		if(health <= 0)  
		{
			if(driver) RemoveDriver(driver, GetExitPos(driver));
			return;
		}
		if(!driver) return;
		
		DoCollisionDamage();
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		
		Death:
			MODL A -1;
		stop;
	}
}
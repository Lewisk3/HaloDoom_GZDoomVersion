class HaloGhost_Guns : VehPart
{
	uint cooldown;
	
	Default
	{
		Radius 16;
		Height 16;
	}
	
	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		if(!base || !base.driver) return;
		
		A_SetAngle(base.driver.angle, SPF_INTERPOLATE);
		A_SetPitch(base.driver.pitch, SPF_INTERPOLATE);
	}
		
	override void DoUpdate(VehCamera cam)
	{
		if(cooldown) 
		{
			cam.SetZoom(1.0, 0.1);
			cooldown--;
		}
		
		if( CheckButtons(BT_ATTACK, VehButtons.BTS_DOWN) && !cooldown )
		{
			cooldown = 12;
			double rmax = 2.0;
			for(int i = 0; i < 7; i++)
			{
				double arecoil = frandom(-rmax, rmax);
				double precoil = frandom(-rmax, rmax)*0.5;
				let pball = HaloMath.FireProjectile("PlasmaBall", level.vec3offset(pos, base.vel), angle + arecoil, pitch + precoil, 0, 0, 20, 1, 60);
			}
			A_StartSound("Halo/Ghost/Fire", CHAN_BODY, CHANF_OVERLAP);
			cam.Quake(1.25,1.25,0,0.5);
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
	}
}

class HaloGhost : HaloVehicle
{
	VehPart gun;
	uint explosiontimer;
	bool firstboost;
	
	Default
	{
		Radius 40;
		Height 40;
		
		Mass 800;
		Health 1000;
		HaloVehicle.Armored 500;
		VehBase.SetupCrosshair "GHOSTRET", 1.0, 1.0;
		+FLOATBOB; 
		FloatBobStrength 0.25;
		MaxSlopeSteepness 0.1;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		gun = VehPart.Attach("HaloGhost_Guns", self, (70,0,20), (0,0));
	}
	
	override void OnDestroy()
	{
		if(gun) gun.Destroy();
	}
	
	override void RemoveDriver(PlayerPawn user, vector3 exitpos)
	{
		A_StartSound("Halo/Ghost/EngineOFF",flags:CHANF_OVERLAP);
		super.RemoveDriver(user, exitpos);
	}
	
	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		A_StartSound("Halo/Ghost/EngineON",flags:CHANF_OVERLAP);
		SetupHaloCamera(dist:-90, 50, -30, 50, 50, 80, 50, 50);
		
		ReadyDriver(user);
	}
	
	override vector3 GetDrivePos()
	{
		return (-20,-5,0);
	}
	
	void ExplodeGhost()
	{
		A_StartSound("Halo/Ghost/Explosion", flags:CHANF_OVERLAP);
		A_SetHealth(0);
		A_Explode(60,256);
		A_StopSound(CHAN_7);
		A_StopSound(CHAN_5);
		Destroy();
	}

	override void DoMove(float forwardmove, float sidemove)
	{	
		// console.printf("[%f] :: %f !%d!", veharmor, health, explosiontimer);
		
		vel.xy *= 0.97;
		if(driver) 
			A_StartSound("Halo/Ghost/EngineHum", CHAN_7, CHANF_LOOPING);
		else
		{
			A_StopSound(CHAN_7);
			A_StopSound(CHAN_5);
		}
		
		if(health <= 0)  
		{
			if(driver) 
				RemoveDriver(driver, GetExitPos());
			else 
				ExplodeGhost();
			return;
		}
		if(!driver) return;
		
		if(!explosiontimer && health <= 50)
		{
			A_StartSound("Halo/Ghost/DoExplode", flags:CHANF_OVERLAP);
			explosiontimer = 35*3;
		}
		
		if(explosiontimer > 0)
		{
			explosiontimer--;
			if(explosiontimer <= 1) 
			{
				ExplodeGhost();
				return;
			}
		}
	
		double plrangle = HaloMath.LerpAngle(angle, driver.angle, 0.32);
		A_SetAngle(plrangle, SPF_INTERPOLATE);
	
		double spd = 0.55;
		bool boosting = CheckButtons(BT_ALTATTACK, VehButtons.BTS_DOWN);
		if(boosting)
		{
			vector2 forward = (cos(angle), sin(angle));
			vel.xy += forward * (spd * 2.5);
			if(!firstboost) 
			{
				A_StartSound("Halo/Ghost/Boost", flags:CHANF_OVERLAP);
				firstboost = true;
			}
			else
			{
				A_StartSound("Halo/Ghost/BoostHum", CHAN_5, CHANF_LOOPING);
			}
		}
		else
		{
			A_StopSound(CHAN_5);
			firstboost = false;
		}
		
		if( (sidemove || forwardmove) && !boosting )
		{
			vector2 accel = (spd, spd * 1.35);
			vector2 movedir = (forwardmove, -sidemove).Unit();

			movedir = RotateVector(movedir, angle);
			accel.x *= movedir.x;
			accel.y *= movedir.y;
			vel.xy += accel;
		}
		
		DoCollisionDamage();
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		
		Death:
			MODL A -1;
		stop;
	}
}
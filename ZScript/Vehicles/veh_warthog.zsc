class Warthog_Tire : VehPart
{
	bool invert;
	double trueturn;
	Property BackTires : invert;
	
	Default
	{
		Radius 16;
		Height 16;
		Scale 45.0;
	}
	
	double GetSteerAngle(bool behind = false)
	{
		double fromangle = behind ? base.driver.angle-180 : base.driver.angle;
		return -HaloMath.AngleDiff(fromangle, base.angle);
	}
	
	override void UpdatePos(bool moving)
	{
		super.UpdatePos(moving);
		if(!base || !base.driver) return;
		
		let warthog = HaloWarthog(base);
		
		// Determine angle based on aim.
		// Get angle of "steering wheel"
		double steerangle = GetSteerAngle();
		bool behind = steerangle < -(180 - 50) || steerangle > (180 - 50);
		if(behind) steerangle = GetSteerAngle(true);
		if(invert) steerangle = -steerangle;
		
		trueturn = base.angle + clamp(steerangle, -50, 50);
		steerangle = clamp(steerangle, -30, 30);
		
		A_SetAngle(steerangle + base.angle, SPF_INTERPOLATE);
		if(base.vel.length() > 2)
			A_SetPitch(pitch + base.vel.length(), SPF_INTERPOLATE);
		else
			A_SetPitch(0, SPF_INTERPOLATE);
	}
		
	override void DoUpdate(VehCamera cam)
	{
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
	}
}
class Warthog_BackTire : Warthog_Tire 
{
	Default
	{
		WartHog_Tire.BackTires true;
	}
}

class HaloWarthog : HaloVehicle
{
	Warthog_Tire Tire_TL, Tire_TR, Tire_BL, Tire_BR;
	double throttle;
	double accelangle;
	vector2 relvel;
	
	Default
	{
		Radius 65;
		Height 55;
		Scale 45.0;
		
		Mass 800;
		Health 1000;
		HaloVehicle.Armored 500;
		MaxSlopeSteepness 0.2;
	}
	
	override void BeginPlay()
	{
		Tire_TL = Warthog_Tire(VehPart.Attach("Warthog_Tire", self, (65,-35,16), (0,0)));
		Tire_TR = Warthog_Tire(VehPart.Attach("Warthog_Tire", self, (65, 35,16), (0,0)));
		Tire_BL = Warthog_Tire(VehPart.Attach("Warthog_BackTire", self, (-65,-35,16), (0,0)));
		Tire_BR = Warthog_Tire(VehPart.Attach("Warthog_BackTire", self, (-65, 35,16), (0,0)));
		super.BeginPlay();
	}
	
	override void OnDestroy()
	{
	}
	
	override void RemoveDriver()
	{
		super.RemoveDriver();
	}
	
	override void TakeDriver(PlayerPawn user)
	{
		if(health <= 0) return;
		if(user) driver = user;
		SetupHaloCamera(dist:-140,60, 30,50, 30, 100);
		ReadyDriver();
	}
	
	override vector3 GetDrivePos()
	{	
		// Driver seat pos
		return (8,-20,10);
	}
	
	vector2 GetTireDir(Warthog_Tire tire)
	{
		return (cos(tire.trueturn), sin(tire.trueturn));
	}
	
	override void DoMove(float forwardmove, float sidemove)
	{	
		vel.xy *= 0.96;
		if(health <= 0)  
		{
			if(driver) RemoveDriver();
			return;
		}
		if(!driver) return;
		double tireforce = 0.60 * throttle;
		double tireangv = 0.25;
		
		// Add tire forces for velocities
		if(throttle > 0)
		{
			vel.xy += GetTireDir(Tire_TL) * tireforce;
			vel.xy += GetTireDir(Tire_TR) * tireforce;
			double adiff = HaloMath.AngleDiff(angle, Tire_TL.angle) * tireangv * abs(tireforce);
			A_SetAngle(angle + adiff, SPF_INTERPOLATE);
		}
		else
		{
			vel.xy += GetTireDir(Tire_BL) * tireforce;
			vel.xy += GetTireDir(Tire_BR) * tireforce;
			double adiff = HaloMath.AngleDiff(angle, Tire_BL.angle) * tireangv * abs(tireforce);
			A_SetAngle(angle + adiff, SPF_INTERPOLATE);
		}
		
		if(forwardmove)
		{
			vector2 movedir = (forwardmove, -sidemove).Unit();
			throttle += movedir.x * 0.15;
		}
		else
		{
			throttle *= 0.5;
		}		
		throttle = clamp(throttle, -0.5, 1.0);
		
		// Turning speed penalty
		vector2 dir = AngleToVector(angle);
		vector2 aimdir = AngleToVector(viewcam.angle);
		double cosAng = (dir dot aimdir); // -1 to 1;
		vector2 slowforce = AngleToVector(angle, tireforce) * (1.0-cosAng);
		vel.xy -= slowforce;
		
		DoCollisionDamage();
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
		
		Death:
			MODL A -1;
		stop;
	}
}
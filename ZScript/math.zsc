// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class HaloMath Abstract
{	
	const PI = 3.14159265358;
	const RAD = 180.0/PI;
	const TWOPI = 2*PI;

	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpAngle(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}
		return result;
	}
	
	play static void AlignToPlane(Actor a, double pitchAdjust = 0, bool ceiling = false, double adjustSpeed = 2)
	{
		//Original code by ZZYZX & Nash Muhandes
		if (!a) return;
		double ceilingAdjust = 0;
		Vector3 fnormal;
		if (!ceiling)
		{
			fnormal = a.CurSector.FloorPlane.Normal;
		}
		else
		{
			fnormal = a.CurSector.CeilingPlane.Normal;
			ceilingAdjust = 180.0;
		}
		Vector2 fnormalp1 = (fnormal.x != 0 || fnormal.y != 0) ? (fnormal.x, fnormal.y).Unit() : (0, 0);
		Vector2 fnormalp2 = ((fnormal.x, fnormal.y).Length(), fnormal.z);
		double dang = a.Angle;
		double fang = atan2(fnormalp1.y, fnormalp1.x);
		double fpitch = atan2(fnormalp2.x, fnormalp2.y);
		double ddiff1 = sin(fang - (dang - pitchAdjust));
		double ddiff2 = cos(fang - dang);
		
		double pitchTarget = (fpitch * ddiff2 - pitchAdjust) + ceilingAdjust;
		double rollTarget = -fpitch * ddiff1 + ceilingAdjust;
		double angleTarget = dang + ceilingAdjust;
		
		if(adjustSpeed == 0)
		{
			adjustSpeed = 180;
		}
		
		if(a.Pitch < pitchTarget)
		{
			a.A_SetPitch(Clamp(a.pitch + adjustSpeed, a.pitch, pitchTarget));
		}
		else if(a.Pitch > pitchTarget)
		{
			a.A_SetPitch(Clamp(a.pitch - adjustSpeed, pitchTarget, a.pitch));
		}
		
		if(a.Roll < rollTarget)
		{
			a.A_SetRoll(Clamp(a.roll + adjustSpeed, a.roll, rollTarget));
		}
		else if(a.Roll > rollTarget)
		{
			a.A_SetRoll(Clamp(a.roll - adjustSpeed, rollTarget, a.roll));
		}

		if(a.Angle < angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle + adjustSpeed, a.angle, angleTarget));
		}
		else if(a.Angle > angleTarget)
		{
			a.A_SetAngle(Clamp(a.angle - adjustSpeed, angleTarget, a.angle));
		}
	}
	
	// Spawn helpers
	play static Actor FireProjectile(class<Actor> proj, vector3 pos, double angle, double pitch, double leftright, double forwardback, double updown, double distance, double speed)
	{
		vector3 finalpos;
		finalpos = V3Offset(angle, pitch, forwardback, leftright, updown, distance);
		finalpos = level.vec3offset(pos, finalpos);
		let proj = Actor.Spawn(proj, finalpos);
		if(proj)
		{
			proj.angle = angle;
			proj.pitch = pitch;
			double cosp = cos(pitch);
			proj.vel = (
				cos(angle) * cosp,
				sin(angle) * cosp,
				-sin(pitch)
			) * speed;
		}
		return proj;
	}

	static double sign(double num)
	{
		return num < 0 ? -1 : 1;
	}

	// Generate forward facing vector from angle/pitch.
	static vector3 VecFromAngles(double angle, double pitch, double mag = 1.)
	{
		double cosp = cos(pitch);
		return (cos(angle)*cosp, sin(angle)*cosp, -sin(pitch)) * mag;
	}

	// Straight interpolate
	static double Strp(double a, double b, double value, double dampen=0.7)
	{	
		double dampenv = value * (1-(dampen**(abs(a-b)/value)));
		if(a < b) a += dampenv;
		if(a > b) a -= dampenv;
		if( abs(a-b) < dampenv) a = b;
		return a;
	}

	// Linear interpolate
	static double Lerp(double a, double b, double lerpFactor)
	{
		double result = ((1.f - lerpFactor) * a) + (lerpFactor * b);
		return result;
	}
	
	// Linear interpolate 3D vectors
	static vector3 Lerp3D(vector3 a, vector3 b, double lerpfactor)
	{
		vector3 result = a;
		result.x = Lerp(result.x,b.x,lerpfactor);
		result.y = Lerp(result.y,b.y,lerpfactor);
		result.z = Lerp(result.z,b.z,lerpfactor);
		return result;
	}
	
	// Determine if number v is in range of -r, r relative to t
	clearscope static bool inRange(double v, double t, double r)
	{
		return (v >= t-r && v <= t+r);
	}
	
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpDegrees(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	
	// Pitch between 2 vectors.
	static double getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	
	// Distance 3D on vectors, not actors.
	static double Distance3D(vector3 one, vector3 two)
	{
		return (one-two).Length();
	}
	
	// Distance 2D on vectors, not actors.
	static float Distance2D(Vector2 one, Vector2 two)
	{
		return (one-two).Length();
	}
	
	// Rotate vectors.
	static Vector2 VRotate(Vector2 pos, double angle, bool invert=false)
	{
		if(invert)
		{
			double oldx = pos.x;
			pos.x = pos.y;
			pos.y = oldx;
		}
		return ( pos.y * cos(angle) - pos.x * sin(angle), 
		         pos.y * sin(angle) + pos.x * cos(angle) );
	}	
	
	// Clamp vectors.
	static vector2, double ClampVector(vector2 dest, vector2 origin, double dist)
	{
		double fulldist = sqrt( (dest.x - origin.x)**2 + (dest.y - origin.y)**2 );
		if(fulldist > dist) 
		{
			double vecangle = atan2(origin.y-dest.y, origin.x-dest.x);
			return ( (origin.x-cos(vecangle)*dist), (origin.y-sin(vecangle)*dist) ), fulldist;
		}
		return dest, fulldist;
	}
	
	// Offset vector position.
	static Vector2 VOffset(double angle, double xoffs, double yoffs, double dist)
	{
		return ( xoffs * cos(angle) - yoffs * sin(angle),
				 yoffs * cos(angle) + xoffs * sin(angle) )*dist;
	}
	
	
	// 3D Vector offset, thanks Comet!
	static vector3 V3Offset(double fromangle, double frompitch, double forward, double leftright, double updown, double distance)
    {
		double cosa = cos(fromangle), sina = sin(fromangle); 
		double cosp = cos(frompitch), sinp = sin(frompitch);
		leftright *= -1;
		
		vector3 vec;
		vec.x = forward * cosa * cosp - leftright * sina + updown * cosa * sinp;
		vec.y = forward * sina * cosp + leftright * cosa + updown * sina * sinp;
		vec.z = -forward * sinp + updown * cosp;
		vec *= distance;
		
		return vec;
    }
	
	static vector3 RelativeV3Offset(Actor source, double angleoffs, double pitchoffs, double forward, double leftright, double updown, double distance)
    {
		double a = source.angle + angleoffs;
		double p = source.pitch + pitchoffs;
		vector3 vec = V3Offset(a, p, forward, leftright, updown, distance);
		
		vector3 frompos = (source.pos.xy, source.pos.z + source.height * 0.5);
		if(source.player) frompos.z = source.player.viewz;
		
		return level.vec3offset(frompos, vec);
    }

	// Intertial calculations for thrust on monsters.
	static double GetInertia(double emass)
	{
		// Deviation from small weight, 0 means no deviation.
		double m = 200; // Base mass
		double d = 0.15; // Mass dropoff
		double x = (1. - (emass/m));
		double y = -d*(x**2) + 1;
		return clamp(y*0.75,0.1,1.0);
	}
	
	// Credits: https://www.arduino.cc/reference/en/language/functions/math/map/
	static double fmap(double x, double in_min, double in_max, double out_min, double out_max) 
	{
		return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
	}
	
	// Credits: https://stackoverflow.com/a/28037434
	static double AngleDiff( double angle1, double angle2 )
	{
		double diff = ( angle2 - angle1 + 180 ) % 360 - 180;
		return diff < -180 ? diff + 360 : diff;
	}
	
		
	/* Summary:
    **  Simulates a damped spring.
    **
    ** Arguments:
    **  p: Current position
    **  r: Rest position
    **  v: Current velocity
    **  k: Spring coefficient
    **  d: Damping coefficient
    **
    ** Returns:
    **  The new velocity.
    */
    static double DampedSpring (double p, double r, double v, double k, double d) 
	{
        return -(d * v) - (k * (p - r));
    }
}
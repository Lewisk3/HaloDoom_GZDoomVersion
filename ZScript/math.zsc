// Credits: https://gist.github.com/itsmrpeck/be41d72e9d4c72d2236de687f6f53974
class HaloMath Abstract
{	
	// Generate forward facing vector from angle/pitch.
	static vector3 VecFromAngles(double angle, double pitch)
	{
		double cosp = cos(pitch);
		return (cos(angle)*cosp, sin(angle)*cosp, -sin(pitch));
	}

	// Straight interpolate
	static double Strp(double a, double b, double value, double dampen=0.7)
	{	
		double dampenv = value * (1-(dampen**(abs(a-b)/value)));
		if(a < b) a += dampenv;
		if(a > b) a -= dampenv;
		if( abs(a-b) < dampenv) a = b;
		return a;
	}
	
	// Linear interpolate
	static double Lerp(double a, double b, double lerpFactor)
	{
		double result = ((1.f - lerpFactor) * a) + (lerpFactor * b);
		return result;
	}
	
	// Linear interpolate 3D vectors
	static vector3 Lerp3D(vector3 a, vector3 b, double lerpfactor)
	{
		vector3 result = a;
		result.x = Lerp(result.x,b.x,lerpfactor);
		result.y = Lerp(result.y,b.y,lerpfactor);
		result.z = Lerp(result.z,b.z,lerpfactor);
		return result;
	}
	
	// Determine if number v is in range of -r, r relative to t
	clearscope static bool inRange(double v, double t, double r)
	{
		return (v >= t-r && v <= t+r);
	}
	
	// Lerps from angle a to b (both between 0.f and 360.f), taking the shortest path
	static double LerpDegrees(double a, double b, double lerpFactor) 
	{
		double result;
		double diff = b - a;
		if (diff < -180.f)
		{
			// lerp upwards past 360
			b += 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result >= 360.f)
			{
				result -= 360.f;
			}
		}
		else if (diff > 180.f)
		{
			// lerp downwards past 0
			b -= 360.f;
			result = Lerp(a, b, lerpFactor);
			if (result < 0.f)
			{
				result += 360.f;
			}
		}
		else
		{
			// straight lerp
			result = Lerp(a, b, lerpFactor);
		}

		return result;
	}
	
	// Pitch between 2 vectors.
	static double getPitchBetween(Vector3 one, Vector3 two)
	{	
		vector3 delta = ( one.x - two.x, one.y - two.y, one.z - two.z );
		double pitchto = VectorAngle( sqrt(delta.y * delta.y + delta.x * delta.x), delta.z );
		return pitchto;
	}
	
	// Distance 3D on vectors, not actors.
	static double Distance3D(vector3 one, vector3 two)
	{
		return sqrt( (two.x - one.x)**2 + (two.y - one.y)**2 + (two.z - one.z)**2 );
	}
	
	// Rotate vectors.
	static Vector2 VRotate(Vector2 pos, double angle, bool invert=false)
	{
		if(invert)
		{
			double oldx = pos.x;
			pos.x = pos.y;
			pos.y = oldx;
		}
		return ( pos.y * cos(angle) - pos.x * sin(angle), 
		         pos.y * sin(angle) + pos.x * cos(angle) );
	}	
	
	// Offset vector position.
	static Vector2 VOffset(double angle, double xoffs, double yoffs, double dist)
	{
		return ( xoffs * cos(angle) - yoffs * sin(angle),
				 yoffs * cos(angle) + xoffs * sin(angle) )*dist;
	}
}
class HaloMedicalItem : Inventory
{
	double healperc;
	bool overHeal;
	Property HealPercent : healperc, overHeal;

	Default
	{
		+BRIGHT;
		HaloMedicalItem.HealPercent 100, false;
	}
	
	static const double skillMod[] =
	{
		1.0, // Easy
		0.8, // Normal
		0.5, // Heroic
		0.3, // Legendary
		0.1  // Mythic
	};
	
	override bool TryPickup(in out Actor toucher)
	{
		let hplr = HaloPlayer(toucher);
		if(!hplr) return false;
		
		if(hplr)
		{
			double adjustedHealPerc = healperc * skillMod[min(4, skill)];
			double maxHP = hplr.GetMaxHealth();
			double healTo = maxHP * (0.01*adjustedHealPerc);
			if(hplr.health >= maxHP && !overHeal) 
				return false;
			
			// console.printf("Healing: %.2f health. (Toucher HP: Max %.2f, Cur %.2f, Heal Percent %.2f)", healTo, maxHP, hplr.health, adjustedHealPerc);
			
			hplr.GiveBody(ceil(healTo), overHeal ? 200 : 0);
			bool localview = toucher.CheckLocalView();
			PrintPickupMessage(localview, PickupMessage());
			PlayPickupSound(toucher);
			GoAwayAndDie();
			return true;
		}
		return false;
	}
}
class HaloShieldCharge : Inventory
{
	double shieldperc;
	bool overshield;
	Property ShieldBoost : shieldperc, overshield;

	Default
	{
		+FLOATBOB;
		+NOGRAVITY;
		+BRIGHT;
		Scale 1.0;
		Height 8;
		Radius 8;
		HaloShieldCharge.ShieldBoost 100, false;
	}
	
	static const double skillMod[] =
	{
		1.2, // Easy
		1.0, // Normal
		0.7, // Heroic
		0.5, // Legendary
		0.2  // Mythic
	};
	
	override bool TryPickup(in out Actor toucher)
	{
		let hplr = HaloPlayer(toucher);
		if(!hplr) return false;
		
		shieldperc *= skillMod[min(4, skill)];
		double maxShields = hplr.maxshields;
		double chargeTo = maxShields * (0.01*shieldperc);
		if( hplr.shields < hplr.maxshields || overshield )
		{
			if( (hplr.shields + chargeTo) < maxShields*3.0 )
				hplr.shields += chargeTo;
				
			bool localview = toucher.CheckLocalView();
			PrintPickupMessage(localview, PickupMessage());
			PlayPickupSound(toucher);
			hplr.A_StopSound(ShieldProcessor.CHAN_SHIELDWARN); // Stop shield warning audio.
			GoAwayAndDie();
			return true;
		}
		return false;
	}
}

// Health items
class HaloHealthBonus : HaloMedicalItem replaces HealthBonus
{
	Default
	{
		HaloMedicalItem.HealPercent 6.25, true; // 12.5
		Inventory.PickupSound "Halo/Pickup/HealthBonus";
		Inventory.PickupMessage "Applied some biofoam.";
	}

	States
	{
		Spawn:
			HPBN A -1;
		stop;
	}
}

class HaloMedikit : HaloMedicalItem replaces Medikit
{	
	Default
	{
		HaloMedicalItem.HealPercent 100, false;
		Inventory.PickupSound "Halo/Pickup/Medikit";
		Inventory.PickupMessage "Applied a medkit.";
	}
	
	States
	{
		Spawn:
			HPKT A -1;
		stop;
	}
}
class HaloStimPack : HaloMedicalItem replaces StimPack
{
	Default
	{
		HaloMedicalItem.HealPercent 37.5, false;
		Inventory.PickupSound "Halo/Pickup/Stimpack";
		Inventory.PickupMessage "Used a stim pack.";
	}
	
	States
	{
		Spawn:
			HPST A -1;
		stop;
	}
}

// Shield item(s)
class HaloArmorBonus : HaloShieldCharge replaces ArmorBonus
{
	Default
	{	
		Scale 0.5;
		HaloShieldCharge.ShieldBoost 12.5, true;
		Inventory.PickupSound "Halo/Pickup/ShieldCharge";
		Inventory.PickupMessage "Picked up a Shield Charge";
	}
	
	States
	{
		Spawn:
			SHLC ABCDEFGH 2;
		loop;
	}
}

// Backpack or Ammo Crate
class HaloBackpackSpawner : CheapActor replaces Backpack
{
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		string item = "HaloAmmoCrate";
		Array<String> items;
		items.Push(item);
		
		for(int i = 0; i < AllActorClasses.Size(); i++)
		{
			let itmcls = (class<HaloPowerGiver>) (AllActorClasses[i]);
			if(!itmcls) continue;
			
			let defs = GetDefaultByType(itmcls);
			if(!defs.bBACKPACKSPAWN) continue;
			
			if(random[BackpackSpawns](0,100) <= defs.backpackSpawnChance)
				items.Push(defs.getClassName());
		}
		
		if(items.Size() > 0)
			item = items[random[BackpackSpawns](0,items.Size()-1)];
		
		// Spawn item then gtfo
		Spawn(item, pos);
		Destroy();
	}
}

class HaloAmmoCrate : Actor
{
	bool opened;
	bool empty;
	
	override bool Used(Actor user)
	{
		if(!opened || empty) return false;
		
		// Get list of all HaloDoom ammunition.
		Array<class<Ammo> > gunAmmo;
		for(int i = 0; i < AllActorClasses.Size(); i++)
		{
			let classtype = AllActorClasses[i];
			if(classtype is "Ammo" && classtype != "Ammo") 
			{
				class<Inventory> ammoItem = (class<Inventory>) (classtype);
				let defs = GetDefaultByType(ammoItem);
				String iconSprite = TexMan.GetName(defs.Icon);
				if(iconSprite.IndexOf("HLAM") == -1) continue; 
				
				gunAmmo.Push(AllActorClasses[i]);
			}
		}
		
		double angTo = AngleTo(user);
		for(int i = 0; i < gunAmmo.Size(); i++)
		{
			vector3 posOffs = (frandom[AmmoDrops](-20,20), frandom[AmmoDrops](-20,20), 12);
			let ammoObject = Spawn(gunAmmo[i], pos + posOffs);
			
			double eAngle = angTo + frandom[AmmoDrops](-30,30);
			double ePitch = -60;
			if(ammoObject)
			{
				ammoObject.vel = (
					cos(eAngle) * cos(ePitch),
					sin(eAngle) * cos(ePitch),
					-sin(ePitch)
				) * 3;
			}
		}
		
		frame = 2;
		empty = true;
		// user.GiveInventory("Backpack", 1);
		A_StartSound("Halo/AmmoCrate/Use", CHAN_AUTO);
		
		return true;
	}
	
	override void Tick()
	{
		super.Tick();
		if(isFrozen() || empty) return;
		
		if(!opened) 
			A_StartSound("Halo/AmmoCrate/Beacon", CHAN_BODY, CHANF_LOOPING);
		else
			A_StopSound(CHAN_BODY);
	
		let blockIt = BlockThingsIterator.Create(self, 8);
		Actor act;

		frame = opened ? 1 : 0;
		while(blockIt.Next())
		{
			act = blockIt.Thing;
			if(!act || !(act is "PlayerPawn")) continue;
			if(!opened) 
			{
				vel.z += 5;
				A_StartSound("Halo/AmmoCrate/Open", CHAN_AUTO);
			}
			opened = true;
		}
	}

	States
	{
		Spawn:
			AMCT A 1 Bright;
		SpawnDisplay: 
			AMCT "#" -1 Bright;
		stop;
	}
}

// Replace some vanilla pickups
class EmptyBerserk : Berserk replaces Berserk
{
	States
	{
		Spawn:
			TNT1 A 1;
		stop;
	}
}
class EmptyChainsaw : Chainsaw replaces Chainsaw
{
	Default
	{
		Tag "NotAWeapon";
	}	
	States
	{
		Spawn:
			TNT1 A 1;
		stop;
	}
}

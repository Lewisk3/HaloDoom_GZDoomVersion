class Overshield_LV1 : HaloOvershield
{	
	Default
	{
		HaloOvershield.ShieldBoost 2.0;
		HaloOvershield.UIFlashEffect "Graphics/Powerups/OS1.png";
		Inventory.PickupSound "Halo/Powerup/Shield1";
		Inventory.PickupMessage "Picked up an Overshield (LV1)";
	}
	
	States
	{
		Spawn:
			PWSH B 1 
			{
				HaloPowerup.DoParticles(self, 0xFFffa9ff);
			}
		loop;
	}
}

class Overshield_LV2 : HaloOvershield
{
	Default
	{
		HaloOvershield.ShieldBoost 3.0;
		HaloOvershield.UIFlashEffect "Graphics/Powerups/OS2.png";
		Inventory.PickupSound "Halo/Powerup/Shield2";
		Inventory.PickupMessage "Picked up an Overshield (LV2)";
	}
	
	States
	{
		Spawn:
			PWSH A 1 
			{
				HaloPowerup.DoParticles(self);
			//	DoLightning(10);
			}
		loop;
	}
}

class HasteTrail : HaloScatterShot_Trail
{
	Default
	{
		Scale 0.05;
		+INTERPOLATEANGLES;
		+NOINTERACTION;
	}
	
	override void Tick()
	{
		super.Tick();
		SetOrigin(level.vec3offset(pos, vel), true);
	}
}

class HaloPower_Haste : PowerupGiver replaces SoulSphere
{
	double bobz;
	double oldfloorz;
	Sector spawnSector;
	vector3 spawnPos;

	Default
	{
		+BRIGHT;
		Scale 0.65;
		Height 32;
		Radius 16;
		+NOGRAVITY;
		+ROLLSPRITE;
		+INTERPOLATEANGLES;
		
		Powerup.Duration -30;
		Powerup.Type "PowerHaloSpeedBoost";
		Inventory.PickupMessage "Double Time!";
		Inventory.PickupSound "Halo/Powerup/Speed";
		+INVENTORY.AUTOACTIVATE;
	}
	
	override void BeginPlay()
	{
		super.beginPlay();
		spawnPos = pos;
		spawnSector = CurSector;
		SetOrigin((pos.xy, spawnPos.z + height), true);
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		OnPickup(other);
	}
	
	void DoLightning(double amt = 20, double dist = 5, class<LightningActor> type = "UnmakerLightning")
	{
		vector2 view = (0, 0);
		int adjustedAmt = max(amt * halodoom_effectintensity, 0);

		for(int i = 0; i < adjustedAmt; i++)
		{
			vector2 localPos = (frandom(-1,1) * dist, frandom(-1,1) * (dist / 1.2));
			vector3 lightningPos = HaloMath.RelativeV3Offset(self, 0,0,0, 0, localPos.x, localPos.y + bobz, 1.);
			lightningPos.z -= (height*0.5);
			view.x = frandom(0,360);
			view.y = frandom(-60,60);

			BiriBiri.DoLightning(lightningPos, view, type:type, dist:30, 1.0, 12.0, 10.0, 30, 0);
		}
	}
	
	virtual void OnPickup(Actor other)
	{
		let hplr = HaloPlayer(other);
		if(!hplr) return;
		hplr.shields += 100;
	}
	
	virtual void VisualFX()
	{
		roll += 2;
		bobz = sin(level.maptime*10) * 5;
		HaloPowerup.DoParticles(self, pcol:"Gold", zoffset:0);
		
		vector2 localPos = (frandom(-1,1) * 6, frandom(-1,1) * (6 / 1.2));
		vector3 trailPos = HaloMath.RelativeV3Offset(self, frandom(0,360),0,0, 0, localPos.x, localPos.y + bobz, 1.);			
		let trail = Spawn("HasteTrail", trailPos - (0,0, height*0.5));
		trail.vel.z = bobz*0.25;
		
		if( !(getAge()%10) ) DoLightning(10);
	}
	
	override void Tick()
	{
		super.Tick();

		vel *= 0.94;
		if(oldfloorz != floorz && spawnSector == CurSector)
		{
			SetOrigin((pos.xy, floorz + height ), true);
			oldfloorz = floorz;
		}
		
		if(!bSPECIAL)
		{
			GoAwayAndDie();
			return;
		}
		
		SetOrigin(level.vec3offset(pos, (0,0,bobz*0.25)), true);
		VisualFX();
	}
	
	States
	{
		Spawn:
			PWHA A -1;
		stop;
	}
}

class PowerStrengthSmoke : FragGrenade_Smoke
{
	Default
	{
		Scale 0.24;
	}
}
class PowerStrengthLightning : LightningBiri
{
	Default
	{
		Scale 0.35;
		Translation "0:255=@64[255,16,16]";
	}
}

class HaloPower_Strength : HaloPower_Haste replaces Megasphere
{
	Default
	{
		Scale 0.1;
		
		Powerup.Duration -60;
		Powerup.Type "PowerHaloDamageBoost";
		Inventory.PickupMessage "QUAD DAMAGE!";
		Inventory.PickupSound "Halo/Powerup/Damage";
		+INVENTORY.AUTOACTIVATE;
	}
	
	override void OnPickup(Actor other)
	{
		other.GiveBody(200,200);
	}
	
	override void VisualFX()
	{
		double phase = cos( 40 * sin(level.maptime*14) + 16 ) + 0.25;

		double scaleBob = phase;
		A_SetScale(default.Scale.X * scaleBob);

		bobz = sin(level.maptime*10) * 5;
		HaloPowerup.DoParticles(self, pcol:"Red", amt: 20, zoffset:0);
		
		vector3 fxpos = (pos.xy, pos.z - (height*0.5));
		if(!(GetAge()%4))
			HaloMath.SpawnFX("PowerStrengthSmoke", fxpos, angle, 1, 20, 20, rstyle:STYLE_Subtract);
			
		if( !(getAge()%20) ) DoLightning(random(4,8), type:"PowerStrengthLightning");
	}
	
	States
	{
		Spawn:
			PWDM A -1;
		stop;
	}
}

class HaloPower_ActiveCamo : HaloPower_Haste replaces BlurSphere
{
	Default
	{
		+BRIGHT;
		Scale 0.05;
		Alpha 0.8;
		RenderStyle "Add";
		Powerup.Duration -60;
		Powerup.Type "PowerHaloActiveCamo";
		
		Inventory.PickupMessage "Active Camouflage!";
		Inventory.PickupSound "Halo/Powerup/Camo";
		+INVENTORY.AUTOACTIVATE;
	}
	
	override void OnPickup(Actor other) {}
	
	override void VisualFX()
	{
		bobz = sin(level.maptime*4) * 3;		
		alpha = (sin(level.maptime*10) + 1) * 0.5;
		HaloPowerup.DoParticles(self, pcol:"Blue", amt: 5, zoffset:0);	
	}
	
	States
	{
		Spawn:
			PWAC A -1;
		stop;
	}
} 

class HaloPower_Fullmap : HaloPower_ActiveCamo replaces Allmap
{
	Default
	{
		+BRIGHT;
		Scale 0.0125;
		Powerup.Type "PowerHaloAllmap";
		
		Inventory.PickupMessage "Automap revealed!";
		Inventory.PickupSound "Halo/Powerup/Allmap";
	}
	
	override void OnPickup(Actor other) {}
	
	override void VisualFX()
	{
		bobz = sin(level.maptime*4) * 3;
		double blink = (0.5 * sin(level.maptime*15)) + 0.5;
		if(blink >= 1.0) bBRIGHT = !bBRIGHT;
		
		HaloPowerup.DoParticles(self, pcol:"Green", amt: 3, zoffset:0);	
	}
	
	States
	{
		Spawn:
			PWAM A -1;
		stop;
	}
}
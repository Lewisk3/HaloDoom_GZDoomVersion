class Overshield_LV1 : HaloOvershield
{	
	Default
	{
		HaloOvershield.ShieldBoost 2.0;
		HaloOvershield.UIFlashEffect "Graphics/Powerups/OS1.png";
		Inventory.PickupSound "Halo/Powerup/Shield1";
		Inventory.PickupMessage "Picked up an Overshield (LV1)";
	}
	
	States
	{
		Spawn:
			PWSH B 1 
			{
				HaloPowerup.DoParticles(self, 0xFFffa9ff);
			}
		loop;
	}
}

class Overshield_LV2 : HaloOvershield
{
	Default
	{
		HaloOvershield.ShieldBoost 3.0;
		HaloOvershield.UIFlashEffect "Graphics/Powerups/OS2.png";
		Inventory.PickupSound "Halo/Powerup/Shield2";
		Inventory.PickupMessage "Picked up an Overshield (LV2)";
	}
	
	States
	{
		Spawn:
			PWSH A 1 
			{
				HaloPowerup.DoParticles(self);
			//	DoLightning(10);
			}
		loop;
	}
}

class HasteTrail : HaloScatterShot_Trail
{
	Default
	{
		Scale 0.05;
		+INTERPOLATEANGLES;
		+NOINTERACTION;
	}
	
	override void Tick()
	{
		super.Tick();
		SetOrigin(level.vec3offset(pos, vel), true);
	}
}

class HaloPowerGiver : PowerupGiver abstract
{
	double bobz;
	double oldfloorz;
	double backpackSpawnChance;
	Sector spawnSector;
	vector3 spawnPos;
	vector2 overlayUseOffs;
	uint fxFlags;
	
	flagdef FXHOVER : fxFlags, 0;
	flagdef USETOPICKUP : fxFlags, 2;
	flagdef BACKPACKSPAWN : fxFlags, 3;

	Property BackpackRarity : backpackSpawnChance;

	Default
	{
		+BRIGHT;
		Height 32;
		Radius 16;
		+NOGRAVITY;
		+INTERPOLATEANGLES;
		
		+INVENTORY.AUTOACTIVATE;
		+HaloPowerGiver.FXHOVER;
		HaloPowerGiver.BackpackRarity 100;
	}
	
	override void BeginPlay()
	{
		super.beginPlay();
		spawnPos = pos;
		spawnSector = CurSector;
		SetOrigin((pos.xy, spawnPos.z + height), true);
	}
	
	ui virtual void UIOverlayDraw(RenderEvent ev, Actor cam, double dt)
	{
		if(bUSETOPICKUP && cam.Distance3DSquared(self) <= 5000+(radius*radius))
		{
			bool infront;
			HLViewProjection viewproj = HLSBS.GetEventViewerProj(ev);
			
			vector2 apos, bpos;
			[infront, apos] = HLSBS.GetActorHUDPos (
				viewproj,
				self, 30+overlayUseOffs.x, 0, (self.height/3)+5+overlayUseOffs.y
			);
			[infront, bpos] = HLSBS.GetActorHUDPos (
				viewproj,
				self, 30+overlayUseOffs.x, 0, (self.height/3)+10+overlayUseOffs.y
			);	

			if(infront) 
			{
				string pickup1 = PICKUP_STR1;
				string pickup2 = PICKUP_STR2;
				pickup1.Replace("$WEAPNAME",GetTag());
				pickup2.Replace("Hold", "Press");
				
				HLSBS.DrawString3D("smallfont", 
					pickup1, 
					apos, 0, 
					Font.CR_GRAY, 
					scale:(0.75,0.75),
					distance: ev.Camera.Distance3D(self)
				);
				HLSBS.DrawString3D("smallfont", 
					pickup2, 
					bpos, 0, 
					0, 
					scale:(0.5,0.5),
					distance: ev.Camera.Distance3D(self)
				);
			}
		}
	}
	
	override bool CanPickup(Actor toucher)
	{
		if(bUSETOPICKUP) return false;
		return super.CanPickup(toucher);
	}
	
	override bool Used(Actor user)
	{
		if(!bUSETOPICKUP) return super.Used(user);
		
		if(!user.FindInventory((class<Inventory>)(PowerupType))) 
		{
			TryPickup(user);
			PrintPickupMessage(user.CheckLocalView(), PickupMessage());
			if(!bQuiet) PlayPickupSound(user);				
		}
		return false;
	}
	
	override void AttachToOwner(Actor other)
	{
		super.AttachToOwner(other);
		OnPickup(other);
	}
	
	void DoLightning(double amt = 20, double dist = 5, class<LightningActor> type = "UnmakerLightning")
	{
		vector2 view = (0, 0);
		int adjustedAmt = max(amt * halodoom_effectintensity, 0);

		for(int i = 0; i < adjustedAmt; i++)
		{
			vector2 localPos = (frandom(-1,1) * dist, frandom(-1,1) * (dist / 1.2));
			vector3 lightningPos = HaloMath.RelativeV3Offset(self, 0,0,0, 0, localPos.x, localPos.y + bobz, 1.);
			lightningPos.z -= (height*0.5);
			view.x = frandom(0,360);
			view.y = frandom(-60,60);

			BiriBiri.DoLightning(lightningPos, view, type:type, dist:30, 1.0, 12.0, 10.0, 30, 0);
		}
	}
	
	virtual void OnPickup(Actor other)
	{
		
	}
	
	virtual void VisualFX()
	{
		bobz = sin(level.maptime*10) * 5;
	}
	
	override void Tick()
	{
		super.Tick();

		vel *= 0.94;
		if(oldfloorz != floorz && spawnSector == CurSector)
		{
			double addz = bFXHOVER ? height : 0;
			SetOrigin((pos.xy, floorz + addz), true);
			oldfloorz = floorz;
		}
		
		if(!bSPECIAL)
		{
			GoAwayAndDie();
			return;
		}
		
		SetOrigin(level.vec3offset(pos, (0,0,bobz*0.25)), true);
		VisualFX();
	}
}

class HaloPower_Haste : HaloPowerGiver replaces SoulSphere
{
	Default
	{
		Scale 0.05;
		Height 32;
		Radius 16;

		Powerup.Duration -30;
		Powerup.Type "PowerHaloSpeedBoost";
		Inventory.PickupMessage "Double Time!";
		Inventory.PickupSound "Halo/Powerup/Speed";
	}
	
	override void OnPickup(Actor other)
	{
		let hplr = HaloPlayer(other);
		if(!hplr) return;
		hplr.shields += 100;
	}
	
	override void VisualFX()
	{
		roll += 2;
		bobz = sin(level.maptime*10) * 5;
		HaloPowerup.DoParticles(self, pcol:"Gold", zoffset:0);
		
		vector2 localPos = (frandom(-1,1) * 6, frandom(-1,1) * (6 / 1.2));
		vector3 trailPos = HaloMath.RelativeV3Offset(self, frandom(0,360),0,0, 0, localPos.x, localPos.y + bobz, 1.);			
		let trail = Spawn("HasteTrail", trailPos - (0,0, height*0.5));
		trail.vel.z = bobz*0.25;
		
		if( !(getAge()%10) ) DoLightning(10);
	}
	
	States
	{
		Spawn:
			PWHA A -1;
		stop;
	}
}

class PowerStrengthSmoke : FragGrenade_Smoke
{
	Default
	{
		Scale 0.24;
	}
}
class PowerStrengthLightning : LightningBiri
{
	Default
	{
		Scale 0.35;
		Translation "0:255=@64[255,16,16]";
	}
}

class HaloPower_Strength : HaloPower_Haste replaces Megasphere
{
	Default
	{
		Scale 0.05;
		
		Powerup.Duration -60;
		Powerup.Type "PowerHaloDamageBoost";
		Inventory.PickupMessage "QUAD DAMAGE!";
		Inventory.PickupSound "Halo/Powerup/Damage";
		+INVENTORY.AUTOACTIVATE;
	}
	
	override void OnPickup(Actor other)
	{
		other.GiveBody(200,200);
	}
	
	override void VisualFX()
	{
		double phase = cos( 40 * sin(level.maptime*14) + 16 ) + 0.25;

		double scaleBob = phase;
		A_SetScale(default.Scale.X * scaleBob);

		bobz = sin(level.maptime*10) * 5;
		HaloPowerup.DoParticles(self, pcol:"Red", amt: 20, zoffset:0);
		
		vector3 fxpos = (pos.xy, pos.z - (height*0.5));
		if(!(GetAge()%4))
			HaloMath.SpawnFX("PowerStrengthSmoke", fxpos, angle, 1, 20, 20, rstyle:STYLE_Subtract);
			
		if( !(getAge()%20) ) DoLightning(random(4,8), type:"PowerStrengthLightning");
	}
	
	States
	{
		Spawn:
			PWDM A -1;
		stop;
	}
}

class HaloPower_ActiveCamo : HaloPower_Haste replaces BlurSphere
{
	Default
	{
		+BRIGHT;
		Scale 0.05;
		Alpha 0.8;
		RenderStyle "Add";
		Powerup.Duration -60;
		Powerup.Type "PowerHaloActiveCamo";
		
		Inventory.PickupMessage "Active Camouflage!";
		Inventory.PickupSound "Halo/Powerup/Camo";
		+INVENTORY.AUTOACTIVATE;
	}
	
	override void OnPickup(Actor other) {}
	
	override void VisualFX()
	{
		bobz = sin(level.maptime*4) * 3;		
		alpha = (sin(level.maptime*10) + 1) * 0.5;
		HaloPowerup.DoParticles(self, pcol:"Blue", amt: 5, zoffset:0);	
	}
	
	States
	{
		Spawn:
			PWAC A -1;
		stop;
	}
} 

class HaloPower_Fullmap : HaloPower_ActiveCamo replaces Allmap
{
	Default
	{
		+BRIGHT;
		Scale 0.0125;
		Powerup.Type "PowerHaloAllmap";
		
		Inventory.PickupMessage "Automap revealed!";
		Inventory.PickupSound "Halo/Powerup/Allmap";
	}
	
	override void OnPickup(Actor other) {}
	
	override void VisualFX()
	{
		bobz = sin(level.maptime*4) * 3;
		double blink = (0.5 * sin(level.maptime*15)) + 0.5;
		if(blink >= 1.0) bBRIGHT = !bBRIGHT;
		
		HaloPowerup.DoParticles(self, pcol:"Green", amt: 3, zoffset:0);	
	}
	
	States
	{
		Spawn:
			PWAM A -1;
		stop;
	}
}

class HaloPower_Jetpack : HaloPower_Haste
{
	JetpackExhaust leftFire, rightFire;

	Default
	{
		+BRIGHT;
		+FORCEYBILLBOARD; 
		Scale 0.5;
		Height 24;
		Powerup.Duration 0x7FFFFFFD;
		Powerup.Type "PowerJetpack";
		
		Tag "Jetpack";
		Inventory.PickupMessage "Picked up a Jetpack (Hold JUMP to activate)";
		Inventory.PickupSound "Halo/Powerup/Visor";
		-HaloPowerGiver.FXHOVER;
		+HaloPowerGiver.USETOPICKUP;
		+HaloPowerGiver.BACKPACKSPAWN;
	}
		
	override void OnPickup(Actor other) 
	{
		A_StopSound(CHAN_BODY);
		if(leftFire) leftFire.Destroy();
		if(rightFire) rightFire.Destroy();
	}
	
	override void VisualFX()
	{
		overlayUseOffs = (-15,10);
		if(pos.z < floorz+16) SetOrigin((pos.xy, floorz+16), true);
		bobz = sin(level.maptime*4) * 2;
		
		let viewerPlr = players[consoleplayer].mo;
		Quat dir = Quat.FromAngles(viewerPlr.angle, pitch, roll);
		vector3 leftPos  = (0, -18, 26);
		vector3 rightPos = (0,  18, 26);
		
		if(!leftFire)
		{
			leftFire = JetpackExhaust(Spawn("JetpackExhaust",pos));
			if(leftFire) leftFire.A_SetScale(0.35);
		}
		else
		{
			leftFire.SetOrigin(level.vec3offset(pos, dir * leftPos), true);
		}
		
		if(!rightFire)
		{
			rightFire = JetpackExhaust(Spawn("JetpackExhaust",pos));
			if(rightFire) rightFire.A_SetScale(0.35);
		}
		else
		{
			rightFire.SetOrigin(level.vec3offset(pos, dir * rightPos), true);
		}
		
		A_StartSound("Halo/Powerup/Jetpack/Loop", CHAN_BODY, CHANF_LOOPING);
	}
	
	States
	{
		Spawn:
			PWJP A -1; // NoDelay A_SpriteOffset(0,30);
		stop;
	}
}

class JetpackExhaust : CheapActor
{
	Default
	{
		Scale 0.75;
		Alpha 0.65;
		Damage 128;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
	}
	
	override void Tick()
	{
		super.Tick();
		Scale.Y = -Scale.X;
		
		if(!(getAge() % 3))
		{
			if(master) HaloMath.ExplodeEx(master, 2,96, 0.5, 0.3, "Fire", infiniteHeight:true);
			let smk = Spawn("JetpackSmoke", pos + (0,0,-15*(scale.x/0.75)));
			if(smk) smk.A_SetScale(Scale.X * 0.15);	
		}
	}
	
	States
	{
		Spawn:
			FLML ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 Bright;
		loop;
	}
}

class JetpackSmoke : CheapActor
{
	double rollvel;
	vector2 wind_dir;
	Default
	{
		Scale 1.0;
		+ROLLSPRITE;
	}
	
	override void BeginPlay()
	{	
		alpha = frandom(0.5, 1.0);
		A_SetScale(frandom(default.scale.x * 0.15, default.scale.x));
		rollvel = frandom(-2.0, 2.0);
		wind_dir = AngleToVector(frandom(0,180), frandom(-0.005, 0.005)); 
		super.BeginPlay();
	}
	
	override void Tick()
	{
		super.Tick();
		vel.z -= 0.1;
		
		SetOrigin(level.vec3offset(pos, vel), true);
		A_SetRoll(roll + rollvel, SPF_INTERPOLATE);
		vel += wind_dir * frandom(0.25, 1.0);
		if(getAge() <= 20)
			A_SetScale(Scale.X * 0.96, Scale.Y * 0.96);
	}
	
	States
	{
		Spawn:
			XTH1 ACEGIKMOQSUWY 1 Bright;
			XTH2 BDFHJLNPRTV 1 Bright;
		Smoke:
			TNT1 A 0;
			SMK5 "#" 1 { frame = random(0, 23); }
		SmokeLoop:
			SMK5 "#" 1 
			{
				A_SetScale(Scale.X * 1.07, Scale.Y * 1.07);
				A_FadeOut(0.03);
			}
		wait;
	}
}
 

class HaloPower_Visor : HaloPower_Haste replaces Infrared
{
	Default
	{
		+BRIGHT;
		-NOGRAVITY;
		Scale 0.05;
		Height 24;
		Powerup.Duration 0x7FFFFFFD;
		Powerup.Type "PowerHaloVisor";
		
		Tag "V.I.S.R. Module";
		Inventory.PickupMessage "Picked up a V.I.S.R. Module. (Warning: Damage Detected)";
		Inventory.PickupSound "Halo/Powerup/Visor";
		-HaloPowerGiver.FXHOVER;
		+HaloPowerGiver.USETOPICKUP;
		+HaloPowerGiver.BACKPACKSPAWN;
	}
		
	override void OnPickup(Actor other) 
	{
		A_StopSound(CHAN_BODY);
	}
	
	override void VisualFX()
	{
		// bobz = sin(level.maptime*4) * 3;
		// HaloPowerup.DoParticles(self, pcol:"Red", amt: 3, zoffset:0);	
		
		double blink = (0.5 * sin(level.maptime*15)) + 0.5;
		if(blink >= 1.0) bBRIGHT = !bBRIGHT;
		
		A_StartSound("Halo/Powerup/Visor/Alert", CHAN_BODY, CHANF_LOOPING);
	}
	
	States
	{
		Spawn:
			PWVS A -1; // NoDelay A_SpriteOffset(0,30);
		stop;
	}
}

class ShieldProcessor : Inventory
{
	double shields;
	double maxshields;
	double prevShields;
	double forwardOffs;
	int regenDelay, regenSpeed;
	int regenTimer;
	bool regenerating;
	
	Sound snd_ShieldBreak, snd_ShieldRecharging, snd_ShieldLow, snd_ShieldRecover;
	
	Property MaxShields : maxshields;
	Property RegenSpeeds : regenDelay, regenSpeed;
	Property ForwardOffset : forwardOffs;
	
	Property BreakSound : snd_ShieldBreak;
	Property WarningSound : snd_ShieldLow;
	Property RecoverSound : snd_ShieldRecover;
	Property RechargingSound : snd_ShieldRecharging;
		
	Default
	{
		RenderStyle "Translucent";
		Translation "0:255=@65[10,8,240]";
		+INTERPOLATEANGLES;
		Alpha 0.5;
		Scale 1.0;
		inventory.maxamount 1;
		ShieldProcessor.MaxShields 100;
		ShieldProcessor.RegenSpeeds 2 * 35, 4 * 35; 
		ShieldProcessor.ForwardOffset 5;
	}
	
	override void AttachToOwner(Actor other)
	{
		// Defaults.
		shields = maxshields;
		
		super.AttachToOwner(other);
	}
	
	static ShieldProcessor Attach(Actor src)
	{
		let shp = ShieldProcessor(src.FindInventory("ShieldProcessor"));
		if(shp) return shp;
		
		src.GiveInventory("ShieldProcessor", 1);
		return ShieldProcessor(src.FindInventory("ShieldProcessor"));
	}
	
	virtual void DisplayShields()
	{
		if(shields < maxshields && shields > 0)
		{
			alpha = 1.0 - (shields / maxshields);
		}
		else
		{
			alpha = 0;
		}
		
		if(prevShields > 0 && shields <= 0)
		{
			// Shield broke
			OnShieldBreak();
		}
		
		prevShields = shields;
	}
	
	virtual void OnShieldBreak()
	{
		Owner.A_StartSound(snd_ShieldBreak, CHAN_AUTO, CHANF_OVERLAP);
	}
	
	virtual void updateShields()
	{
		if(shields <= 0) regenTimer++;
		
		if(snd_ShieldLow)
		{
			if(shields <= maxshields*0.25) 
				Owner.A_StartSound(snd_ShieldLow, CHAN_5, CHANF_LOOPING);
			else
				Owner.A_StopSound(CHAN_5);
		}
		
		// Shield Regen
		if(regenTimer < regenDelay) 
		{	
			regenTimer++;
			if(shields > maxshields) regenTimer = regenDelay;
		}
		regenTimer = clamp(regenTimer, -regenDelay, regenDelay);
		if(regenTimer >= regenDelay && shields < maxshields) 
		{
			shields += maxshields/regenSpeed;
			shields = clamp(shields, 0, maxshields);
			if(!regenerating) 
				Owner.A_StartSound(snd_ShieldRecover, CHAN_AUTO, CHANF_OVERLAP);
			else
				Owner.A_StartSound(snd_ShieldRecharging, CHAN_AUTO, CHANF_OVERLAP);
			regenerating = true;
		}
		else
		{
			regenerating = false;
		}
	}
	
	override void DoEffect()
	{		
		// Don't be invisible while held.
		if(GetAge() <= 1)
		{
			bInvisible = false; 
			// Inventory items by default are unlinked from the world
			// due to this they're normally not rendered when in an actor's
			// inventory. We don't want this behavior so, we relink it.
			A_ChangeLinkFlags(0, 0);
			
			// This bit has to do with rendering order.
			// Inventory stat num seems to render under the actor it's attached
			// to, which makes it look less visually appealing.
			ChangeStatNum(STAT_DEFAULT); 
			return;
		}
				
		// Make invisible for source, if source is player.
		let localplr = players[consoleplayer].mo;
		if( localplr == PlayerPawn(Owner) )
		{
			bInvisible = (localplr.player.cheats & CF_CHASECAM) ? false : true;
		}
		
		// Copy source values.		
		angle = Owner.angle;
		pitch = Owner.pitch;
		roll  = Owner.roll;
		Sprite = Owner.Sprite;
		Frame = Owner.Frame;
		Tics = Owner.Tics;
		vel = Owner.vel;
		A_SetScale(Owner.Scale.X, Owner.Scale.Y);
		
		let viewer = players[consoleplayer].mo;
		if(!viewer) return;
		
		vector3 fwd = (
			cos(viewer.angle) * cos(viewer.pitch),
			sin(viewer.angle) * cos(viewer.pitch),
			-sin(viewer.pitch)
		) * -forwardOffs;
		
		SetOrigin(level.vec3offset(Owner.pos, vel + fwd), true);
		
		// Shield effect logic.
		DisplayShields();
		updateShields();
		
		// Do not run on dead actors.
		if(Owner.health <= 0) 
		{
			Owner.RemoveInventory(self);
			GoAwayAndDie();
			return;
		}
	}
	
	virtual double applyShieldBleedDamage(int dmg, Name mod)
	{
		return dmg;
	}
	
	virtual double OnShieldDamage(double dmg, Name mod, Actor inflictor, Actor source)
	{
		// Useful for playing sound effects or other effects when shields take a hit.
		return dmg;
	}
	
	virtual double AdjustDamage(int dmg, Name type)
	{
		return dmg;
	}
	
	override void ModifyDamage(int damage, Name damageType, out int newdamage, bool passive, Actor inflictor, Actor source, int flags)
	{
		if(!Owner || !passive) return;
		damage = AdjustDamage(damage, damageType);
		newdamage = max(0, ApplyDamageFactors(GetClass(), damageType, damage, damage));
		
		if (damage > 0 && shields > 0)
		{
			// Get real damage amount, taking into account modified damage.
			double truedamage = newdamage;
			regenTimer = 0; // Stop regeneration.
			truedamage = OnShieldDamage(truedamage, damageType, inflictor, source);
			shields -= truedamage;
			newdamage = 0;
			
			// Conditionally apply bleed damage through shields.
			if(shields <= 0) 
			{	
				double truedmg = abs(shields);
				newdamage = applyShieldBleedDamage(truedmg, damageType);
				shields = 0;
			}		
		}
	}
	
	States
	{
		Held:
			"####" "#" 1;
		loop;
	}
}
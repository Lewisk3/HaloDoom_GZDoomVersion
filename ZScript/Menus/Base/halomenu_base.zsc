class HaloMenuBase : ListMenu
{	
	int btn_selected;
	double prevMS;
	double deltatime;
	double buttonAlpha;
	
	// Elements
	MenuTexture MainBG;
	Mouse mMouse;
	Array<Button> buttons;
		
	virtual TextElement newBtnText(String txt, Font fnt = "HaloFont", double scale = 0.25)
	{
		return TextElement.Create(fnt, txt, (0,0), (scale,scale), Font.CR_WHITE);
	}
	
	override void Init(Menu parent, ListMenuDescriptor desc)
	{
		Super.Init(parent, desc);
		btn_selected = -1;
		buttonAlpha = 1.0;
	}

	bool CanSave()
	{
		bool canSave = true;
		if (gamestate != GS_LEVEL)
			canSave = false;
		else if (consoleplayer < 0)
			canSave = false;
		else if (!players[consoleplayer].mo)
			canSave = false;
		else if (players[consoleplayer].mo.health <= 0)
			canSave = false;
		
		return canSave;
	}
	
	override void Drawer()
	{
		if(MainBG) MainBG.Draw();
		
		for(int i = 0; i < buttons.Size(); i++) 
		{
			buttons[i].Draw(buttonAlpha);
		}
		
		if(!prevMS)
		{
			prevMS = MSTime();
			return;
		}
		double ftime = MSTime()-prevMS;
		prevMS = MSTime();
		double dtime = 1000.0 / 60.0;
		deltatime = (ftime/dtime);
	}
	
	virtual void OnMenuThink() {}
	override bool OnUIEvent(UiEvent ev)
	{
		OnMenuThink();
		if(ev.Type == UIEvent.Type_KeyDown)
		{
			string menuKeyStr = ev.KeyString;
			Array<int> consoleKeys; 
			Bindings.GetAllKeysForCommand(consoleKeys, "toggleconsole");
			
			for(int i = 0; i < consoleKeys.Size(); i++)
			{
				int keyScan = consoleKeys[i];
				string keyStr = Bindings.NameKeys(keyScan,0);
				if(menuKeyStr ~== keyStr)
				{
					Close();
					return false;
				}
			}
		}
		
		if(mMouse) 
		{
			mMouse.Update(ev);
			if(ev.Type == UIEvent.Type_MouseMove) 
			{
				if(btn_selected > -1)mMouse.left_pressed = false;
				btn_selected = -1;
			}
		}
		return false;
	}
	override bool OnInputEvent(InputEvent ev)
	{
		return false;
	}
	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		OnMenuThink();
		if(!mMouse) return false;
		
		switch (mkey)
		{
		case MKEY_Up:
			btn_selected--;
			if(btn_selected < 0) btn_selected = buttons.Size()-1;
			mMouse.SetPos(buttons[btn_selected].btnrect.pos);
			return true;
		case MKEY_Down:
			btn_selected++;
			if(btn_selected > buttons.Size()-1) btn_selected = 0;
			mMouse.SetPos(buttons[btn_selected].btnrect.pos);
			return true;
		case MKEY_Enter:
			if(btn_selected >= 0 && btn_selected <= buttons.Size()-1) 
				buttons[btn_selected].clicked = true;
			return true;
		case MKEY_Back:
			Close();
			return true;
		}
		return false;
	}
}
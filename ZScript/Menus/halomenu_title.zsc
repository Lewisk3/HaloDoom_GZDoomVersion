class HaloDoom_TitleMenu : HaloMenuBase
{
	double fadein;
	bool title;
	
	override void Init(Menu parent, ListMenuDescriptor desc)
	{
		Super.Init(parent, desc);
		
		title = (gamestate == GS_TITLELEVEL);
		MainBG = MenuTexture.Create("Graphics/UI/Title/TitleLogo.png",(0,-200),(0.5,0.5));
		mMouse = Mouse.Create("", 0,0,8,8);
		
		double btnY = 680; 
		double btnW = 0.7;
		double btnH = 0.2;
		double itemSpacing = 70;
		
		string btnON  = "Graphics/UI/Title/NONE.png";
		string btnOFF = "Graphics/UI/Title/NONE.png";
		string btnHover = "Graphics/UI/Title/btn_light.png";
		
		TextElement btntxt = newBtnText("CAMPAIGN");
		buttons.push(Button.Create('NewGame', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
		btnY += itemSpacing;
		
		if(!title)
		{
			btntxt = newBtnText("SAVE GAME");
			buttons.push(Button.Create('SaveGame', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
			btnY += itemSpacing;	
		}
		
		btntxt = newBtnText("LOAD GAME");
		buttons.push(Button.Create('LoadGame', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
		btnY += itemSpacing;
		
		if(title)
		{
			btntxt = newBtnText("CONFIGURE");
			buttons.push(Button.Create('Configure', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
			btnY += itemSpacing;
		}
		
		btntxt = newBtnText("OPTIONS");
		buttons.push(Button.Create('Options', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
		btnY += itemSpacing;
		
		btntxt = newBtnText("QUIT");
		buttons.push(Button.Create('Quit', btnOFF ,  btnON , btnHover, 960, btnY, btnW, btnH, btntxt));
		
		for(int i = 0; i < buttons.Size(); i++)
			buttons[i].ScaleCollider(0.9, 0.7);
		
		if(title) S_ChangeMusic("Music/TITLEMUS" .. random[TMUS](1,5) .. ".ogg", force:true);
		
		DontDim = true;
		mMouse.SetPos(buttons[0].btnrect.pos);
		btn_selected = 0;
		buttonAlpha = 0.6;
		fadein = title ? 1.0 : 0.15;
	}
	
	override bool MenuEvent(int mkey, bool fromcontroller)
	{
		if(!mMouse) return false;
		
		switch (mkey)
		{
		case MKEY_Up:
			btn_selected--;
			if(btn_selected < 0) btn_selected = buttons.Size()-1;
			mMouse.SetPos(buttons[btn_selected].btnrect.pos);
			return true;
		case MKEY_Down:
			btn_selected++;
			if(btn_selected > buttons.Size()-1) btn_selected = 0;
			mMouse.SetPos(buttons[btn_selected].btnrect.pos);
			return true;
		case MKEY_Enter:
			if(btn_selected >= 0 && btn_selected <= buttons.Size()-1) 
				buttons[btn_selected].clicked = true;
			return true;
		case MKEY_Back:
			if(gamestate != GS_TITLELEVEL) Close();
			return true;
		}
		return false;
	}
	
	void DStr(String str, vector2 pos, Color col = Font.CR_WHITE, vector2 scale=(1.15,1.15))
	{
		HLSBS.DrawString("BigFont",str,pos,0,col,1.0,scale);
	}
	
	override void Drawer()
	{
		super.Drawer();
		mMouse.Draw();
		
		vector2 ht_pos = (75,1000);
		for(int i = 0; i < buttons.Size(); i++)
		{
			if(buttons[i].btntext)
			{
				if(buttons[i].pressed)
					buttons[i].btntext.font_color = Font.CR_BLUE;
				else if(buttons[i].hovered)
					buttons[i].btntext.font_color = Font.CR_WHITE;
				else
					buttons[i].btntext.font_color = Font.CR_BLACK;
			}
		}
		
		if(gamestate == GS_LEVEL) 
		{
			fadein = 0.15;
		}
		
		if(fadein > 0.15) fadein -= 0.02 * deltatime;
		HLSBS.Dim(Color(255,0,0,0), fadein);
	}
	
	override void Ticker()
	{
		for(int i = 0; i < buttons.Size(); i++)
		{
			buttons[i].Update(mMouse, btn_selected == -1);
				
			if(buttons[i].clicked)
			{
				MenuSound("UI/PressButton");
				buttons[i].clicked = false;
				
				Switch(buttons[i].type)
				{
					case 'NewGame':	 	// New Game
						Menu.SetMenu('HaloPlayerClassMenu');
					break;
					case 'SaveGame':		// Save Game
						Menu.SetMenu('SaveGameMenu');
					break;
					case 'LoadGame':		// Load Game
						Menu.SetMenu('LoadGameMenu');
					break;
					case 'Configure':
						Menu.Setmenu("HaloDoomGameplayOptions");
					break;
					case 'Options':     // Options
						Menu.SetMenu('OptionsMenu');
					break;
					case 'Quit':		// Exit
						Menu.SetMenu("QuitMenu");
					break;
					default:
					break;
				}
			}
		}
	}
}

// TitleMap Objects
class Halo_Ring : Actor
{
	Default
	{
		+NOINTERACTION;
		+INTERPOLATEANGLES;
	}
	
	States
	{
		Spawn:
			RING A 1
			{
				pitch += 0.125;
			}
		loop;
	}
}

class Halo_RingPlanet : Actor
{
	Default
	{
		+NOINTERACTION;
		+WALLSPRITE;
		Scale 0.75;
	}
	
	States
	{
		Spawn:
			PLNT A -1;
		stop;
	}	
}

class Halo_Sky : Actor
{
	Default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			RING A -1 Bright;
		stop;
	}
}
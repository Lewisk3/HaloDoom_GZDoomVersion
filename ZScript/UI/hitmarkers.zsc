class HitMarkerQueued : Object
{
	int ontic;
	uint qlayer;
	class<HitMarker> type;
	static HitMarkerQueued Queue(uint layer, class<HitMarker> hm)
	{
		let hitmobj = new("HitMarkerQueued");
		if(hitmobj)
		{
			hitmobj.qlayer = layer;
			hitmobj.type = hm;
			hitmobj.ontic = level.maptime;
		}
		return hitmobj;
	}
}

class HitMarkers : Object
{
	ui Array<HitMarker> actives;
	play Array<HitMarkerQueued> queued;
	
	play void Queue(uint layer, class<HitMarker> hm)
	{
		queued.Push(HitMarkerQueued.Queue(layer, hm));
	}
	
	// Move queued hitmakers into active hitmarkers (Play -> UI).
	ui void Process()
	{
		for(int i = queued.Size()-1; i >= 0; i--)
		{
			let hitq = queued[i];
			
			for(int x = actives.Size()-1; x >= 0; x--)
			{
				let hitm = actives[x];
				if(hitm && hitm.ui_layer == hitq.qlayer)
				{
					actives[x].Destroy();
					actives.Delete(x);
				}
			}
			
			HitMarker obj = HitMarker(new(hitq.type));			
			if(obj) 
			{
				obj.Init();
				obj.ui_layer = hitq.qlayer;
			}
			actives.Push(obj);			
		}
	}
	
	// Draw active hitmarkers
	ui void Animate(double deltatime, vector2 mid)
	{
		for(int i = actives.Size()-1; i >= 0; i--) 
		{
			// Cleanup "dead" hitmarkers.
			if(!actives[i]) 
			{
				actives.Delete(i);
				continue;
			}
			actives[i].Draw(deltatime, mid);
		}
	}
	
	// De-queue old hitmarker "requests"
	play void Cleanup()
	{
		for(int i = queued.Size()-1; i >= 0; i--)
		{
			if(queued[i].ontic != level.time) 
				queued.Delete(i);
		}
	}
}

class HitMarker : Object
{
	uint ui_layer;
	vector2 pos;
	vector2 scale;
	double rotation;
	double alpha;
	virtual ui void Init()
	{
	}
	virtual ui void Draw(double dT, vector2 mid = (0,0))
	{
	}
}

class HitM_Normal : HitMarker
{
	double dist;
	double animscale;
	
	vector2 angdist(double ang, double dist)
	{
		return (cos(ang), sin(ang)) * dist;
	}
	
	override void Init()
	{
		alpha = 1.0;
		animscale = 1.0;
		scale = (0.25, 0.25);
		dist = 30;
	}
	
	override void Draw(double dT, vector2 mid)
	{
		// Draw 4 cornered hitmarker, starting at the center, moving inwards.
		uint flags = HLSBS.SS_SCREEN_CENTER;
		vector2 fscale = (scale.x*animscale, scale.y*animscale);
		double offs = 170 * fscale.x;
		
		HLSBS.DrawImage("hitdef1", ( offs, offs) + angdist(45, dist)  + mid, flags, alpha, scale:fscale);
		HLSBS.DrawImage("hitdef2", (-offs, offs) + angdist(135, dist) + mid, flags, alpha, scale:fscale);
		HLSBS.DrawImage("hitdef3", ( offs,-offs) + angdist(315, dist) + mid, flags, alpha, scale:fscale);
		HLSBS.DrawImage("hitdef4", (-offs,-offs) + angdist(225, dist) + mid, flags, alpha, scale:fscale);
		
		dist -= 3 * dT;
		if(animscale > 0.1) animscale -= 0.09 * dT;
		alpha -= 0.06 * dT;  
		if(alpha <= 0.1) Destroy();
	}
}

class HitM_Headshot : HitMarker
{
	double animscale;
	String img;
	uint pickimg;
	
	override void Init()
	{
		pickimg = random[HitmarkRNG](0,1);
		img = String.Format("hithed%d", pickimg+1);
		alpha = 1.0;
		animscale = 1.0;
		scale = (0.4, 0.4);
	}
	
	override void Draw(double dT, vector2 mid)
	{
		uint flags = HLSBS.SS_SCREEN_CENTER;
		vector2 fscale = (scale.x*animscale, scale.y*animscale);
		HLSBS.DrawImage(img, mid, flags, alpha, scale:fscale);

		if(animscale > 0.1) animscale -= 0.04 * dT;
		alpha -= 0.06 * dT;  
		if(alpha <= 0.1) Destroy();
	}
}

class HitM_Killed : HitM_Headshot
{
	override void Init()
	{
		img = "hitkill1";
		alpha = 0.8;
		animscale = 0.65;
		scale = (0.4, 0.4);
	}
}
class StringHelper Abstract
{
	static bool IsUpper(uint ch)
	{
		return ch != 0 ? ch == String.CharUpper(ch) : false;
	}
	
	static void SplitByUppercase(String src, out Array<String> tokens)
	{
		tokens.Clear();
		int foundat = -1;
		for(int i = 0; i <= src.Length(); i++)
		{
			if(StringHelper.IsUpper(src.ByteAt(i)))
			{
				if(foundat >= 0) tokens.Push(src.Mid(foundat, i-foundat));
				foundat = i;
			}
			else if(i >= src.Length() && foundat >= 0) 
			{
				tokens.Push(src.Mid(foundat, src.Length()));
				break;
			}
		}
	}
}

class Halo_OverlayUI : EventHandler
{	
	Array<Key> foundkeys;
	
	ui double prevMS, deltatime;
	HitMarkers ui_hitmarkers;

	void AddNewKey(Key k)
	{
		string colors = (
			"Brick.Tan.Gray.Grey.Green.Brown.Gold.Red.Blue.Orange.White.Yellow."
			"Black.LightBlue.Cream.Olive.DarkGreen.DarkRed.DarkBrown.Purple."
			"DarkGray.Cyan.Ice.Fire.Sapphire.Teal" 
		);
		foundkeys.push(k);
		String keyname = k.GetClassName();
		Array<String> keytype;
		StringHelper.SplitByUppercase(keyname, keytype);
		// Find first valid key color.
		for(int i = 0; i < keytype.Size(); i++)
		{
			if(colors.IndexOf(keytype[i]) == -1) continue;
			Color kcol = Color(keytype[i]);
			k.SetShade(kcol);
		}
	}
	
	override void WorldLoaded(WorldEvent e)
	{
		foundkeys.Clear();
		let key_it = ThinkerIterator.Create("Key");
		Key foundkey;
		while( foundkey = Key(key_it.Next()) ) AddNewKey(foundkey);
	}	
	override void WorldThingSpawned(WorldEvent e)
	{
		if(e.Thing is "Key") AddNewKey(Key(e.Thing));
	}
	
	override void NetworkProcess(ConsoleEvent e)
	{
		String cmd = e.Name;
		Array<String> args;
		cmd.Split(args, ":");
		if(args[0] == "hitmark")
		{
			let dohitmarkers = CVar.GetCVar("halodoom_fx_hitmarkers", players[e.Player]);
			if(dohitmarkers && dohitmarkers.GetBool())
			{
				class<Hitmarker> type = args[1];
				uint layer = args[2].ToInt();
				if(type) ui_hitmarkers.Queue(layer, type);
			}
		}
	}
	
	override void WorldTick()
	{
		if(!ui_hitmarkers) ui_hitmarkers = new("HitMarkers");
		ui_hitmarkers.Cleanup();
	}
	
	// Keys and Hitmarkers
	override void RenderOverlay(RenderEvent e)
	{
		// Get player
		HaloPlayer haloplr = HaloPlayer(e.Camera);
		if(!haloplr) return;
		
		vector2 hitxmid = (0,0);
		if(haloplr && haloplr.CheckCrosshairLowered()) 
			hitxmid.y = haloplr.xhair_lowpos;
		
		// Draw HUD projections
		DrawKeys(e);
		
		// Hitmarker(s)
		ui_hitmarkers.Process();
		ui_hitmarkers.Animate(deltatime, hitxmid);
		
		// Keep track of time, always.
		if(!prevMS)
		{
			prevMS = MSTime();
			return;
		}
		double ftime = MSTime()-prevMS;
		prevMS = MSTime();
		double dtime = 1000.0 / 60.;
		deltatime = (ftime/dtime);
	}
	
	ui void DrawKeys(RenderEvent e)
	{
		Actor rendersrc = e.Camera;
		// Very important to note here that, Keys should NEVER be removed
		// from this Array. RenderOverlay runs at your NATIVE framerate and thus
		// runs faster than the Play-scopes ability to write to foundkeys.
		// This means, you can potentially get access out of bounds depending 
		// on performance which is, really bad.
		for(int i = 0; i < foundkeys.Size(); i++)
		{
			Key k = foundkeys[i];
			if(k && !k.Owner)
			{
				// Project KeyNAV
				HLViewProjection viewproj = HLSBS.GetActorViewProj(e.Camera); //HLSBS.GetRenderEventViewProj(e);
				bool infront;
				vector2 apos;
				[infront, apos] = HLSBS.GetActorHUDPos (
					viewproj,
					k, cos(k.angle)*2, sin(k.angle)*2, k.height*1.5
				);
				if(infront) 
				{
					int keytint = k.fillcolor;
					double dist = rendersrc.Distance3D(k);
					vector2 distscale = (0.15,0.15);
					distscale *= dist/1200.;
					distscale.x = clamp(distscale.x, 0.10, 0.20);
					distscale.y = clamp(distscale.y, 0.10, 0.20);
					HLSBS.DrawImage("HDENAV", apos, 0, 0.6, distscale, keytint, absolute:true);
					HLSBS.DrawString3D(
						"BigFont", 
						String.Format("%dm",dist/UNIT_METER), 
						apos, 0, 
						Font.CR_GOLD, 
						scale:(1.25,1.25),
						distance: 300.
					);
				}
			}
		}
	}
}
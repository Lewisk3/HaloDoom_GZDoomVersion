class HaloStatusBar : BaseStatusBar
{
	const ANIM_FPS = 60;
	
	HaloPlayer haloplr;
	
	// Delta-time logic.
	double prevMS; 
	double deltatime;
	
	// Crosshair vars
	double curbloom;
	
	// Interpolated vars
	double curshields;
	double dimalpha;
	
	// Timers
	double lowshield_timer;
	bool shieldwarn;
	
	// Font(s)
	HUDFont mHUDFont;
	Font fnt;
	Font fntHaloAmmo;
	
	// Basic Functions
	mixin BasicHUDFeatures;

	override void Init()
	{
		Super.Init();
		SetSize(0, 320, 200);
		if(CPlayer) haloplr = HaloPlayer(CPlayer.mo);
		
		// Create the font used for the fullscreen HUD
		fnt = "BigFont";
		fntHaloAmmo = "HaloAmmoFont";
		mHUDFont = HUDFont.Create(fnt);
	}
		
	override void Draw (int state, double TicFrac)
	{
		if(!automapactive) Super.Draw(state, TicFrac);
				
		// Always draw HUD
		BeginHUD();
		DrawMainBar (TicFrac);
	}
	
	void DrawMainBar (double TicFrac)
	{
		if(CPlayer && CPlayer.mo)
		{	
			if(!haloplr) 
			{
				haloplr = HaloPlayer(CPlayer.mo);
				return;	
			}
			
			// Vitals
			DrawBars(); 
			
			// Weapons
			if(!automapactive)
			{
				DrawCompass();
				DrawCrosshairs();
				DrawWeaponsAmmo();
				DrawRadar();
			}
			
			// Keys and Objectives
			DrawKeys(CPlayer, 50, 10, 30,30);			
			DrawObjectives();
			
			// Keep track of time, always.
			if(!prevMS)
			{
				prevMS = MSTime();
				return;
			}
			double ftime = MSTime()-prevMS;
			prevMS = MSTime();
			double dtime = 1000.0 / ANIM_FPS;
			deltatime = (ftime/dtime);
		}
	}
	
	// 24 ammo per line.
	const AMMO_MAX = 16.;
	const AMMOG_SIZE = 10.;
	void DrawWeaponsAmmo()
	{
		HaloGun curweap   = HaloGun(haloplr.player.ReadyWeapon);
		if(!curweap) return;
		
		HaloGun otherweap = curweap ? HaloGun(curweap.FindNextWeapon()) : null;
		String weap1_icon = "";
		String weap2_icon = "";
		if(curweap  ) weap1_icon = curweap.UI_Icon;
		if(otherweap) weap2_icon = otherweap.UI_Icon;
		
		HLSBS.DrawImage(weap1_icon, (1700,100), 0, 0.8, (1.5,1.5));
		HLSBS.DrawImage(weap2_icon, (1770,50), 0, 0.8, (0.6,0.6));
		
		// Ammo display
		double cur_ammo  = haloplr.countinv(curweap.AmmoType2);
		double clip_ammo = GetDefaultByType(curweap.AmmoType2).MaxAmount;
		int ymax = ceil(cur_ammo/AMMO_MAX);
		vector2 ampos = (1640, 160);
		vector2 amoffs;
		for(int i = 0; i < clip_ammo; i++)
		{
			double ammo_diff = clip_ammo-cur_ammo;
			if(ammo_diff <= i) HLSBS.DrawImage("WI_AMMO", ampos+amoffs, 0, 0.8, (1,1));
			amoffs.x += AMMOG_SIZE;
			if(amoffs.x >= AMMOG_SIZE*AMMO_MAX) 
			{
				amoffs.y += AMMOG_SIZE*1.25;
				amoffs.x = 0;
			}
		}
		// Ammo Count
		HLSBS.DrawString(fntHaloAmmo, haloplr.countinv(curweap.AmmoType1).."", (1732, 60), scale:(0.18,0.15));
	}

	void DrawCrosshairs()
	{
		HaloGun weap = HaloGun(haloplr.player.ReadyWeapon);
		if(!weap) return;
		
		string crosshair = weap.wcrosshair;
		double bloom = weap.spreadmod;
		vector2 retsize = (0.65,0.65);
		vector2 midpos = (0,0);
		retsize *= 1.0+curbloom;
		HLSBS.DrawImage(crosshair, midpos, HLSBS.SS_SCREEN_CENTER, 0.65, scale:retsize);
		double ispd = 0.12;
		if(bloom > curbloom) ispd = 0.5; 
		curbloom = HaloMath.Lerp(curbloom, bloom, ispd*deltatime);
	}

	const BLINKRATE = ANIM_FPS/6.;
	void DrawBars()
	{
		if(haloplr.shields <= 0)
		{
			lowshield_timer -= 1*deltatime;	
			if(lowshield_timer < 0) 
			{
				lowshield_timer = BLINKRATE; 
				shieldwarn = !shieldwarn;
			}
		}
		else
		{
			lowshield_timer = BLINKRATE;
			shieldwarn = false;
		}
		
		if( haloplr.regen_timer >= (haloplr.shield_regentime*35.) && dimalpha > 0 &&
			haloplr.shields < haloplr.maxshields )
		{
			dimalpha = HaloMath.Lerp(dimalpha, 0, 0.025*deltatime);
			Screen.Dim("42ADF5",dimalpha,0,0,Screen.GetWidth(),Screen.getHeight());
		}
		else
			dimalpha = 0.4;

		string shbg = shieldwarn ? "sh_rbg"  : "sh_nbg";
		string shou = shieldwarn ? "sh_rout" : "sh_nout";
		if(curshields != haloplr.shields) curshields = HaloMath.Lerp(curshields, haloplr.shields, 0.2*deltatime);
		double shieldperc = curshields/haloplr.maxshields;
		vector2 shieldpos  = (958, 88); //(1550, 50);
		vector2 healthpos  = (577, 77); //(1740, 77);
		vector2 shieldmin  = (958,  0); //(958,   0);  
		vector2 shieldclip = (706,504); //(706, 504);
		shieldclip.x = HaloMath.Lerp(shieldclip.x, shieldmin.x, 1.-shieldperc);
		shieldclip.y = HaloMath.Lerp(shieldclip.y, shieldmin.y, 1.-shieldperc);
		HLSBS.DrawImage(shbg, shieldpos, 0, 0.8, scale:(1.0,1.35));
		HLSBS.SetClipRect(shieldclip.x,32,shieldclip.y,86);
		HLSBS.DrawImage("sh_bar", shieldpos, 0, 0.8, scale:(1.0,1.35));
		HLSBS.ClearClipRect();		
		HLSBS.DrawImage(shou, shieldpos, 0, 0.8, scale:(1.0,1.35));
		int healthbars = clamp(ceil((haloplr.health / 5.)), 1, 9);
		HLSBS.DrawImage("ui_hbar"..healthbars, healthpos, 0, 0.8, scale:(-1.0,1.15));
		healthpos += (508,0);
		HLSBS.DrawImage("ui_hbar"..healthbars, healthpos, 0, 0.8, scale:(1.0,1.15));
	}

	void drawRadarLine( double x0, double y0, double x1, double y1, Color col, vector2 origin = (0,0), double maxdist = 128)
	{	
		double scrw = Screen.getWidth();
		double scrh = Screen.getHeight();
		double xres = scrw/1920.;
		double yres = scrh/1080.;
			
		if(maxdist < scrw)
		{
			double fromdist = HaloMath.Distance2D((x0,y0), origin);
			double todist = HaloMath.Distance2D((x1,y1), origin);
			if( (fromdist > maxdist || todist > maxdist) ) 
			{
				if(fromdist > maxdist*1.2 && todist > maxdist*1.2) return;
				double lineangle = atan2(y1-y0, x1-x0);
				double dist = HaloMath.Distance2D((x0,y0),(x1,y1));
				double step = 1;
				for(int i = 0; i < dist; i+=step)
				{
					vector2 pixpos = (x0+cos(lineangle)*i, y0+sin(lineangle)*i);
					double fulldist = HaloMath.Distance2D(pixpos, origin);
					if(fulldist > maxdist) continue;
					HLSBS.DrawImage("HPXL", pixpos, 0, 1.0, (0.5,0.5), col);
				}
				return;
			}
		}
		Screen.DrawThickLine(x0*xres,y0*yres,x1*xres,y1*yres,2,col,alpha*255);
	}	
	
	
	vector2 SwapVector(vector2 vec)
	{
		double oldx = vec.x;
		vec.x = vec.y;
		vec.y = oldx;
		return vec;
	}
	void DrawRadar()
	{
		// -- CVars / Constants --
		double zoom = 7;
		double radarsize = 120;
		double minimap_renderdist = 800;
		Vector2 baseoffs = ( 230, 894 );
		Vector2 plrpos2D = (haloplr.pos.x, haloplr.pos.y);
		Color linecol = Color( 0xFF, 0x79, 0xC1, 0xC9);
		Color radrcol = Color( 0xFF, 0x2D, 0x3E, 0x5B);
		Vector2 dp = Actor.RotateVector( (0,0), haloplr.angle-90 );
		Vector2 map_middle = (dp.x+baseoffs.x,dp.y+baseoffs.y);
			
		// Draw radar bg
		HLSBS.DrawImage("RADARBG", baseoffs);
		
		// Draw Minimap
		if( CVar.FindCVar("halodoom_showminimap").getBool() )
		{
			for (int i = 0; i < Level.Lines.Size(); i++)
			{
				Line ln = Level.Lines[i];
				if( !(ln.flags & Line.ML_MAPPED) ) continue;
				
				Vector2 ln_pos = ln.v1.p;
				Vector2 ln_len = ln.v2.p;
				
				// Check render distance
				if( abs(ln_pos.x-plrpos2D.x) > minimap_renderdist && abs(ln_len.x-plrpos2D.x) > minimap_renderdist || 
					abs(ln_pos.y-plrpos2D.y) > minimap_renderdist && abs(ln_len.y-plrpos2D.y) > minimap_renderdist    )
					continue;
				
				ln_pos = Actor.RotateVector(SwapVector(ln_pos-plrpos2D),haloplr.angle+180);
				ln_len = Actor.RotateVector(SwapVector(ln_len-plrpos2D),haloplr.angle+180);					
				ln_pos += baseoffs*zoom;
				ln_len += baseoffs*zoom;
				ln_pos /= zoom;
				ln_len /= zoom;
			
				drawRadarLine(ln_pos.x,ln_pos.y,ln_len.x,ln_len.y,linecol, map_middle, radarsize*0.94);
			}
		}
		
		// Draw doomguy and Radar	
		double maxdist = CVar.FindCVar("strkr_radardist").getFloat();
		ThinkerIterator act_it = ThinkerIterator.Create("Actor");
		Actor obj;		
		while(obj = Actor(act_it.Next()))
		{		
			if(maxdist <= 0) break;
			if(!obj.bSHOOTABLE) continue;
			double x = haloplr.pos.x - obj.pos.x;
			double y = haloplr.pos.y - obj.pos.y;
			
			int dis = obj.Distance2D(haloplr);
			if( dis < (maxdist*10.) )
			{
				double frontangle = haloplr.angle+180;
				vector2 delta = Actor.RotateVector(SwapVector((x,y)), frontangle);
				delta.x /= zoom;
				delta.y /= zoom;
				if( !(obj is haloplr.GetClass()) && obj.target )
				{
					String basegraphic = "ALLYDOT";
					if(obj.target != NULL && !obj.bFRIENDLY && obj.bSOLID && obj.bSHOOTABLE)
						basegraphic = "ENEMYDOT";
					else if(obj.bFRIENDLY)
						basegraphic = "ALLYDOT";
					
					vector2 finalpos = ((map_middle.x-delta.x), (map_middle.y-delta.y));
					double drawdist; 
					[finalpos, drawdist] = HaloMath.ClampVector(finalpos, map_middle, radarsize*0.98);
					
					vector2 dScale = (1.0, 1.0);
					dScale *= clamp(1.0-(drawdist/512.), 0.5, 1.0);
					
					HLSBS.DrawImage(basegraphic, finalpos, 0, (drawdist>radarsize ? 0.6 : 1.0), dScale);
				}
			}
		}
		
		// Draw Radar middle, "player"
		HLSBS.DrawImage("RADARMID", baseoffs);	
	}

	// Planned to implement, currently unimplemented.
	void DrawObjectives() {}
	void DrawCompass() {}

	void DrawFullScreenStuff (double TicFrac) {}
}

// Standard HUD Functions.
mixin class BasicHUDFeatures 
{
	void DrawImageToBox(TextureID tex, int x, int y, int w, int h, double trans = 0.75, bool animate = false)
	{
		double scale1, scale2;

		if (tex)
		{
			let texsize = TexMan.GetScaledSize(tex);

			scale1 = w / texsize.X;
			scale2 = h / texsize.Y;
			scale1 = min(scale1, scale2);
			if (scale2 < scale1) scale1=scale2;

			x += w >> 1;
			y += h;

			w = (int)(texsize.X * scale1);
			h = (int)(texsize.Y * scale1);

			screen.DrawTexture(tex, animate, x, y,
				DTA_KeepRatio, true,
				DTA_VirtualWidth, 1920, DTA_VirtualHeight, 1080, DTA_Alpha, trans, 
				DTA_DestWidth, w, DTA_DestHeight, h, DTA_CenterBottomOffset, 1);
		}
	}
	// Key Stuff
	virtual bool DrawOneKey(int xo, int x, int y, int w, int h, Key inv, in out int c)
	{
		TextureID icon, nosprite;
		nosprite = TexMan.CheckForTexture("TNT1A0", TexMan.Type_Sprite);
		
		if (!inv) return false;
		
		TextureID AltIcon = inv.AltHUDIcon;
		if (!AltIcon.Exists()) return false;	// Setting a non-existent AltIcon hides this key.

		if (AltIcon.isValid()) 
		{
			icon = AltIcon;
		}
		else if (inv.SpawnState && inv.SpawnState.sprite!=0)
		{
			let state = inv.SpawnState;
			if (state != null) icon = state.GetSpriteTexture(0);
			else icon.SetNull();
		}
		// missing sprites map to TNT1A0. So if that gets encountered, use the default icon instead.
		if (icon.isNull() || icon == nosprite) icon = inv.Icon; 

		if (icon.isValid())
		{
			DrawImageToBox(icon, x, y, w, h);
			return true;
		}
		return false;
	}
	virtual int DrawKeys(PlayerInfo CPlayer, int x, int y, int w, int h)
	{
		int yo = y;
		int xo = x;
		int i;
		int c = 0;
		Key inv;

		if (!deathmatch)
		{
			int count = Key.GetKeyTypeCount();
			
			// Go through the key in reverse order of definition, because we start at the right.
			for(int i = count-1; i >= 0; i--)
			{
				if ((inv = Key(CPlayer.mo.FindInventory(Key.GetKeyType(i)))))
				{
					if (DrawOneKey(xo, x - (w+1), y, w, h, inv, c))
					{
						x += (w+1);
						if (++c >= 6)
						{
							x = xo;
							y += (h+1);
							c = 0;
						}
					}
				}
			}
		}
		if (x == xo && y != yo) y += 11;	// undo the last wrap if the current line is empty.
		return y - 11;
	}
}

/* Old Shield code, when it used to use halves.
vector2 shieldpos = (957,50); //(1550, 50);
vector2 healthpos = (577, 77); //(1740, 77);
uint leftflags = BaseStatusBar.SHADER_REVERSE;
HLSBS.DrawBar("sh_barL",shbg.."L",curshields,haloplr.maxshields,shieldpos-(253,0), 0,leftflags, 0.8,1.0, (1.0,1.35));
HLSBS.DrawBar("sh_barR",shbg.."R",curshields,haloplr.maxshields,shieldpos, 0,0, 0.8,1.0, (1.0,1.35));

shieldpos += (126, 42);
HLSBS.DrawImage(shou.."R",shieldpos,scale:(1.0,1.3));
HLSBS.DrawImage(shou.."L",shieldpos-(251,0),scale:(1.0,1.3));
*/
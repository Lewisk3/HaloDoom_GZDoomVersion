
class HaloPlayer : DoomPlayer
{
	// Shields
	const REGENTIME = 35*5.;
	double shields;
	double maxshields;
	double regen_timer;
	
	Property Shields : maxshields;
	
	Default
	{
		Health 45;
		Player.StartItem "Halo_Magnum", 1;
		Player.StartItem "Clip", 50;
		HaloPlayer.Shields 70;
		Player.MaxHealth 45;
	}
	
	override void BeginPlay()
	{
		regen_timer = REGENTIME;
		shields = maxshields;
		super.BeginPlay();
	}
	
	override void Tick()
	{
		// Shield Regen
		if(regen_timer < REGENTIME)
		{
			if(shields <= 0) 
				A_StartSound("Shield/Warning", flags:CHANF_LOOPING|CHANF_NOSTOP);
			else if(shields <= maxshields*0.25) 
				A_StartSound("Shield/Low", flags:CHANF_LOOPING|CHANF_NOSTOP);
		}
		if(regen_timer < REGENTIME) 
		{	
			regen_timer += 1;
			// Useful for overshields to not regenerate.
			if(shields >= maxshields) regen_timer = REGENTIME;
		}
		regen_timer = clamp(regen_timer, -REGENTIME, REGENTIME);
		if(regen_timer >= REGENTIME && shields < maxshields) 
		{
			shields += 1;
			A_StartSound("Shield/Regenerate",flags:CHANF_LOOPING|CHANF_NOSTOP);
		}
		else if(shields >= maxshields)
		{
			A_StopSound(CHAN_BODY);
		}
		super.Tick();
	}
	
	override int DamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(shields > 0)
		{
			regen_timer = 0;
			shields -= damage;
			A_StartSound("Shield/TakeDamage",flags:CHANF_NOSTOP);
			if(shields <= 0) 
			{	
				double truedmg = abs(shields);
				shields = 0;
				return super.DamageMobJ(inflictor, source, truedmg, mod, flags, angle);
			}
			return 0;
		}
		return super.DamageMobJ(inflictor, source, damage, mod, flags, angle);
	}
}
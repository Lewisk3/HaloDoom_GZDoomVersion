
class HaloPlayer : DoomPlayer
{
	// Misc
	WeaponPickupProxy pickuptarget;
	
	// Shields
	double shield_regentime;
	double shield_regenrate;
	double shields;
	double maxshields;
	double regen_timer;
	
	Property Shields : maxshields, shield_regentime, shield_regenrate;
	
	Default
	{
		Gravity 1.5;
		Speed 0.67;
		Player.JumpZ 16;
		Health 45;
		Player.StartItem "Halo_Magnum", 1;
		Player.StartItem "Clip", 50;
		HaloPlayer.Shields 70, 5, 4; // 5 seconds to recharge, 4 seconds to max.
		Player.MaxHealth 45;
	}
	
	override void BeginPlay()
	{
		regen_timer = shield_regentime*35.;
		shields = maxshields;
		super.BeginPlay();
	}
	
	override void Tick()
	{
		if(health <= 0) 
		{
			A_StopSound(CHAN_7);
			super.Tick();
			return;
		}
		
		// Aircontrol and friction.
		uint btns = player.cmd.buttons;
		uint move_bitmask = BT_FORWARD | BT_BACK | BT_MOVELEFT | BT_MOVERIGHT;
		level.aircontrol = 0.6;
		if(!player.onground) vel.xy *= 0.94;
		bool moving = btns & move_bitmask;
		// Fast momentum dappening when not in motion.
		if(!moving && player.onground)
		{
			vel.xy *= 0.9;
			if(vel.Length() > 3)
			{
				player.bob *= 0.9;
				player.mo.viewbob *= 0.72;
			}
		}
		else if(player.onground)
			viewbob = default.viewbob;
	
		// Shield Regen
		double shregentime = shield_regentime*35.;
		
		uint sndflags = CHANF_LOOPING|CHANF_MAYBE_LOCAL;
		if(regen_timer < shregentime)
		{
			if(shields <= 0) 
				A_StartSound("Shield/Warning", CHAN_7, flags:sndflags);
			else if(shields <= maxshields*0.25) 
				A_StartSound("Shield/Low", CHAN_7, flags:sndflags);
		}
		if(regen_timer < shregentime) 
		{	
			regen_timer += 1;
			// Useful for overshields to not regenerate.
			if(shields >= maxshields) regen_timer = shregentime;
		}
		regen_timer = clamp(regen_timer, -shregentime, shregentime);
		if(regen_timer >= shregentime && shields < maxshields) 
		{
			shields += maxshields/(shield_regenrate*35.);
			A_StopSound(CHAN_7);
			A_StartSound("Shield/Regenerate", CHAN_5, flags:sndflags);
		}
		if(shields >= maxshields)
		{
			A_StopSound(CHAN_5);
		}
		
		super.Tick();
	}
	
	override int DamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		if(shields > 0)
		{
			regen_timer = 0;
			shields -= damage;
			A_StopSound(CHAN_5);
			A_StartSound("Shield/TakeDamage",flags:CHANF_NOSTOP);
			if(shields <= 0) 
			{	
				A_StartSound("Shield/Explode",flags:CHANF_NOSTOP);
				double truedmg = abs(shields);
				shields = 0;
				return super.DamageMobJ(inflictor, source, truedmg, mod, flags, angle);
			}
			return 0;
		}
		return super.DamageMobJ(inflictor, source, damage, mod, flags, angle);
	}
}
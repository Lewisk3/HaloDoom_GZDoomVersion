
class HaloPlayer : DoomPlayer
{
	// Misc
	GrapplingHook grapple;
	WeaponPickupProxy pickuptarget;
	Weapon NextWeapon;
	vector3 aimpos;
	double soundwait;
	double aimdist;
	bool shields_recharging;
	
	// Shields
	double shield_regentime;
	double shield_regenrate;
	double shields;
	double maxshields;
	double regen_timer;
	double movebob;
	
	// Weapon values
	double weap_yoffs;
	double xhair_lowpos;
		
	// CVar(s)
	transient CVar lowered_xhair;
	
	Property Shields : maxshields, shield_regentime, shield_regenrate;
	Property MovementBob : movebob;
	Property LowerCrosshairY : xhair_lowpos;
	
	Default
	{
		Player.ViewHeight 41;
		Speed 1;
		Health 45; // 45
		Player.StartItem "Halo_AssaultRifle", 1;
		Player.StartItem "Halo_Magnum", 1;
		//Player.StartItem "Halo_Shotgun", 1;
		Player.StartItem "Halo_Clip", 120;
		Player.StartItem "Shell", 12;
		HaloPlayer.Shields 70, 5, 4; // 5 seconds to recharge, 4 seconds to max.
		HaloPlayer.MovementBob 0;
		HaloPlayer.LowerCrosshairY 60;
		Player.MaxHealth 45;
		Player.JumpZ 9;
		Gravity 0.75;
	}
	
	override void BeginPlay()
	{
		regen_timer = shield_regentime*35.;
		shields = maxshields;
		super.BeginPlay();
	}
	
	override void Tick()
	{
	
		// Don't do stuff when dead.
		if(health <= 0 || !player) 
		{
			A_StopSound(CHAN_7);
			super.Tick();
			return;
		}
		
		// Get CVar(s)
		if(!lowered_xhair)
			lowered_xhair = CVar.GetCVar("halodoom_loweredcrosshair", player);
		
		// Processes lowered crosshair differences.
		double defvz = default.viewheight;
		if(lowered_xhair.GetBool())
		{
			SetViewHeight(defvz * 1.2);
			weap_yoffs = 20;
		}
		else
		{
			SetViewHeight(defvz);
			weap_yoffs = 0;
		}
			
		// Used for timing certain sound fx.
		if(soundwait) soundwait--;
	
		// Shield Regen
		double shregentime = shield_regentime*35.;
		
		uint sndflags = CHANF_LOOPING|CHANF_MAYBE_LOCAL;
		if(regen_timer < shregentime)
		{
			if(shields <= 0) 
				A_StartSound("Shield/Warning", CHAN_7, flags:sndflags);
			else if(shields <= maxshields*0.25) 
				A_StartSound("Shield/Low", CHAN_7, flags:sndflags);
		}
		if(regen_timer < shregentime) 
		{	
			regen_timer += 1;
			// Useful for overshields to not regenerate.
			if(shields > maxshields) regen_timer = shregentime;
		}
		regen_timer = clamp(regen_timer, -shregentime, shregentime);
		if(regen_timer >= shregentime && shields < maxshields) 
		{
			double recharge_perc = (shields / maxshields);
			if(!shields_recharging)
			{
				A_StartSound("Shield/Regenerate", CHAN_5, flags:CHANF_MAYBE_LOCAL, startTime:recharge_perc*3.0);
				shields_recharging = true;
			}
			A_SoundVolume(CHAN_5, (1.0 - recharge_perc) + 0.1);
			shields += maxshields/(shield_regenrate*35.);
			shields = clamp(shields, 0, maxshields);
			A_StopSound(CHAN_7);
		}
		if(shields >= maxshields)
		{
			shields_recharging = false;
			A_StopSound(CHAN_5);
		}
		
		// Aim Assist
		if(halodoom_doaimassist) DoAimAssist();
		
		// Deal with lowered crosshair awkwardness...
		let weap = HaloGun(player.ReadyWeapon);
		bool lowc = lowered_xhair.GetBool();
		double aimheight = lowc ? 5 : 0;
		if(weap && weap.zoomed && lowc) aimheight = 4.0 * weap.FOVScale;
		
		// Get Distance under crosshair.
		FLineTraceData lt;
		LineTrace(angle, 1024*1024, pitch+aimheight, 0, viewheight, 0, data:lt);
		
		aimdist = lt.Distance / UNIT_METER; 
		aimpos = lt.HitLocation;
		
		// Update next weapon.
		let wnext = PickNextWeapon();
		if( player.ReadyWeapon != wnext ) NextWeapon = wnext;
		
		super.Tick();
	}
	
	override int DamageMobJ(Actor inflictor, Actor source, int damage, Name mod, int flags, double angle)
	{
		// Get real damage amount, taking into account modified damage.
		double dmg = GetModifiedDamage(mod, damage, true);
		double truedamage = dmg / GAMEPLAY_DAMAGEMOD;
		
		if(shields > 0)
		{
			regen_timer = 0;
			shields -= truedamage;
			A_StopSound(CHAN_5);
			A_StartSound("Shield/TakeDamage",flags:CHANF_NOSTOP);
			if(shields <= 0) 
			{	
				A_StartSound("Shield/Explode",flags:CHANF_NOSTOP);
				double truedmg = abs(shields);
				shields = 0;
				return super.DamageMobJ(inflictor, source, ceil(truedmg), mod, flags | DMG_FORCED, angle);
			}
			return 0;
		}
		return super.DamageMobJ(inflictor, source, ceil(truedamage), mod, flags | DMG_FORCED, angle);
	}
	
	clearscope bool CheckCrosshairLowered()
	{
		// Safe way of checking lowered_xhair CVar.
		return lowered_xhair && lowered_xhair.GetBool();
	}
	
	void DoAimAssist(double strength = 0.10)
	{
		// Check for aim assist cheat.
		let evs = HaloDoom_Events(EventHandler.Find("HaloDoom_Events"));
		
		// Do not apply if not using a controller.
		if(using_controller || (evs && evs.alwaysautoaim))
		{
			// Get target under aim.
			let act = AimTarget();
			if(!act) return;
			
			// Gather pitch and angular difference and interpolate
			// aim to target.
			vector3 aimpos = (act.pos.x, act.pos.y, act.pos.z + act.height/2.);
			vector3 frompos = (pos.x, pos.y, player.viewz - (weap_yoffs * 1.2));
			vector3 diffs = level.SphericalCoords(frompos, aimpos, (angle, pitch));
			angle -= diffs.x * strength;
			pitch -= diffs.y * (strength * 0.25);
		}
	}
	
	void SetViewHeight(double val)
	{
		viewheight = player.viewheight = val;
	}
	
	override void CalcHeight()
	{
		super.CalcHeight();
		player.viewz = pos.Z + player.viewheight + (player.bob * clamp(movebob, 0. , 1.5)); 
		if (Floorclip && player.playerstate != PST_DEAD && pos.Z <= floorz) player.viewz -= Floorclip;
		if (player.viewz > ceilingz - 4) player.viewz = ceilingz - 4;
		if (player.viewz < floorz + 4) player.viewz = floorz + 4;
	}
}
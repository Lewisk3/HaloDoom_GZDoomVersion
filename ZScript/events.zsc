// For generalized HaloDoom Events.

class HaloDoom_Events : EventHandler
{
	bool nevertarget;
	bool alwaysautoaim;
	override void WorldTick()
	{
		let act_it = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(act_it.Next()))
		{
			if(act.bISMONSTER && nevertarget && act.target is "HaloPlayer")
			{
				act.target = NULL;
			}
		}
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo src = players[e.Player];
		if(!src || !src.mo) return;
	
		if(e.Name == "HaloDoom_FireGrapple")
		{
			let hplr = HaloPlayer(src.mo);
			if(!hplr) return;
			let gpl = hplr.grapple;
			
			if(gpl)
			{
				gpl.Retract();
				return;
			}
				
			hplr.grapple = GrapplingHook.Deploy(hplr, 20, (0,-2,-3));
		}
	
		if(multiplayer) return;
		if(e.Name == "HaloDoom_GiveAll")
		{	
			Array<class<HaloGun> > guns;
			for(int i = 0; i < AllActorClasses.Size(); i++)
			{
				let classtype = AllActorClasses[i];
				if(classtype is "HaloGun" && classtype != "HaloGun") 
					guns.Push(AllActorClasses[i]);
			}
			int spacing = 360./guns.Size();
			for(int i = 0; i < guns.Size(); i++)
			{
				let gun = guns[i];
				vector2 spawnpos = Actor.AngleToVector(i*spacing, 64);
				Actor.Spawn(gun, src.mo.Vec3Offset(spawnpos.x,spawnpos.y, src.mo.floorz));
			}
		}
		
		if(e.Name == "HaloDoom_ArbiterCamo")
		{	
			nevertarget = !nevertarget;
			if(nevertarget) 
				console.printf("Camo is active, enemies will not target you.");
			else
				console.printf("Camo disabled.");
		}
		
		if(e.Name == "HaloDoom_AimHax")
		{	
			alwaysautoaim = !alwaysautoaim;
			if(alwaysautoaim) 
				console.printf("Autoaim switched to always active.");
			else
				console.printf("Autoaim now controller only.");
		}
	}
}

// TODO: This will be used for the title screen primarily.
// We can detect when the game has just started here
// good for doing first-time things like a logo fade.
class HaloDoom_EngineEvents : StaticEventHandler 
{
	override void OnRegister()
	{
		
	}
}
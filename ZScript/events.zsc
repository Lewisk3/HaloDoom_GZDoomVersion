// For generalized HaloDoom Events.

class HaloDoom_Events : EventHandler
{
	bool nevertarget;
	bool alwaysautoaim;
	HaloDoom_EngineEvents engHandle;
	
	override void OnRegister()
	{
		engHandle = HaloDoom_EngineEvents(StaticEventHandler.Find("HaloDoom_EngineEvents"));
	}
	
	override void WorldTick()
	{
		let act_it = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(act_it.Next()))
		{
			if(act.bISMONSTER && nevertarget && act.target is "HaloPlayer")
			{
				act.target = NULL;
			}
		}
	}

	override void UITick()
	{
		let curmenu = Menu.GetCurrentMenu();
		bool curintro = (curmenu is "HaloDoom_IntroSeq");
		bool titlescreen = (gamestate == GS_TITLELEVEL);
		
		if(engHandle.edata.first_boot && !curintro && titlescreen)
		{
			Menu.SetMenu("Intro");
			engHandle.edata.first_boot = false;
		}
		else if(!titlescreen)
			engHandle.edata.first_boot = false;
	}

	override void NetworkProcess(ConsoleEvent e)
	{
		PlayerInfo src = players[e.Player];
		if(!src || !src.mo) return;
	
		if(e.Name == "testrailgun")
		{
			RailgunProjectile.FireRailgun(src.mo, (20, 5, -5));
		}
	
		if(e.Name == "HaloDoom_FireGrapple")
		{
			let hplr = HaloPlayer(src.mo);
			if(!hplr) return;
			let gpl = hplr.grapple;
			
			if(gpl)
			{
				gpl.Retract();
				return;
			}
				
			hplr.grapple = GrapplingHook.Deploy(hplr, 20, (0,-2,-3));
		}
		
		if(e.Name == "firetank")
		{
			TankRocket.Fire(src.mo, (30,0,src.mo.viewheight));
		}
		
		Array<String> args;
		String cmd = e.Name;
		cmd.Split(args, ":");
		if(args[0] == "crosshairsummon")
		{
			class<Actor> obj = args[1];
			let plr = HaloPlayer(src.mo);
			if(plr && obj) Actor.Spawn(obj, plr.aimpos);
		}
		
		// if(multiplayer) return;
		if(e.Name == "HaloDoom_GiveAll")
		{	
			Array<class<HaloGun> > guns;
			for(int i = 0; i < AllActorClasses.Size(); i++)
			{
				let classtype = AllActorClasses[i];
				if(classtype is "HaloGun" && classtype != "HaloGun") 
					guns.Push(AllActorClasses[i]);
			}
			int spacing = 360./guns.Size();
			for(int i = 0; i < guns.Size(); i++)
			{
				let gun = guns[i];
				vector2 spawnpos = Actor.AngleToVector(i*spacing, 64);
				Actor.Spawn(gun, src.mo.Vec3Offset(spawnpos.x,spawnpos.y, src.mo.floorz));
			}
		}
		
		if(e.Name == "HaloDoom_ArbiterCamo")
		{	
			nevertarget = !nevertarget;
			if(nevertarget) 
				console.printf("Camo is active, enemies will not target you.");
			else
				console.printf("Camo disabled.");
		}
		
		if(e.Name == "HaloDoom_AimHax")
		{	
			alwaysautoaim = !alwaysautoaim;
			if(alwaysautoaim) 
				console.printf("Autoaim switched to always active.");
			else
				console.printf("Autoaim now controller only.");
		}
		
		if(e.Name == "HaloDoom_MaxShield")
		{
			let hplr = HaloPlayer(src.mo);
			if(!hplr) return;
			hplr.shields = hplr.maxshields * 3.0;
		}
	}
}



// As of GZDoom 4.5, Structs ignore scoping.
// This needs to be done here because I cannot get NetworkEvents to properly
// call from the title.
// When the game first loads up, this will detect that and 
// set the menu to play the intro effects. 
struct engine_vars 
{
	bool first_boot;
}

class HaloDoom_EngineEvents : StaticEventHandler 
{		
	engine_vars edata;

	override void OnRegister()
	{
		edata.first_boot = true;
	}
}
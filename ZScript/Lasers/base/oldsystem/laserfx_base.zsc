
// Smoke
class LaserSmoke : Actor
{
	Default
	{
		+NOGRAVITY
		+FLOORCLIP
		+NOINTERACTION
		+FORCEXYBILLBOARD
		+CLIENTSIDEONLY
		Speed 1;
		RenderStyle "Add";
		Alpha		0.28;
		Scale		0.45;
	}
	States
	{
		Spawn:
			TNT1 AAA 1;
			SMKE AABBCCDDEEFFGGHHIIJJK 1 A_FadeOut(0.001);
		Spawn.Wait: 
			SMKE K 1 A_FadeOut(0.02);
		wait;
	}
}

// Geometry Decals
class LaserDecal : Actor
{
	bool aligned;
	bool HitActors;
	Actor onactor;
	
	Property DecalOnActors : HitActors;
	Default
	{
		+NOINTERACTION;
		+FLATSPRITE
		Alpha 0.5;
		Height 10;
	}
	
	bool SetToSlope()
	{
		if(aligned) return true;
		FLineTraceData lt;
		if(pos.z != floorz)
		{
			LineTrace(angle, height*4, pitch, data:lt);
			aligned = true;
			if(lt.HitLine)
			{
				let ln = lt.HitLine;
				angle = atan2(ln.delta.y, ln.delta.x)+90;
				pitch = 90;
				return true;
			}
			if(lt.HitActor && HitActors) 
			{
				pitch = 90;
				onactor = lt.HitActor;
				return true;
			}
			else if((lt.HitActor && !HitActors) || !lt.HitType)
				return false;
		
			if(lt.HitType == FLineTraceData.TRACE_HitCeiling) 
				SetOrigin((pos.x,pos.y,ceilingz),false);
		}

		// Credits: Marisa Kirisame
        vector3 fnormal = CurSector.floorplane.Normal;
        // find closest 3d floor for its normal
        F3DFloor ff;
        for ( int i=0; i<CurSector.Get3DFloorCount(); i++ )
        {
            if ( !(CurSector.Get3DFloor(i).top.ZAtPoint(pos.xy) ~== floorz) ) continue;
            ff = CurSector.Get3DFloor(i);
            break;
        }
        if ( ff ) fnormal = -ff.top.Normal;
        vector2 fnormalp1 = ((fnormal.x != 0) || (fnormal.y != 0))?(fnormal.x,fnormal.y).Unit():(0,0);
        vector2 fnormalp2 = ((fnormal.x,fnormal.y).Length(),fnormal.z);
        double fang = atan2(fnormalp1.y,fnormalp1.x); // floor angle (not pitch!)
        double fpitch = atan2(fnormalp2.x,fnormalp2.y); // floor pitch
        double ddiff1 = sin(fang-angle);
        double ddiff2 = cos(fang-angle);
		pitch = fpitch*ddiff2;
        roll = -fpitch*ddiff1;
		return true;
    }
    
	override void BeginPlay()
	{
		A_SetScale(frandom(0.3,1.5));
		bSPRITEFLIP = random(0,1);
	}
	
	override void Tick()
	{
		if(!SetToSlope()) Destroy();
		if(target) translation = target.translation;
		if (tics > 0) 
		{
			tics--;
			while (!tics) {
				if(!SetState (CurState.NextState)) // mobj was removed
					return;
			}
		}
	}
}

// Puff and Damager
class LaserPuff : Actor
{	
	override void Tick()
	{
		if(target) translation = target.translation;
		super.Tick();
	}
	
	Actor DamageHitActor(int dmg, Name dmgtype = "Fire", uint flags = 0)
	{
		FLineTraceData lt;
		LineTrace(angle, 8, pitch, data:lt);
		if(lt.HitActor)
		{
			let emit = LaserEmitter(Laser(target).emitter);
			if(!emit) return lt.HitActor;
			
			lt.HitActor.BloodSplatter(pos, angle);
			lt.HitActor.DamageMobJ(self,emit.source,dmg, dmgtype, 0, angle);
		}
		return lt.HitActor;
	}
	
	LaserDecal DoDecal(class<LaserDecal> type)
	{
		let dec = LaserDecal(Spawn(type, pos));
		if(dec) 
		{
			dec.target = target;
			dec.angle = angle;
			dec.pitch = pitch;
		}
		return dec;
	}
	
	void DoSmoke(int amt = 5, class<LaserSmoke> type = "LaserSmoke")
	{
		for(int i = 0; i < amt; i++)
			LaserGlobals.SpawnFX(self, type, random(-10,10), random(-10,10), random(-10,10), -16);
	}
	
	void DoParticles(Color col = 0xFFF0E11A, double amt = 30, double size = 2, double spd = 5, vector3 pos_spread = (30,30,30), vector2 ang_spread = (90,30))
	{
		for(int i = 0; i < 30; i++)
		{
			double part_angle = (angle+180)+frandom(-ang_spread.x,ang_spread.x);
			double part_pitch = pitch+frandom(-ang_spread.y,ang_spread.y);

			vector3 partpos = (
				cos(part_angle)*frandom(-pos_spread.x,pos_spread.x),
				sin(part_angle)*frandom(-pos_spread.y,pos_spread.y),
				sin(part_pitch)*frandom(-pos_spread.z,pos_spread.z)
			);
			
			vector3 partvel = (
				sin(part_angle)  * cos(part_pitch+90),
				sin(part_angle)  * cos(part_pitch+90),
				sin(part_pitch)) * spd;
		
			A_SpawnParticle(
				col,SPF_FULLBRIGHT | SPF_RELATIVE,16,size,
				part_angle,
				partpos.x,partpos.y,partpos.z,
				partvel.x,partvel.y,partvel.z
			);
		}
	}
}
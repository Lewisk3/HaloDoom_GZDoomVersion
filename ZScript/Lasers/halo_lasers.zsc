
// Used as a simple line render.
class LSR_GrappleTail : Laser
{
	Default
	{
		Radius 2;
		Scale 0.8;
		RenderStyle "Normal";
		Translation "0:255=@80[0,0,0]";
	}
	
	override void AdjustLaser()
	{
		// Skip interpolation visisiblity
		bInvisible = (GetAge() <= 4);
	}
	
	States
	{
		Spawn:
			BEAM A 1;
		loop;
	}	
}

// Railgun Beam
class RailgunProjectile : FastProjectile
{
	Actor source;
	double biridist;
	double traveldist;
	vector3 startpos;
	vector3 posoffs;
	vector3 dir;
	
	Default
	{
		Radius 10;
		Height 10;
		Speed 800;
		Projectile;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == source) return false;
		return super.CanCollideWith(other, passive);
	}
	
	static RailgunProjectile FireRailgun(Actor source, vector3 offs)
	{
		vector3 spawnpos = HaloMath.RelativeV3Offset(source, 0,0,0, offs.x, offs.y, offs.z, 1.);
		let proj = RailgunProjectile(Actor.Spawn("RailgunProjectile", spawnpos));
		if(proj)
		{
			proj.angle = source.angle;
			proj.pitch = source.pitch;
			proj.startpos = spawnpos;
			proj.posoffs = offs;
			proj.source = source;
			
			double cosp = cos(source.pitch);
			proj.vel = (
				cos(source.angle) * cosp,
				sin(source.angle) * cosp,
				-sin(source.pitch)
			) * proj.default.Speed;
			proj.dir = proj.vel.Unit();
			
			FLineTraceData lt;
			proj.LineTrace(proj.angle, int.max, proj.pitch, offsetforward:source.radius+16, data:lt);
			vector3 hitpos = lt.HitLocation;
			
			// Outer-most trail
			let smok = SmokeTrail.Start(0xFFFF0000, spawnpos, hitpos, (proj.angle, proj.pitch), 0.5, "RailgunTrail");
			if(smok)
			{
				smok.A_SetScale(10.0);
			}
			
			// Outer trail
			smok = SmokeTrail.Start(0xFFfc9d03, spawnpos, hitpos, (proj.angle, proj.pitch), 1.0, "RailgunTrail");
			if(smok)
			{
				smok.A_SetScale(5.0);
			}
			
			// Inner trail
			smok = SmokeTrail.Start(0xFFFFFFFF, spawnpos, hitpos, (proj.angle, proj.pitch), 4.0);
		}
		return proj;
	}
	
	void Biri(double amt = 5)
	{
		double ang = angle+180;
		biridist = frandom(0, 1.0);
		for(int i = 0; i < amt; i++)
		{
			vector3 biripos = level.vec3offset(startpos, dir * (traveldist * biridist));
			BiriBiri.DoLightning(biripos, (ang + frandom(-30,30), 0), dist:50, 1.0, 5.0, 10, 120);
			biridist += frandom(-0.05, 0.05);
			biripos.z -= 10;
			Spawn("LightningLight", biripos);
			if(i == 0) Spawn("LightSmoke", biripos);
		}
	}
	
	override void Tick()
	{
		super.Tick();
		traveldist = HaloMath.Distance3D(startpos, pos);
		
		Biri(10);
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
		
		Crash:
		XDeath:
		Death:
			TNT1 A 0 
			{
				Spawn("Railgun_Explosion", pos);
			}
		Death.FadeOut:
			TNT1 A 1 
			{
				A_FadeOut(0.04);
				for(int i = 0; i < 2; i++)
					BiriBiri.DoLightning(pos, (angle+frandom(-45, 45)+180, frandom(-90,90)), dist:100, 1.0, 6.0, 10, 60);
			}
		wait;
	}
}

class LSR_Railgun : Laser
{
	Default
	{
		Radius 2;
		Scale 1.25;
		RenderStyle "Add";
		Alpha 0.75;
		Laser.Interpolation 1.0;
		Translation "0:255=@80[255,255,255]"; // 255 200 5
	}
	
	States
	{
		Spawn:
			BEAM A 1 Bright;
		loop;
	}	
}

class RailgunTrail : SmokeTrail
{
	Default
	{
		RenderStyle "AddShaded";
	}
	
	States
	{
		Spawn:
			BEAM A 10 Bright;
		Spawn.Loop:
			BEAM A 1 Bright A_FadeOut(0.02);
		loop;
	}
}

class Railgun_Explosion : FastActor
{
	Default
	{
		Scale 3.0;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				A_StartSound("Halo/Scorpion/MissileExplosion", flags:CHANF_OVERLAP, attenuation: 0.1);
				Spawn("TankRocket_Sparks", pos);
			}
			SX04 A 1 Bright
			{	
				let flare = Spawn("TankRocket_Flare", pos);
				if(flare) 
				{
					flare.A_SetRenderStyle(1.0, STYLE_AddShaded);
					flare.SetShade(0xFF313de8);
				}
				
				// Flying explosions
				for(int i = 0; i < random(10,20); i++)
				{
					double spawnang = frandom(0,180);
					double spawndist = frandom(-30, 30);
					vector3 spawndir = (
						cos(angle + spawnang),
						sin(angle + spawnang),
						0
					) * spawndist;
					
					spawndir.z = frandom(-30,30);
					let expl = Spawn("TankRocket_FlyingExplosion", level.vec3offset(pos, spawndir));
					if(expl)
					{
						expl.A_SetScale(0.25);
						double velang = frandom(-180,180);
						vector3 veldir = (
							cos(velang),
							sin(velang),
							sin(frandom(-45,45)) * 2
						);
						expl.vel = veldir * 15;
					}
				}
			}
			SX04 BCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}
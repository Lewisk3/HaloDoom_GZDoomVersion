
class GrapplingHook : Actor
{
	LaserEmitter tail;
	FLineTraceData hitdata;
	vector3 hitpos;
	vector3 pos_offs;
	Actor source;
	double spring_vel;
	double retract_spd;
	bool retracting;
	
	double maxspd, accel, mindist, maxdist;
	
	Property MaxSpeed_Accel_CloseDist : maxspd, accel, mindist, maxdist;
	
	Default
	{
		Radius 3;
		Height 2;
		Projectile;
		Scale 0.5;
		GrapplingHook.MaxSpeed_Accel_CloseDist 50, 80, 64, 800;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other is "PlayerPawn") return false;
		return true;
	}
	
	vector3 GetOrigin()
	{
		vector3 offpos = HaloMath.V3Offset(source.angle, source.pitch, pos_offs.x, pos_offs.y, pos_offs.z, 1.);
		return level.vec3offset(source.pos, offpos);
	}
	
	static GrapplingHook Deploy(Actor source, double speed, vector3 offsets = (0,0,0), class<GrapplingHook> type = "GrapplingHook")
	{
		vector3 offpos = HaloMath.V3Offset(source.angle, source.pitch, offsets.x, offsets.y, offsets.z, 1.);
		vector3 truepos = level.vec3offset(source.pos, offpos);
		
		let gpl = GrapplingHook(Actor.Spawn(type, truepos));
		if(gpl)
		{
			vector3 grapple_vel = HaloMath.VecFromAngles(source.angle, source.pitch, speed);
			gpl.pos_offs = offsets;
			gpl.angle = source.angle;
			gpl.pitch = source.pitch;
			gpl.vel = grapple_vel;
			gpl.retract_spd = speed;
			gpl.source = source;
		}
		return gpl;
	}
	
	void Retract()
	{
		if(!retracting) 
		{
			if(tail) tail.LaserOff();
			SetState(FindState("Retract"));
		}
	}
	
	override void Tick()
	{
		super.Tick();
						
		// Step in direction, spawn tail.
		vector3 origin = GetOrigin();
		double dist = (origin-pos).Length();
		
		if(dist > maxdist) Retract();
		
		
		if(!tail && !retracting) tail = LaserEmitter.Attach(source);
		if(tail)
		{
			vector3 head_diff = level.SphericalCoords(origin, pos, (source.angle, source.pitch));
			vector2 angles = (-head_diff.x, -head_diff.y);
			vector3 finaloffs = pos_offs;
			finaloffs.z *= 1.25;
			
			tail.SetPos(source.pos, finaloffs, angles);
			tail.Fire("LSR_GrappleTail", maxdist: dist * 0.25);
		}
		
		/*
		double density = 10.;
		double tailcnt = (dist / density);
		for(int i = 0; i < tailcnt; i++)
		{
			vector3 head_diff = level.SphericalCoords(origin, pos, (angle, pitch));
			vector3 spawnpos = HaloMath.VecFromAngles (
				angle-head_diff.x,
				pitch-head_diff.y, 
				i*density
			);
			
			vector3 finalpos = level.vec3offset(origin, spawnpos);
			Spawn("GrappleHook_Tail", finalpos);
		}
		*/
		
		
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
		
		Death:
			TNT1 A 1 
			{
				// Get collision data
				LineTrace(angle, radius*radius, pitch, data:hitdata);
				vel *= 0;
				
				if(hitdata.HitType) 
				{
					hitpos = hitdata.HitLocation;				
					return ResolveState("DoGrapple");
				}
				else
				{
					return ResolveState("Retract");
				}	
			}
		goto DoGrapple;
		
		DoGrapple:
			TNT1 A 1 
			{
				// If nothing was hit, don't grapple.
				if(!hitdata.HitType) return ResolveState(null);
				
				// Get unit vector facing accel direction.
				vector3 origin = GetOrigin();
				vector3 dir = (hitpos-origin).Unit();
			
				// Spring physics
				double spring_curpos = (origin - pos).Length();
				spring_vel += HaloMath.DampedSpring(spring_curpos, 0, spring_vel, 4.5, 7);
				
				// Acceleration
				double addspd = clamp(maxspd - spring_vel, 0, accel / TICRATE);
				
				// Apply velocity
				// dir.z *= 1.50;
				source.vel += dir * addspd;
				
				// Remove grapple if source is close enough.
				double dist = (origin-pos).Length();
				if( dist <= mindist ) return ResolveState("Retract");
				
				// Continue
				return ResolveState(null);
			}
		loop;
				
		Retract:
			TNT1 A 1 
			{
				bNOINTERACTION = true;
				A_ChangeLinkFlags(0, 0);
				vector3 head_diff = level.SphericalCoords(GetOrigin(), pos, (angle, pitch));
				vel = HaloMath.VecFromAngles(angle-head_diff.x, pitch-head_diff.y, -retract_spd);
				
				retracting = true;
			}
			TNT1 A 0 A_JumpIf( (GetOrigin()-pos).Length() <= 32, "Death.Real"); 
		goto Retract;
				
		Death.Real:
			TNT1 A 1
			{
				if(tail) 
				{
					tail.LaserOff();
					tail.Destroy();
				}
			}
		stop;
	}
}

class GrappleHook_Tail : Actor
{
	
	Default
	{
		Scale 0.1;
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			PLSS A 2;
		stop;
	}
}


class Halo_StickyDet_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 1;
	}
}
class Halo_StickyDet_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 3;
		Inventory.MaxAmount 12;
		Inventory.Icon "HLAMP0"; // TODO: Icon for StickyDet ammo(?)
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 3 Rounds for the Sticky Detonator";
		
		Ammo.BackpackMaxAmount 28;
	}
	
	States
	{
		Spawn:
			HLAM P -1 Bright;
		stop;
	}
}

class HaloStickyDetProj : HaloSlowProjectile
{
	FLineTraceData hitlt;
	bool detonate;
	
	Default
	{
		HaloSlowProjectile.SetRanges 0, 0;
		HaloSlowProjectile.MinRangeDamage 100;
		HaloSlowProjectile.BaseDamage 10;
		HaloSlowProjectile.Speed_MPS 200;
		
		-NOGRAVITY;
		Gravity 0.55;
		Scale 0.15;
		Radius 2;
		Height 4;
	}
	
	
	States
	{
		Spawn:	
			STIK A 1;
		loop;
		
		Crash:
		XDeath:
		Death:
			STIK A 1
			{
				A_StopSound(CHAN_BODY);
				A_StartSound("Halo/Weapons/StickyDet/Proj/Armed", CHAN_AUTO, CHANF_OVERLAP, attenuation:0.1);
			}
		goto Stuck;
		
		Stuck:
			STIK A 1
			{
				bSOLID = true;
				bMISSILE = false;
				A_ChangeLinkFlags(false);
						
				// Check for wall collision.
				LineTrace(angle, 16, pitch, data:hitlt);
				if(hitlt.HitType == TRACE_HitWall)
					return ResolveState("Stuck.Wall");
					
				return ResolveState("Stuck.Fall");
			}
		goto Stuck.Fall;
		
		Stuck.Wall:
			TNT1 A 0 A_JumpIf(detonate, "ExplodeAndDie");
			STIK A 1
			{
				Line ln = hitlt.HitLine;
				if(ln)
				{
					vector3 normal = (-ln.delta.Y, ln.delta.X, 0).Unit();
					if (!hitlt.LineSide) normal *= -1;
				
					double lineAngle = atan2(normal.y, normal.x);
					angle = lineAngle;
					
					bNOGRAVITY = true;
					vector3 stuckPos = hitlt.HitLocation + (normal * 4);
					SetOrigin(stuckPos, true);
					
					FLineTraceData wallchecklt;
					LineTrace(angle + 180, 16, pitch, data:wallchecklt);
					if(wallchecklt.HitType != TRACE_HitWall)
					{
						bNOGRAVITY = false;
						return ResolveState("Stuck.Fall");
					}
				}
				return ResolveState(null);
			}
		loop;
		
		Stuck.Fall:
			TNT1 A 0 A_JumpIf(detonate, "ExplodeAndDie");
			STIK A 1
			{				
				vel.xy *= 0;
				A_SpriteOffset(0,-3);
			}
		loop;
		
		ExplodeAndDie:
			STIK A 1
			{
				Spawn("FragGrenadeExplosion", pos);
			}
		stop;
	}
}

class Halo_StickyDetonator : HaloGun
{	
	HaloStickyDetProj activeDet;

	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 6;
		Obituary "%o was stuck by %k's Sticky Detonator.";
		Inventory.PickupMessage	"Picked up the Sticky Detonator.";
		Tag "Sticky Detonator";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_StickyDet_Reserves";
		Weapon.AmmoType2 "Halo_StickyDet_Clip";
		Weapon.AmmoGive 3;
		HaloGun.Faction "Human";
				
		// Recoil
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.30;
		HaloGun.BaseRecoil 0;
		HaloGun.Inaccuracy 0;
		
		HaloGun.Crosshair "RktRet", 0.75;
		HaloGun.UIGraphic "WI_RKT", 1.0, 1.0;
		HaloGun.SetupUIAmmo "WI_AMM3", 57, 16, 0, 2;
		
		HaloGun.PowerTier P_STRONG;
		
		// Camera "Graphics/StickyDet/StickyDetCam.png"

		RecoilWeapon.YOffsetRange -10, 40;
	}
	
	override int GetPowerTier()
	{	
		if(HaloPlayer.IsGameType("SpartanOverkill")) return P_STRONG | P_MID;
		return super.GetPowerTier();
	}
	
	action void A_FireStickyDet()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/StickyDet/Fire", 0, true);
		A_WeapSound("Halo/Weapons/StickyDet/Fire/Bass", CHANF_OVERLAP, true);
		
		vector3 _hitpos; Actor sticky;
		[_hitpos, sticky] = A_ShootProjectile("HaloStickyDetProj", 12, 2);	
		
		invoker.activeDet = HaloStickyDetProj(sticky);
		A_TakeAmmo();
	}
	
	action void A_ReloadSound()
	{
		A_StartSound("Halo/Weapons/StickyDet/Reload", CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	action void A_SetupIdleFrame()
	{
		if(A_CheckInScope())
		{	
			A_SetFrame(CountLoadedAmmo() ? 0 : 6);
			return;
		}
		A_SetFrame(CountLoadedAmmo() ? 0 : 1);
		if(invoker.activeDet) A_SetFrame(2);
	}
	
	override void OverlayUIFX(RenderEvent ev, double deltaTime)
	{
		if( !zoomed || !activeDet) return;

		// Adjust scale for fullscreen.
		vector2 texsize;
		let camGraphic = TexMan.CheckForTexture("Graphics/StickyDet/StickyDetCam.png");
		[texsize.x, texsize.y] = TexMan.GetSize(camGraphic);
		
		vector2 toRes = (1920., 1080.);
		vector2 scaleMod = (
			toRes.x / texsize.x,
			toRes.y / texsize.y
		);
		
		uint flags = HLSBS.SS_SCREEN_CENTER | HLSBS.SS_COORDS_TEXGRID;
		TexMan.SetCameraToTexture(activeDet,"ScopeCamera",90.0);
		
		HLSBS.DrawImage("ScopeCamera", (0,0), flags, 1.0);
		HLSBS.DrawTexture(camGraphic, (0.5,0.5), flags, 1.0, scale:scaleMod);
	}
	
	bool sightsHold;
	States
	{
		
		Ready:
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/StickyDet/Draw");
				return A_JumpIf(CountLoadedAmmo(), "Ready.Loaded");
			}
			WWR1 FFEEDCBA 1 A_DoSelectAnim();
		goto Ready.Active;
		Ready.Loaded:
			TNT1 A 1 A_RecoilOffset(0,120,1,true);
			WWR1 UUUUUUUVWWXXYYZ 1 A_RecoilOffset(0,0,12);
			WWR2 A 1 A_RecoilOffset(0,0,1);
		Ready.Active:
			WWG1 "#" 1 
			{
				A_SetupIdleFrame();
				A_HaloWeaponReady(WRF_ALLOWRELOAD, usescope:false);
				return A_JumpIf(A_ShouldEnableScope(), "Sights.Enable");
			}
		loop;
		
		Ready.ADS:
			WWS1 "#" 1 
			{
				A_SetupIdleFrame();
				A_HaloWeaponReady(WRF_ALLOWRELOAD, usescope:false);
				return A_JumpIf(A_ShouldDisableScope(invoker.sightsHold), "Sights.Disable");
			}
		loop;
		
		Ready.Dryfire:
			TNT1 A 0 A_SetupIdleFrame();
			WWG1 "#" 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_SetCustomScope(0);
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Deselect.Empty");
			WWR1 ZYXWV 2;
			WWR1 U 1 A_GunLower(10);
		wait;
		
		Deselect.Empty:
			WWR1 AABBCDE 1;
			WWR1 F 1 A_GunLower();
		wait;
					
		Fire:
			TNT1 A 0 A_JumpIf(invoker.activeDet, "Fire.Detonate");
			TNT1 A 0 A_JumpIf(A_CheckInScope(), "Fire.FromSights");
			TNT1 A 0 A_GunCheckReload();
			WWG1 A 1;
			WWF1 A 1 Bright
			{
				A_RecoilOffset(0,8,1);
				A_SetRecoil(1.5, 0, 2);
				A_FireStickyDet();
				A_RQuakeEx(2,3,2,3,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			WWF1 B 1;
			WWF1 CD 1 A_Light(0);
			WWG1 C 4;
		goto Ready.Active;
		
		Fire.FromSights:
			WWS1 B 1;
			WWS1 C 1 Bright
			{
				A_RecoilOffset(0,4,1);
				A_SetRecoil(0.75, 0, 2);
				A_FireStickyDet();
			}
			WWS1 D 1;
			WWS1 EF 1 A_Light(0);
			WWS1 G 4;
			
			// Open camera
			WWG1 A 4 A_SetCustomScope(0);
			WWF1 BCD 1;
			WWG1 C 8;
		goto Ready.Active;
		
		Fire.Detonate:
			WWD1 A 1;
			WWD1 A 4 
			{
				if(invoker.activeDet) 
					invoker.activeDet.detonate = true;
			}
			WWD1 BCD 2;
		goto Ready.Active;
		
		Reload: // 44
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ReloadSound();
			WIR1 ABCDEFGHIJKLM 1;
			WIR1 N 1 A_SetRecoil(0, 3.0, 2);
			WIR1 OPQRSTUVWXY 1;
			WIR1 Z 1 A_SetRecoil(2.0, 2.0, 2);
			WIR2 ABCDEFG 1;
			TNT1 A 0 
			{
				A_SetSFXPos(10,-40,-10);
				A_SpawnSFX("Debris_RocketClip", 0, 60);
			}
			WIR2 HIJKLMNOPQ 1 A_SetRecoil(-0.5, -0.15, 2);
			WIR2 RSTUVWXYZ 1;
			WIR3 ABCDEFGHIJKLMNOPQR 1;
			WIR3 S 1 A_SetRecoil(1.0, -1.5, 3); 
			WIR3 T 1;
			WIR3 U 1 A_ReloadClip(); 
			WIR3 VWXYZ 1;
			WIR4 ABCDEFGHIJKLMNO 1;
			WIR4 P 1 A_SetRecoil(-2.0, -2.0, 2); 
			WIR4 QRSTUVWXYZ 1;
			WIR5 ABCDEFGHIJKLMNOPQRSTUVW 1;
		goto Ready.Active;
		
		Sights.Enable:
			TNT1 A 0 A_SetupIdleFrame();
			WWS1 "#" 2;
			TNT1 A 0 
			{
				invoker.sightsHold = invoker.ADS_Held;
				A_SetCustomScope(1);	
			}
		goto Ready.ADS;
		
		Sights.Disable:
			TNT1 A 0 A_SetCustomScope(0);
			WWG1 A 1;
		goto Ready.Active;	
		
		Spawn:
			WIP1 A -1;
		stop;
	}
}

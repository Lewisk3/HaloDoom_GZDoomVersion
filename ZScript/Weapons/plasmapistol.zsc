class Halo_PlasmaPistol_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 100;
	}
}

class HaloPlasma_Proj : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges PLASMAPISTOL_RANGE1, PLASMAPISTOL_RANGE2; 
		HaloProjectile.MinRangeDamage PLASMAPISTOL_MINDMG; 
		HaloProjectile.BaseDamage PLASMAPISTOL_DMG; 
		HaloProjectile.Speed_MPS  PLASMAPISTOL_BMPS;
		HaloProjectile.HeadshotDMGFactor PLASMAPISTOL_HEDMOD;
		
		RenderStyle "Add";
		DamageType "Fire";
		Translation "0:255=@65[5,240,44]";
		Alpha 0.90;
		Scale 0.12;
		DamageType "Plasma";
	}
	
	virtual void A_DoLightning(double amt = 4)
	{
		vector2 view;
		for(int i = 0; i < amt; i++)
		{
			view.x = angle + frandom(-60,60) + 180;
			view.y = pitch + frandom(-35,35);
			BiriBiri.DoLightning(pos, view, dist:25, 0.5, 20.0, 10.0, 30, 0);
		}
	}
	
	States
	{
		Spawn:
			HPLB A 4 Bright;
		SpawnLoop:
			HPLB A 1 Bright
			{
				double curScale = 0.06;
				double backOffs = -8 - abs(vel.Length());
				for(double i = 0; i < 4; i++)
				{
					vector3 worldOffs = HaloMath.V3Offset(angle, pitch, roll, backOffs,0,0, 1.0);
					let trail = Spawn("HaloPlasma_Trail", level.vec3offset(pos, worldOffs));
					if(trail) 
					{
						trail.A_SetScale(curScale);
						trail.vel = vel;
						trail.translation = translation;
						curScale *= 0.80;
						backOffs -= 4;
					}
				}
			}
		loop;
		
		Death:
		XDeath:
		Crash:
			TNT1 A 1 
			{	
				HaloMath.ParticlesFX(self, "Green", 30, 3, 10);
				A_DoLightning();
			}
		stop;
	}
}
class HaloChargedPlasma_Proj : HaloPlasma_Proj 
{
	Default
	{
		HaloProjectile.SetRanges PLASMAPISTOL_CHARGED_RANGE1, PLASMAPISTOL_CHARGED_RANGE2; 
		HaloProjectile.MinRangeDamage PLASMAPISTOL_CHARGED_MINDMG; 
		HaloProjectile.BaseDamage PLASMAPISTOL_CHARGED_DMG; 
		HaloProjectile.Speed_MPS  PLASMAPISTOL_CHARGED_BMPS;
		HaloProjectile.HeadshotDMGFactor PLASMAPISTOL_CHARGED_HEDMOD;
		HaloProjectile.DoExplosiveDamage 32, 128;
		HaloProjectile.SetupHoming true, 0.125, 30;
		
		Alpha 0.80;
		Scale 0.22;
		Decal "Scorch";
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		int res = super.SpecialMissileHit(victim);
		if(res == -1 && victim && victim.health > 0) 
		{
			A_DoLightning(10);
			victim.GiveInventory("EMP_DeBuff", 1);
		}
		
		return res;
	}
	
	override void Tick()
	{
		super.Tick();
		if( !(GetAge() % 2) ) HaloMath.ParticlesFX(self, "Green", 7, 3, 5);
	}	
}
class EMP_DeBuff : Inventory
{
	State prevState;
	int timer;
	Property DebuffTime : timer;
	
	Default
	{
		EMP_DeBuff.DebuffTime 35*3;
		Inventory.maxamount 1;
	}
	
	override void DoEffect()
	{
		super.DoEffect();		
		if(--timer <= 0 || Owner.health <= 0)
		{
			Owner.A_SetSpeed(Owner.default.Speed);
			Owner.RemoveInventory(self);
			GoAwayAndDie();
			return;
		}
		
		if(Owner.CurState != prevState) 
		{
			Owner.tics *= 2;
			prevState = Owner.CurState;
		}
		Owner.A_SetSpeed(Owner.default.Speed * 0.5);
	}
}

class HaloPlasma_Trail : Actor
{
	Default
	{	
		+NOINTERACTION;
	
		RenderStyle "Add";
		Translation "0:255=@50[5,240,44]";
		Alpha 0.65;
		Scale 0.06;
	}
	
	override void Tick()
	{
		super.Tick();
		
		if(isFrozen()) return;
		A_SetScale(Scale.X * 0.95);
		A_FadeOut(0.125);
	}
	
	States
	{
		Spawn:
			FSP2 A 1;
		wait;
	}
}

class Halo_PlasmaPistol : HaloGun
{
	const LCD = 22;
	double charge;
	double holdtimer;
	double lcd_offspd;
	vector2 lcd_offs, lcd_offs_real;
	
	Default
	{
		Weapon.SlotNumber 4;
		Obituary "%o was fried to a crisp by %k's Plasma Pistol.";
		Inventory.PickupMessage	"Picked up the Type-25 Plasma Pistol.";
		Tag "Plasma Pistol";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_PlasmaPistol_Clip";
		Weapon.AmmoType2 "Halo_PlasmaPistol_Clip";
		Weapon.AmmoGive 100;
		HaloGun.HasBattery true, 1;
		
		HaloGun.Availability "HL1, HL2, HL3, HL4, StarWars";
		HaloGun.PowerTier P_NORM;
				
		// Recoil
		HaloGun.Bloom 0.15;
		HaloGun.BloomSpeed 0.35;
		HaloGun.BaseRecoil PLASMAPISTOL_RECOIL;
		HaloGun.Inaccuracy PLASMAPISTOL_ACCMOD;
		HaloGun.Crosshair "PlsPRet", 0.75;
		HaloGun.UIGraphic "WI_PLSP", 1.0;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
	
	action void A_FireHaloPlasma(bool charged = false)
	{
		A_Light(2);

		if(!charged)
		{
			A_WeapSound("Halo/Weapons/PlasmaPistol/Fire", 0, true);
			A_WeapSound("Halo/Weapons/PlasmaPistol/Fire/Bass", CHANF_OVERLAP, true);
			A_ShootProjectile("HaloPlasma_Proj", 12);
			invoker.heat += 0.14;
			A_TakeAmmo(1, false);
		}
		else
		{
			A_WeapSound("Halo/Weapons/PlasmaPistol/Fire/Charged", 0, true);
			A_WeapSound("Halo/Weapons/PlasmaPistol/Fire/Charged/Bass", CHANF_OVERLAP, true);
			A_ShootProjectile("HaloChargedPlasma_Proj", 12);
			invoker.heat = 1.0;
			A_TakeAmmo(15, false);
		}
		A_UpdateSpread();
	}
	action state A_CheckRapidFire()
	{
		return A_JumpIf(A_FirePressed(), "Fire.Normal");
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		charge = clamp(charge, 0, 1.0);
		heat = clamp(heat, 0, 1.5);
		
		if(A_ButtonStatus(BT_ATTACK, BTS_HELD, Owner)) 
			holdtimer++;
		else
			holdtimer = 0;
		
		heat *= 0.98;
		
		lcd_offspd = clamp(lcd_offspd, 0.01, 1.0);
		lcd_offs_real.x = HaloMath.Lerp(lcd_offs_real.x, lcd_offs.x, lcd_offspd); 
		lcd_offs_real.y = HaloMath.Lerp(lcd_offs_real.y, lcd_offs.y, lcd_offspd);
	}
	
	action void A_DisableLCD()
	{
		A_Overlay(LCD, "LCD_Off");
		A_Overlay(LCD+1, "LCD_Off");
	}
	
	action void A_LCDOffset(double x, double y, double spd = 0.35)
	{
		invoker.lcd_offs = (x,y);
		invoker.lcd_offspd = spd;
	}
		
	States
	{
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/PlasmaPistol/Select");
			PLPD ABCDE 1 A_DoSelectAnim(-5);
		Ready.Active:
			PLPI A 1 
			{
				A_HaloWeaponReady(0, usescope:false);
				invoker.charge *= 0.5;
				A_Overlay(LCD, "LCD_HeatLow");
				A_Overlay(LCD+1, "LCD_HeatHigh");
				
				uint flags = PSPF_FORCEALPHA|PSPF_ALPHA|PSPF_ADDWEAPON|PSPF_ADDBOB;
				A_OverlayFlags(LCD,  flags, true);
				A_OverlayFlags(LCD+1, flags, true);
			}
		loop;
		
		Ready.Dryfire:
			PLPI A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_DisableLCD();
			PLPD EDCBA 1;
			PLPD A 1 A_GunLower();
		wait;
		
		Fire:
		/*
		Hold:
			TNT1 A 0 A_JumpIf(invoker.holdtimer >= 10, "BeginCharge");
			PLPI A 1 A_JumpIf(A_ButtonStatus(BT_ATTACK, BTS_UP), "Fire.Normal");
			TNT1 A 0 A_JumpIf(A_ButtonStatus(BT_ATTACK, BTS_HELD), "Hold"); 
		*/
		Fire.Normal:
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			PLPF A 1 A_RecoilOffset(0,8,1);
			TNT1 A 0 
			{
				A_FireHaloPlasma();
				A_SetRecoil(0.75, 0, 2);
				A_RQuakeEx(3,2,1,2,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RollQuake(2,8,1, true);
			}
			PLPF B 1 bright A_RecoilOffset(16,-20,4);
			PLPF C 1 
			{
				A_Light(0);
				A_SetRecoil(-0.18, 0, 4);
			}
			TNT1 A 0 A_JumpIf(invoker.heat >= 1.0, "Overheat");
			PLPF D 1 
			{
				A_RecoilOffset(0,0,4);
				return A_CheckRapidFire();
			}
			PLPF EF 1 A_CheckRapidFire();
		Hold:
			PLPI A 1 A_CheckRapidFire();
			TNT1 A 0 A_ReFire();
		goto Ready.Active;
		
		Fire.Charged:
			PLCF A 1 A_RecoilOffset(0,-8,1);
			TNT1 A 0 
			{
				invoker.charge = 0;
				A_SetZoom(0.92, 1);
				A_FireHaloPlasma(charged:true);
				A_SetRecoil(7.0, 0, 2);
				A_RQuakeEx(2,2,4,6,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RollQuake(2,10,3, true);
			}
			PLCF B 1 Bright;
			PLCF C 1 
			{
				A_Light(0);
				A_SetZoom(1.0, 6);
				A_SetRecoil(-0.18, 0, 8);
			}
			TNT1 A 0 A_DisableLCD();
			PLCF CCCD 1 A_RecoilOffset(0,0,10);
			TNT1 A 0 A_WeapSound("Halo/Weapons/PlasmaPistol/Overheat", CHANF_OVERLAP);
			PLCF EFGHIHGHIJ 2;
			PLCF K 6;
			PLCF LMNOPQRSTU 1;
		goto Ready.Active;
		
		// Charging
		AltFire:
		BeginCharge:
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/PlasmaPistol/Charge/Start", CHANF_OVERLAP);
				A_LCDOffset(-28,12);
			}
			PLPC ABCDEFGHIJKL 1;
		ChargeHold: 
			TNT1 A 0 A_StartSound("Halo/Weapons/PlasmaPistol/Charge/Loop", CHAN_VOICE, CHANF_LOOPING);
			PLCL ABC 1 
			{
				invoker.heat += 0.04;
				invoker.charge += 0.04;
				
				// Miss-fire if held too long.
				if(invoker.heat >= 1.5)
				{
					A_TakeAmmo(10);
					invoker.charge = 0;
					return ResolveState("ChargeStop");
				}
				return ResolveState(null);
			}
			TNT1 A 0 A_JumpIf(CountLoadedAmmo() <= 0, "ChargeStop");
			TNT1 A 0 A_ReFire("ChargeHold");
		ChargeStop:
			TNT1 A 0 
			{
				A_StopSound(CHAN_VOICE); // Stop charging SFX
				A_LCDOffset(0,0);
			}
			TNT1 A 0 A_JumpIf(invoker.charge >= 1.0, "Fire.Charged");
		goto Fire.Normal;
		
		Overheat:
			TNT1 A 0 A_DisableLCD();
			TNT1 A 0 A_WeapSound("Halo/Weapons/PlasmaPistol/Overheat", CHANF_OVERLAP);
			PLCF D 1;
			PLCF EFGHIHGHIJ 2
			{
				invoker.heat *= 0.7;
			}
			PLCF K 6;
			PLCF LMNOPQRSTU 1 
			{
				invoker.heat *= 0.9;
			}
			TNT1 A 0 
			{
				invoker.heat = 0;
			}
		goto Ready.Active;
		
		// Weapon Status 
		LCD_HeatLow:
			PLCD A 1 Bright
			{
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (40,0));
				A_FollowRotation(OverlayID(), PSP_WEAPON);
				A_OverlayAlpha(OverlayID(), 1.0 - invoker.heat);
				A_OverlayOffset(OverlayID(), invoker.lcd_offs_real.x, invoker.lcd_offs_real.y);
			}
		loop;
		LCD_HeatHigh:
			PLCD B 1 Bright
			{
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (40,0));
				A_FollowRotation(OverlayID(), PSP_WEAPON);
				A_OverlayAlpha(OverlayID(), invoker.heat);
				A_OverlayOffset(OverlayID(), invoker.lcd_offs_real.x, invoker.lcd_offs_real.y);
				if(invoker.charge >= 1.0) A_SetFrame(2, OverlayID());
			}
		loop;
		
		LCD_Off:
			TNT1 A 1;
		stop;
		
		Spawn:
			PPFL A -1;
		stop;
	}
}

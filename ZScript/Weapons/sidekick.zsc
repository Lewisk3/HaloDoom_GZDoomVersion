class Halo_Sidekick_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 12;
	}
}

class HaloSidekick_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges SIDEKICK_RANGE1, SIDEKICK_RANGE2;
		HaloProjectile.MinRangeDamage SIDEKICK_MINDMG; 
		HaloProjectile.BaseDamage SIDEKICK_DMG;
		HaloProjectile.Speed_MPS SIDEKICK_BMPS;
		HaloProjectile.HeadshotDMGFactor SIDEKICK_HEDMOD;
	}
}

class Halo_Sidekick : HaloGun
{
	Default
	{
		Weapon.SlotNumber 2;
		Obituary "%o was slapped by %k's Sidekick.";
		Inventory.PickupMessage	"Picked up the Sidekick.";
		Tag "Sidekick";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_Magnum_Reserves";
		Weapon.AmmoType2 "Halo_Sidekick_Clip";
		Weapon.AmmoGive 12;
				
		// Recoil
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.35;
		HaloGun.BaseRecoil SIDEKICK_RECOIL;
		HaloGun.Inaccuracy SIDEKICK_ACCMOD;
		HaloGun.Crosshair "MagRet", 1.0;
		HaloGun.UIGraphic "WI_MAGNM", 1.0;
		HaloGun.PowerTier P_NORM;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
	
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/Sidekick/Fire");
		MarkSound("Halo/Weapons/Sidekick/Fire/Bass");
		MarkSound("Halo/Weapons/Sidekick/Mech");
		MarkSound("Halo/Weapons/Sidekick/Reload");
		MarkSound("Halo/Weapons/Sidekick/Reload/Empty");
		MarkSound("Halo/Weapons/Sidekick/Draw");
	}
	
	action void A_FireSidekick()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/Sidekick/Fire", 0, true);
		A_WeapSound("Halo/Weapons/Sidekick/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloSidekick_Bullet", 12);
		A_SetSFXPos(25,-9,-7);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_SetSFXPos(25,-20,-5);
		A_SpawnSFX("SmallCasing", -90,20);
		A_TakeAmmo();
		A_UpdateSpread();
	}
	action state A_CheckRapidFire()
	{
		return A_JumpIf(A_FirePressed(), "Fire");
	}
	
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(!A_DoFullSelectAnimation(), "Ready.Chambered");
			TNT1 A 4 A_WeapSound("Halo/Weapons/Sidekick/Draw");
			WER1 QPONMLKJIHGFEDCBA 1 A_DoSelectAnim(-5, true);
		goto Ready.Active;
		Ready.Chambered:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Sidekick/Draw");
			WEG1 A 1 A_DoSelectAnim(-5);
		Ready.Active:
			WEG1 A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
		
		Ready.Dryfire:
			WEG1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			WEG1 A 1 A_GunLower();
		wait;
		
		//  - 210RPM -
		// 210/60 = 3.5
		// 35/3.5 = 10 frames.
		Fire:
			WEF1 A 1
			{
				A_RecoilOffset(0,8,1);
				return A_GunCheckReload();
			}
			TNT1 A 0 
			{
				A_FireSidekick();
				A_SetRecoil(1.70, 0, 2);
				A_RQuakeEx(2,3,2,3,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			WEF1 B 1 bright A_RecoilOffset(25,-10,4);
			WEF1 C 1 
			{
				A_Light(0);
				A_SetRecoil(-0.18, 0, 8);
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/Sidekick/Mech", CHANF_OVERLAP);
			WEF1 DE 1 A_RecoilOffset(0,0,4);
			WEF1 F 1 A_CheckRapidFire();
			WEG1 A 1 A_CheckRapidFire();
		Hold:
			WEG1 A 1 A_CheckRapidFire();
			TNT1 A 0 A_ReFire("Hold");
		goto Ready.Active;
		
		// [Lewisk] A_ValidateReload and A_WeapSound are not in the same state because 
		// that'll change the return type of the annon function to a State.
		// This results in the reload sound not being seperated from the 
		// conditional check.
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Reload.Empty");
			TNT1 A 0 A_StartSound("Halo/Weapons/Sidekick/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			WER3 Z 1;
			WER4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WER5 ABCDEFGHIJKLM 1;
			WER5 N 1 A_ReloadClip();
			WER5 OPQRSTUVWXYZ 1;
			WER6 ABCDEFG 1;
		goto Ready.Active;
		
		Reload.Empty:
			WER1 ABCDEFGHIJKLMNOPQ 1;
			TNT1 A 0 A_WeapSound("Halo/Weapons/Sidekick/Reload/Empty", CHANF_OVERLAP);
			WER1 RSTUVWXYZ 1;
			WER2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WER3 A 1 A_ReloadClip();
			WER3 BCDEFGHIJKLMNOPQRSTUVWXY 1;
		goto Ready.Active;
		
		Spawn:
			MGFL A -1;
		stop;
	}
}

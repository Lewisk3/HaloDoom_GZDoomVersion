// SNDBase: Halo/Weapons/SuperShotgun/Fire,Select,Reload
/*
	Double Barrel:
	Role: Heavy Close Quarters Combat
	Ammo:: 2 per Mag ; 28 total
	RPM: 
	Double: 30 RPM
	Single: 50 RPM
	Velocity: 1463 meters per second
	Range: 75 Meters
	Damage Output: 
	Buckshot: 25 per pellet (15 per shell)
*/
class Halo_DBLShotgun_Shells : Ammo 
{
	Default
	{
		Inventory.MaxAmount 2;
	}
}
class Halo_DBLShotgun_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 4;
		Inventory.MaxAmount 24;
		Inventory.Icon "HLAMH0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 4 Shells for the Double Barrel";
		
		Ammo.BackpackMaxAmount 36;
	}
	
	States
	{
		Spawn:
			HLAM H -1 Bright;
		stop;
	}
}

class SSG_SparkTracer : CheapActor
{
	Default
	{
		+BRIGHT;
		RenderStyle "AddShaded";
		Scale 0.75;
		Speed 30;
		Radius 10;
		Height 2;
		DamageType "Fire";
	}
	
	override void Tick()
	{
		super.Tick();
		if(isFrozen()) return;
		
		SetShade(0x0Af54f02);
		SetOrigin(level.vec3offset(pos, vel), true);
		vel = HaloMath.VecFromAngles(angle, pitch, speed);
		
		pitch += 1;

		FLineTraceData lt;
		LineTrace(angle, vel.Length() + radius, pitch, data:lt);
		
		if(lt.HitType != TRACE_HitNone)
		{
			let hitActor = lt.HitActor;
			bool hitGeo = lt.HitType == TRACE_HitWall || lt.HitType == TRACE_HitFloor || lt.HitType == TRACE_HitCeiling;
			if( hitGeo || hitActor != target && hitActor && hitActor.CanCollideWith(self, false) )
			{
				if(hitActor) 
				{
					hitActor.GiveInventory("DamageFX_Fire", 1);
					hitActor.DamageMobj(target, self, 1, damageType);
				}
				
				Spawn("MuzzleSparks", lt.HitLocation);
				Destroy();
			}
		}
		
		//if( !(GetAge() % 2) ) 
		
		let trail = Spawn("HaloRocketTrail", pos);
		if(trail) 
		{
			trail.A_SetScale(0.03,0.03);
			trail.alpha = 0.35;
		}
	}
	
	States
	{
		Spawn:
			TRAC A -1;
		stop;
	}
}

class SSG_MuzzleExplosion : CheapActor
{
	Default
	{
		RenderStyle "Add";
		+BRIGHT;
		+ROLLSPRITE;
		Scale 0.5;
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
			FX58 AAAABCDEFGHIJKLMNOP 2 Bright
			{
				roll += 0.01;
				A_FadeOut(0.005);
			}
			FX58 Q 1 Bright A_FadeOut(0.05);
		stop;
	}
}

class HaloDBLShotgun_Bullet : HaloBullet 
{
	Default
	{
		DamageType "Fire";
		HaloProjectile.SetRanges DBLSHOTGUN_RANGE1, DBLSHOTGUN_RANGE2;
		HaloProjectile.MinRangeDamage DBLSHOTGUN_MINDMG; 
		HaloProjectile.BaseDamage DBLSHOTGUN_DMG;
		HaloProjectile.Speed_MPS DBLSHOTGUN_BMPS;
		HaloProjectile.HeadshotDMGFactor DBLSHOTGUN_HEDMOD;
		HaloProjectile.RipperCount 3;
	}
}

class Halo_DBLShotgun : HaloGun
{
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 3;
		Obituary "%o's existance took a 180 from %k's Double Barreled Shotgun.";
		Inventory.PickupMessage	"Picked up the M180 Double Barrel.";
		Tag "Super Shotgun";
		Weapon.BobSpeed 2.12;
		Weapon.BobRangeX 0.63;
		Weapon.AmmoType1 "Halo_DBLShotgun_Reserves";
		Weapon.AmmoGive 8;
		Weapon.AmmoType2 "Halo_DBLShotgun_Shells";
		HaloGun.Faction "Human";
		
		HaloGun.PowerTier P_STRONG;
				
		// Recoil
		RecoilWeapon.RecoilSpeed 20;
		HaloGun.Bloom 1.25;
		HaloGun.BloomSpeed 0.08;
		HaloGun.BaseRecoil DBLSHOTGUN_RECOIL;
		HaloGun.Inaccuracy DBLSHOTGUN_ACCMOD;
		HaloGun.Crosshair "DBLSRet1", 1.0;
		HaloGun.UIGraphic "WI_DBL", 1.0, 1.0;
		HaloGun.SetupUIAmmo "WI_AMM5", 16, 16, 0, 14;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
	
	override int GetPowerTier()
	{	
		if(HaloPlayer.IsGameType("SpartanOverkill")) return P_NORM | P_MID;
		return super.GetPowerTier();
	}
	
	override void GetStatsLore(out Array<String> stats, out string lore)
	{
		stats.Push("M180-Double Barreled Assault Weapon System");
		stats.Push("Ammo Type: Misriah Armory 4-Gauge Type");
		stats.Push("Frame: Side by Side Breach Loader");
		stats.Push("Feed System: 2 Round Break Action Barrel");	
		stats.Push(String.Format("Base Damage: %d", DBLSHOTGUN_DMG*30));
		
		lore = (
			"The M180-Double Barreled Assault Weapon System is a Double "
			"Barreled Shotgun exclusively designed for use by Spartans, "
			"and thus, is a rare sight on the battlefield. Marines often "
			"gave this Shotgun the nickname of the \“Lead Brick Wall\” due "
			"to the sheer amount of buckshot it can produce per shot if "
			"using both barrels at once. Alternatively, The M180’s barrels can "
			"be fired individually for the sake of ammo conservation. "
			"The M180 has been shown to blow elites to literal pieces due to "
			"the immense amount of force that is exerted.\n\n"
			
			"While its very powerful, the M180 is very inaccurate due to "
			"its short barrel length, and by extension the recoil is very "
			"intense, making it dangerous and unusable for normal Marines, "
			"but perfect for Spartans, who can get in close and get out of "
			"harms way just as quickly."
		);
		/*
			"The M180, much like its more contemporary cousin, can fire "
			"4-gauge shells, and sports 2 LED lit iron sights. Not only do "
			"they serve as such, but can also change coloration depending "
			"on which barrel has been fired. Blue indicating loaded and ready "
			"to fire, and Red indicating that a reload is needed.\n\n"
		*/
	}
	
	action void A_FireDouble()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/SuperShotgun/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/SuperShotgun/Fire/Bass", CHANF_OVERLAP, true);
		for(int i = 0; i < 30; i++)
		{
			A_ShootProjectile("HaloDBLShotgun_Bullet", 8);
					
			if(!(i%2))
			{
				A_SetSFXPos(25,-8,-8);
				A_SpawnSFX("MuzzleSmoke", 0,0);
				A_SetSFXPos(25,-14,-8);
				A_SpawnSFX("MuzzleSmoke", 0,0);
			}
		}
		
		let expl = A_SpawnSFX("SSG_MuzzleExplosion", 0,0);			
		for(int i = 0; i < max(5, 60 * halodoom_effectintensity); i++)
		{
			vector3 hitPos; Actor tSpark;
			[hitPos, tSpark] = A_ShootProjectile("SSG_SparkTracer", 8);
			if(tSpark)
			{
				tSpark.angle += frandom[DragonFX](-6,6);
				tSpark.pitch += frandom[DragonFX](-6,6);
				tSpark.target = self;
			}
		}
		
		A_MuzzleSparks(50, 30, 12,12);
		A_TakeAmmo(2, false);
		A_UpdateSpread();
	}
	
	action void A_FireSingle()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/SuperShotgun/Fire/Single", 0);
		A_WeapSound("Halo/Weapons/SuperShotgun/Fire/Bass", CHANF_OVERLAP);
		for(int i = 0; i < 15; i++)
		{
			A_ShootProjectile("HaloDBLShotgun_Bullet", 8);		
			if(!(i%2))
			{
				A_SetSFXPos(25,-8,-8);
				A_SpawnSFX("MuzzleSmoke", 0,0);
				A_SetSFXPos(25,-14,-8);
				A_SpawnSFX("MuzzleSmoke", 0,0);
			}
		}
		
		let expl = A_SpawnSFX("SSG_MuzzleExplosion", 0,0);			
		for(int i = 0; i < max(5, 30 * halodoom_effectintensity); i++)
		{
			vector3 hitPos; Actor tSpark;
			[hitPos, tSpark] = A_ShootProjectile("SSG_SparkTracer", 8);
			if(tSpark)
			{
				tSpark.angle += frandom[DragonFX](-4,4);
				tSpark.pitch += frandom[DragonFX](-4,4);
				tSpark.target = self;
			}
		}
		
		A_MuzzleSparks(25, 40, 8,8);
		A_TakeAmmo(1);
		A_UpdateSpread();
	}

	States
	{
		Ready.Active:
			BTRI A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
		
		Ready:
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/SuperShotgun/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Chamber");
			}
			DBSS ABCD 1 A_DoSelectAnim();
		goto Ready.Active;
		Ready.Chamber:
			DBR2 P 1 A_SetRecoil(0.25, 0, 4);
			DBR2 QRSTUVWXYZ 1;
			DBR3 ABCDEFGHIJ 1 A_DoSelectAnim(0, true);
		Ready.Active:
			DBSI A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD, false);
			}
		loop;
		
		Ready.Dryfire:
			DBSI A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			DBSS DCB 1;
			DBSS A 1 A_GunLower();
		wait;
		
		// DBL - 30RPM -
		// 30/60.  = 0.5
		// 35/0.5  = 70 frames
		// 26 frames for shot, leaves 44 for reload.
		Fire:
			TNT1 A 0 A_GunCheckReload();
			TNT1 A 0 A_JumpIf(countinv(invoker.ammotype2)<2, "AltFire");
			TNT1 A 0 A_SetZoom(0.80,1);
			DBSF A 1 Bright
			{
				A_RecoilOffset(random[WeapFX](6,12),24,4);
				A_SetRecoil(12.0, 4.2, 3);
				A_FireDouble();
				A_RollQuake(8,12,1);
				A_RQuakeEx(2,2,4,6,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			DBSF B 2 Bright;
			TNT1 A 0 
			{
				A_Light(0);
				A_RQuakeEx(4,4,4,15,0,20,"",QF_RELATIVE);
			}
			DBSF CD 1 A_SetZoom(1.0, 12);
			DBSF EFGGG 1 A_RecoilOffset(0,10,5);
			DBSF GGGGGGGGGHIJKL 1 A_RecoilOffset(0,0,8);
			DBSF MNOP 1;
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
		goto Reload;
		
		AltFire:
			TNT1 A 0 A_GunCheckReload();
			DBSF Q 2 Bright
			{
				A_RecoilOffset(random[WeapFX](2,7),12,4);
				A_RQuakeEx(2,6,2,4,0,20,"",QF_RELATIVE);
				A_SetRecoil(3.44, 1.45, 3);
				A_FireSingle();
			}
			DBSF R 1 Bright A_SetZoom(0.994, 2);
			DBSF S 1 A_Light(0);
			DBSF TUVWXXX 1 A_RecoilOffset(0,0,10);
			TNT1 A 0 A_GunCheckReload();
			DBSF XXX 1;
		goto Ready.Active;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_StartSound("Halo/Weapons/SuperShotgun/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			DBR1 AAAAABCDEFGHIJKLLLLMNOPQR 1;
			DBR1 S 1
			{	
				A_SetRecoil(-2.0, 0, 3);
				A_SetSFXPos(10,-8,-8);
				A_SpawnSFX("ShellCasing", -180,-60);
				A_SetSFXPos(10,-16,-8);
				A_SpawnSFX("ShellCasing", -180,-60);
			}
			DBR1 TUVWXYYYYYYYZ 1;
			DBR2 ABCDEFGHI 1;
			DBR2 J 1 
			{
				A_SetRecoil(-1.0, 0, 4);
				A_ReloadClip();
			}
			DBR2 KLMMMMMNNNNNNO 1;
			DBR2 P 1 A_SetRecoil(0.25, 0, 4);
			DBR2 QRSTUVWXYZ 1;
			DBR3 ABCDEFGHIJ 1;
		goto Ready.Active;
			
		Spawn:
			SSGF A -1;
		stop;
	}
}


// -- Single Fire Code -- 

// SGL - 50RPM -
// 50/60.  = ~0.83
// 35/0.83 = ~42 frames

/*
action void A_FireSingle()
{
	A_Light(4);
	A_WeapSound("Halo/Weapons/SuperShotgun/Fire/Single", 0, true);
	A_WeapSound("Halo/Weapons/SuperShotgun/Fire/Bass", CHANF_OVERLAP, true);
	for(int i = 0; i < 15; i++)
		A_ShootProjectile("HaloDBLShotgun_Bullet", 1, -1.35, 4.0, 8, spreadmod:0.35);		
	A_TakeAmmo(1);
	A_UpdateSpread();
}

// TNT1 A 0 A_JumpIf(countinv(invoker.ammotype2)<2, "AltFire");

AltFire:
	TNT1 A 0 A_GunCheckReload();
	TNT1 A 0 A_SetZoom(0.94, 3);
	DBSF A 2 Bright
	{
		A_RecoilOffset(random[WeapFX](2,7),12,4);
		A_RQuake(2,6,0,20,"");
		A_SetRecoil(3.44, 1.45, 3);
		A_FireSingle();
	}
	DBSF N 1 Bright A_SetZoom(0.994, 2);
	DBSF O 1 A_Light(0);
	DBSF PPPPPPQ 1 A_RecoilOffset(0,0,10);
	TNT1 A 0 A_SetZoom(1.0, 2);
	TNT1 A 0 A_GunCheckReload();
	DBSF PON 1;
goto Ready.Active;
*/

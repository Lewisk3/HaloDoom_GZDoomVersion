class Halo_SMG_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 45;
	}
}
class Halo_SMG_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 45;
		Inventory.MaxAmount 180;
		Inventory.Icon "HLAMO0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 45 Rounds for the SMG";
		
		Ammo.BackpackMaxAmount 240;
	}
	
	States
	{
		Spawn:
			HLAM O -1 Bright;
		stop;
	}
}

class HaloSMG_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges SMG_RANGE1, SMG_RANGE2;
		HaloProjectile.MinRangeDamage SMG_MINDMG; 
		HaloProjectile.BaseDamage SMG_DMG;
		HaloProjectile.Speed_MPS SMG_BMPS;
		HaloProjectile.HeadshotDMGFactor SMG_HEDMOD;
		Scale 0.5;
	}
}

class Halo_SMG : HaloGun 
{	
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 3;
		Obituary "%o was made aware of 45 ACP courtesy of %k's SMG.";
		Inventory.PickupMessage	"Picked up the M21 PDW SMG";
		Tag "SMG";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_SMG_Reserves";
		Weapon.AmmoType2 "Halo_SMG_Clip";
		Weapon.AmmoGive 120;
		HaloGun.Faction "Human";
				
		// Recoil
		RecoilWeapon.RecoilSpeed 35;
		HaloGun.Bloom 0.12;
		HaloGun.BloomSpeed 0.45;
		HaloGun.BaseRecoil SMG_RECOIL;
		HaloGun.Inaccuracy SMG_ACCMOD;
		HaloGun.Crosshair "SMGRet", 1.0;
		HaloGun.UIGraphic "WI_SMG", 0.4, 0.4;
		HaloGun.SetupUIAmmo "WI_AMMO", 12.5, 12.5, 0, 9;
		HaloGun.UIAmmo_Scale_Offset 1.0, 0, -10;
		HaloGun.UISight "SI_SMG", 1.0, 1.0;
		HaloGun.SetupScope 1.25, 0.8;
		+HaloGun.SI_Fullscreen;
		+HaloGun.SI_Rotate;
		+HaloGun.SI_AlwaysHide;
		
		HaloGun.PowerTier P_NORM;
		
		RecoilWeapon.YOffsetRange 0, 40;
	}
	
	override void GetStatsLore(out Array<String> stats, out string lore)
	{
		stats.Push("M10 Personal Defense SubMachine Gun Carbine");
		stats.Push("Ammo Type: .45 AMP M452 FMJ");
		stats.Push("Frame: Side Loading Pistol Caliber Carbine");
		stats.Push("Feed System: 45 Round Side Loading Magazine");	
		stats.Push(String.Format("Base Damage: %d", SMG_DMG));
		
		lore = (
			"The M10 Personal Defense SubMachine Gun is a natural evolution "
			"of the M7 SMG which was a reliable weapon to the UNSC for years. "
			"It never reached proper service due to development being halted "
			"after the fall of reach. It sports a .45 AMP full metal jacket "
			"armor piercing round, which while not as compact as the "
			"5Ã—23mm M443 Caseless FMJ rounds, provided plenty of stopping "
			"power, and reliability. The cartridge is cased due to caseless "
			"ammunition having a less than ideal shelf life, on top of being "
			"expensive to store, and overall very fragile. \n\n"
	
			"Due to this ammo change, it is also not ideal to akimbo due to the "
			"casings being ejected from the gun. But use of akimbo is not "
			"necessary with this gun, as its performance and damage output "
			"consistency is sufficient enough. No need to cripple ourselves "
			"for the sake of looking cool. "
		);
	}

	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/SMG/Fire");
		MarkSound("Halo/Weapons/SMG/Fire/Bass");
		MarkSound("Halo/Weapons/SMG/Mech");
		MarkSound("Halo/Weapons/SMG/Reload");
		MarkSound("Halo/Weapons/SMG/Reload/Empty");
		MarkSound("Halo/Weapons/SMG/Draw");
	}
	
	action void A_FireSMG()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/SMG/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/SMG/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloSMG_Bullet", A_CheckInScope() ? 0 : 8);		
		A_SetSFXPos(20,-15,-12);
		A_SpawnSFX("PistolCasing", -90,-20);
		A_SetSFXPos(25,-7,-8);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_TakeAmmo();
		A_UpdateSpread();
		A_RecoilOffset(frandom[WeapFX](-4,4),frandom[WeapFX](-4,4),2);
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/SMG/Reload";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/SMG/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	action state A_CheckBurstFire(Statelabel st = "Fire")
	{
		if(A_ButtonStatus(BT_ATTACK, BTS_DOWN))
			return ResolveState(st);
		return ResolveState(null);
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		A_UpdateCrosshair(zoomed ? "SMGZRet" : "", self);
	}
	
	States
	{	
		Ready:
			TNT1 A 0 A_JumpIf(!A_DoFullSelectAnimation(), "Ready.Chambered");
			TNT1 A 4 A_WeapSound("Halo/Weapons/SMG/Draw");
			WFD1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim(-5, true);
			WFD2 ABCDEFGHIJKLMNOPQRSTUVW 1 A_DoSelectAnim(-5);
		goto Ready.Active;
		Ready.Chambered:
			TNT1 A 0 A_WeapSound("Halo/Weapons/SMG/Draw");
			WFG1 A 1 A_DoSelectAnim(-5);
		Ready.Active:
			WFG1 A 1 
			{	
				A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
				A_ClearRefire();
			}
		loop;
			
		Ready.Dryfire:
			WFG1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			WFG1 A 1 A_GunLower();
		wait;
		
		// Lots of different fire animations here
		Fire:
			TNT1 A 0 A_GunCheckReload();
			TNT1 A 0 
			{	
				bool firstFire = player.refire < 2;
				if(!firstFire) return ResolveState("Fire.Continuous");
				return A_Jump(127, "Fire.Two");
			}
		Fire.One:
			TNT1 A 0 A_SetFrame(randompick(0,1));
			WFS1 "#" 1 Bright
			{
				A_FireSMG();
				A_SetRecoil(1.8, 0, 1);
				A_RollQuake(1,10,1);
			//	console.printf("Burst1");
			}
			WFS1 C 1
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
			}
			TNT1 A 0 A_RefireState("Fire");
			WFS1 DEFGHIJKLMNOPQRST 1 A_CheckBurstFire();
		goto Ready.Active;
		Fire.Two:
			TNT1 A 0 A_SetFrame(randompick(20,21));
			WFS1 "#" 1 Bright
			{
				A_FireSMG();
				A_SetRecoil(2.0, 0, 1);
				A_RollQuake(1,8,1);
			//	console.printf("Burst2");
			}
			WFS1 W 1
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
			}
			TNT1 A 0 A_RefireState("Fire");
			WFS1 XYZ 1 A_CheckBurstFire();
			WFS2 ABCDEFGHIJKLMN 1 A_CheckBurstFire();
		goto Ready.Active;
		
		Fire.Continuous:	
			TNT1 A 0 A_Jump(255, "Fire.Continuous.Two", "Fire.Continuous.Three");
			TNT1 A 0 A_SetFrame(randompick(0,1));
			WFF1 "#" 1 Bright
			{
				A_FireSMG();
				A_SetRecoil(1.37, 0, 1);
				A_RollQuake(1,10,1);
			//	console.printf("Cont1");
			}
			WFF1 C 2
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
			}
			TNT1 A 0 A_RefireState("Fire");
			WFF1 DEFGHIJKLMNOPQRST 1 A_CheckBurstFire();
		goto Ready.Active;
		Fire.Continuous.Two:
			TNT1 A 0 A_SetFrame(randompick(20,21));
			WFF1 "#" 1 Bright
			{
				A_FireSMG();
				A_SetRecoil(1.15, 0, 1);
				A_RollQuake(1,8,1);
			//	console.printf("Cont2");
			}
			WFF1 W 2
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
			}
			TNT1 A 0 A_RefireState("Fire");
			WFF1 XYZ 1;
			WFF2 ABCDEFGHIJKLMN 1 A_CheckBurstFire(); 
		goto Ready.Active;
		
		Fire.Continuous.Three:
			TNT1 A 0 A_SetFrame(randompick(14,15));
			WFF2 "#" 1 Bright
			{
				A_FireSMG();
				A_SetRecoil(1.5, 0, 1);
				A_RollQuake(1,12,1);
			//	console.printf("Cont3");
			}
			WFF2 Q 2
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
			}
			TNT1 A 0 A_RefireState("Fire");
			WFF2 RST 1;
			WFF2 UVWXYZ 1 A_CheckBurstFire();
			WFF3 ABCDEFGH 1 A_CheckBurstFire();
		goto Ready.Active;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ReloadSound();
			TNT1 A 0 A_JumpIf(CountLoadedAmmo(), "Reload.Tactical");
			WFR1 ABCDEFGHIJKLMNOPQRSTUVW 1;
			TNT1 A 0 
			{
				A_SetSFXPos(10,-20,-15);
				A_SpawnSFX("Debris_SMGMagazine", 90, 20, 3);
			}
			WFR1 XYZ 1;
			WFR2 ABCDEFGHIJKLMNOPQRSTU 1;
			WFR2 V 1 A_SetRecoil(-0.6, 0, 1);
			WFR2 W 1 A_ReloadClip();
			WFR2 X 1 A_SetRecoil(0, 0.6, 1);
			WFR2 YZ 1;
			WFR3 ABCDEFGHIJKLMNOPQ 1;
			WFR3 RS 1 A_SetRecoil(0.6, 0, 1);
			WFR3 TUVWXYZ 1;
			WFR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WFR5 ABCDEF 1;
			TNT1 A 0 A_GotoState("Ready.Active"); // Retain these two reload sequences as a single state-sequence.
		Reload.Tactical:
			WFT1 ABCDEFGHIJKLMNOPQR 1;
			WFT1 S 1 A_SetRecoil(-0.6, 0, 1);
			WFT1 TUVW 1;
			WFT1 XYZ 1 A_AddRecoil(-0.3, 0, 1);
			WFT2 ABCDEFGHIJKLMNOPQ 1;
			WFT2 R 1 A_SetRecoil(-0.2, 0.6, 1);
			TNT1 A 0 A_ReloadClip();
			WFT2 ST 1;
			WFT2 UV 1 A_AddRecoil(0, 0.6, 1);
			WFT2 W 1 A_AddRecoil(0, 1.0, 1);
			WFT2 XYZ 1;
			WFT3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WFT4 A 1;
		goto Ready.Active;
		
		Spawn:
			WFP1 A -1;
		stop;
	}
}

/* Old
		Fire:
			TNT1 A 0 
			{				
				A_SetFrame(randompick(0,1));
				return A_GunCheckReload();
			}
			WFF1 "#" 1 Bright
			{
				A_FireSMG();
				A_RecoilOffset(frandom[WeapFX](-4,4),frandom[WeapFX](-4,4),2);
				A_SetRecoil(1.5, 0, 1);
				//A_RQuakeEx(2,2,2,2,0,20,"",QF_RELATIVE);
				A_RollQuake(1,10,1);
			}
			WFF1 C 1
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/SMG/Mech");
				A_RecoilOffset(0,0,2);
			}
			WFF1 D 1;
			TNT1 A 0 A_ReFire("Fire");
			WFF1 E 1;
			WFG1 A 1;
		goto Ready.Active;
		
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ReloadSound();
			WFR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			TNT1 A 0 
			{
				A_SetSFXPos(10,-5,-15);
				if(!CountReloadAmmo()) A_SpawnSFX("Debris_SMGMagazine", 0, 60);
			}
			WFR2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WFR3 ABCDEF 1;
			WFR3 G 1 
			{
				A_SetRecoil(0.24, 0.45, 1);
				A_ReloadClip();
			}
			WFR3 HIJKLMNOP 1;
			WFR3 Q 1 A_SetRecoil(0, 0.45, 2);
			WFR3 RSTUVWXYZ 1;
			WFR4 ABCDE 1; 
			TNT1 A 0 A_JumpIf(CountReloadAmmo(), "Reload.End");
		Reload.Empty:
			WFR4 FGHIJKLMNOPQRSTUVWXYZ 1;
		Reload.End:
			WFR5 ABCDEFGHIJ 1;
		goto Ready.Active;
		
*/

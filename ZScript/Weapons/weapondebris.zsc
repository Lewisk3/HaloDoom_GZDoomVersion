
// Casings
class BulletCasing : Actor
{
	bool dosmoke;
	Property Smoke : dosmoke;
	vector3 angVel;
	bool isStatic;
	
	Quat facingDir;
	Quat rotDir;
	
	Default
	{
		Speed 4;
		BulletCasing.Smoke true;
		BounceSound "Casings/Pistol";
		Projectile;
		BounceType "Doom";
		BounceCount 3;
		BounceFactor 0.7;
		+USEBOUNCESTATE;
		-SOLID;
		-NOGRAVITY;
		+ROLLSPRITE;
		Gravity 0.35;
		Radius 2;
		Height 2;
		Scale 20.0;
	}
	
	virtual void RandomizeAngles(bool randomAngle = false, bool randomPitch = true, bool randomRoll = true)
	{
		Quat randomizedDir = Quat.FromAngles(
			frandom[CasingVisualRNG](-180,180) * randomAngle, 
			frandom[CasingVisualRNG](-180,180) * randomPitch, 
			frandom[CasingVisualRNG](-180,180) * randomRoll
		);
		
		angVel += (
			frandom[CasingVisualRNG](-3,3) * randomAngle, 
			frandom[CasingVisualRNG](-3,3) * randomPitch, 
			frandom[CasingVisualRNG](-3,3) * randomRoll
		);
		
		facingDir *= randomizedDir;
	}
	
	virtual void RandomizeVelocity(double spd = 3)
	{
		vel += (
			frandom[CasingVisualRNG](-1,1) * spd, 
			frandom[CasingVisualRNG](-1,1) * spd, 
			0
		);
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		
		facingDir = Quat.FromAngles(angle, pitch, roll);
		rotDir = Quat.FromAngles(0, 0, 0);
		RandomizeAngles();
	}
	
	virtual void SetFacingAngles(double a, double p, double r)
	{
		facingDir = Quat.FromAngles(a, p, r);
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other is "PlayerPawn") return false;
		return super.CanCollideWith(other, passive);
	}
	
	// Returns true or false based on if our current angles match our desired angles.
	virtual bool InterpolateAngles(double spd = 0.4)
	{
		if(isStatic) spd += spd*0.5;
		Quat r = Quat.FromAngles(angle, pitch, roll);
		let desiredRot = facingDir * rotDir;
		r = Quat.SLerp(r, desiredRot, clamp(spd, 0.01, 1.0));
		
		vector3 desiredAngles = HaloMath.GetEuler(facingDir);
		vector3 currentAngles = (angle, pitch, roll);
		vector3 diff = level.vec3Diff(desiredAngles, currentAngles);
		
		if( !(diff ~== (0,0,0)) && diff.Length() > 1 )
		{
			vector3 facingAngles = HaloMath.GetEuler(r);
			A_SetAngle(facingAngles.x, SPF_INTERPOLATE);
			A_SetPitch(facingAngles.y, SPF_INTERPOLATE);
			A_SetRoll(facingAngles.z, SPF_INTERPOLATE);
			return false;
		}
		else
		{
			return true;
		}
	}
	
	override void Tick()
	{
		if(InterpolateAngles() && isStatic) bNOINTERACTION = true;
		if(isStatic)
		{
			// Always stay on the floor.
			vel.z *= 0;
			SetOrigin((pos.xy, floorz+(height*0.5)), true);
			rotDir = Quat.FromAngles(0, 0, 0);
			angVel *= 0;
			
			// Forcibly set angles if we're active for a long time.
			if(GetAge() >= (35*5) && !bNOINTERACTION)
			{
				vector3 desiredAngles = HaloMath.GetEuler(facingDir);
				A_SetAngle(desiredAngles.x, SPF_INTERPOLATE);
				A_SetPitch(desiredAngles.y, SPF_INTERPOLATE);
				A_SetRoll(desiredAngles.z, SPF_INTERPOLATE);
				bNOINTERACTION = true;
			}
		}
		else
		{
			Quat addAngVel = Quat.FromAngles(angVel.x, angVel.y, angVel.z);
			if(rotDir.Length() <= 0.01) 
				rotDir = addAngVel;
			else
				rotDir *= addAngVel;
			
			angVel *= 0.995;
		}

		bool cl_dosmoke = true;
		let src = HaloGun(target);
		if(src && src.cvfx_smoke)
			cl_dosmoke = src.cvfx_smoke.GetBool();
			
		if( !(level.maptime%10) && random[SpawnSmoke](0,1) && GetAge() < 3*35 && cl_dosmoke && dosmoke )
		{
			let smoke = Spawn("CasingSmoke", pos);
			if(smoke) 
			{
				smoke.vel = vel;
				smoke.A_SetScale(frandom[SpawnSmoke](0.04,0.15));
				smoke.alpha = frandom[SpawnSmoke](0.05,0.5);
			}
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			MODL A 1;
		loop;
			
		Bounce:
			"####" "#" 1 
			{
				RandomizeVelocity();
				RandomizeAngles(randomAngle:true);
				Spawn("BulletSplashSpawner", pos);
				return ResolveState("Spawn");
			}
		wait;
		
		XDeath:
		Death:
		Crash:
			"####" A 700 // 20 seconds
			{
				Spawn("BulletSplashSpawner", pos);
				isStatic = true;
				SetFacingAngles(angle, 0, roll);
			}
		WaitDeath:
			"####" "#" 1 A_FadeOut(0.002);
		wait;
	}
}

class RifleCasing : BulletCasing {}
class PistolCasing : BulletCasing
{
	Default
	{
		Speed 5;
		BounceSound "Casings/Pistol";
	}
}

class ShellCasing : BulletCasing
{
	Default
	{
		Speed 2;
		BounceSound "Casings/Shell";
	}
}
class BlackShellCasing : ShellCasing {}
class BlueShellCasing : ShellCasing {}
class HighCaliburCasing : BulletCasing
{	
	Default
	{
		Speed 2;
		Scale 0.08; 
		BounceSound "Casings/HighCalibur";
	}
}
class FuelrodCasing : HighCaliburCasing
{	
	Default
	{
		Speed 1;
		Scale 3.0;
		BounceCount 2;
		BounceFactor 0.5;
		BounceSound "Casings/Shell";
	}
}

class CasingSmoke : Actor
{
	Default
	{
		Speed 2;
		+NOINTERACTION;
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.15;
	}
	
	override void Tick()
	{
		super.Tick();
		vel.z += 0.02;
		vel *= 0.87;
		A_SetScale(default.Scale.X * 1.05, default.Scale.Y * 1.05);
	}
	
	States
	{
		Spawn:
			SMKE ABCDEFGHIJKLMNOPQR 3;
		Death:
			SMKE R 1 A_FadeOut(0.07);
		wait;
	}
}

// Clips and Magazines
class DiscardedMagazine : BulletCasing
{
	bool underwater;
	bool bigSplash;
	double gnd_rollvel;
	double gnd_anglevel;
	double gnd_pitchvel;
	vector3 gnd_movedir;
	Sound waterSound;
	
	Property WaterDropSound : waterSound;
	Property IsLargeDebris : bigSplash;
	
	Default
	{
		Speed 2;
		BounceCount 2;
		Scale 25.0;
		Height 5;

		BounceSound "WeaponAmmoDebris/Clip/Bounce";
		DiscardedMagazine.WaterDropSound "WeaponAmmoDebris/Clip/Water";
		DiscardedMagazine.IsLargeDebris false;
		BulletCasing.Smoke false;
	}
	
	override void PostBeginPlay()
	{
		super.PostBeginPlay();
		SetupGroundRoll();
	}
	
	virtual void SetupGroundRoll() {}
	virtual void FinishGroundRoll()
	{
		vel *= 0;
		gnd_rollvel = gnd_pitchvel = gnd_anglevel = 0;
	}
	
	override void Tick()
	{	
		super.Tick();
		
		double stoppedvel = abs(gnd_rollvel)+abs(gnd_pitchvel)+abs(gnd_anglevel);
		if(bNOINTERACTION && stoppedvel > 0.01)
		{
			FLineTraceData lt;
			LineTrace(angle, max(radius*2.0, 16), 0, data:lt);
			if(lt.HitType != TRACE_HitNone)
			{
				FinishGroundRoll();
				return;
			}
			
			Quat input = Quat.FromAngles(gnd_anglevel, gnd_pitchvel, gnd_rollvel);
			facingDir *= input;
			
			vector3 movedir = Quat.FromAngles(angle, 0, 0) * gnd_movedir;
			vel += movedir * (max(gnd_rollvel, gnd_pitchvel, gnd_anglevel) * 0.001 );
			vel *= 0.98;
			if(stoppedvel <= 0.5) FinishGroundRoll();
			
			gnd_rollvel *= 0.98;
			gnd_pitchvel *= 0.98;
			gnd_anglevel *= 0.98;
		}
		else if(bNOINTERACTION)
		{
			vel *= 0.94;
		}
		
		if(waterlevel > 0 && !underwater)
		{
			underwater = true;
			A_StartSound(waterSound, CHAN_AUTO, CHANF_OVERLAP);
			DoSplash();
		}
	}
	
	void DoSplash()
	{
		if(!bigSplash)
			Spawn("BulletSplashSpawner", pos);
		else
			Spawn("LargeSplashSpawner", pos);
	}
	
	virtual void OnLand()
	{
		SetFacingAngles(angle, 0, 90);
	}
	
	States
	{
		Bounce:
			"####" "#" 1 
			{
				RandomizeVelocity(spd:0.5);
				RandomizeAngles(randomAngle: true);
				DoSplash();
				return ResolveState("Spawn");
			}
		wait;
		
		XDeath:
		Death:
		Crash:
			"####" "#" 700 // 20 seconds
			{
				isStatic = true;
				DoSplash();
				OnLand();
			}
		WaitDeath:
			"####" "#" 1 
			{
				double stoppedvel = abs(gnd_rollvel)+abs(gnd_pitchvel)+abs(gnd_anglevel);
				if(stoppedvel <= 0.1)
					A_FadeOut(0.002);
			}
		wait;
	}
}

class Debris_BulldogMagazine : Debris_PlasmaCasterMag
{
	Default
	{
		BounceSound "WeaponAmmoDebris/Bulldog/Bounce";
		DiscardedMagazine.WaterDropSound "WeaponAmmoDebris/Bulldog/Water";
	}
}
class Debris_RocketClip : DiscardedMagazine
{
	Default
	{
		BounceCount 2;
		BounceFactor 0.8;
		Radius 10;
		Scale 50.0;
		DiscardedMagazine.IsLargeDebris true;

		BounceSound "WeaponAmmoDebris/Rocket/Bounce";
		DiscardedMagazine.WaterDropSound "WeaponAmmoDebris/Rocket/Water";
	}
	
	override void SetupGroundRoll()
	{
		gnd_rollvel = frandom[DecoMagRNG](0,10);
		gnd_movedir = (0, -1.0, 0);
	}
}

class Debris_CarbineMagazine : DiscardedMagazine
{
	Default
	{
		Speed 1;
		BounceFactor 0.9;

		BounceSound "WeaponAmmoDebris/Carbine/Bounce";
	}
	
	int smokeTics;
	override void Tick()
	{
		super.Tick();
		double smokeAmt = HaloMath.fmap(max(0, 35-smokeTics), 0, 35, 0, 10);
		if(smokeAmt <= 0) return;
		
		if( !(level.maptime%4) )
		{
			for(int i = 0; i < max(1, smokeAmt * halodoom_effectintensity); i++)
			{
				let smk = PlasmaSmoke_Green(Spawn("PlasmaSmoke_Green", pos));
				if(smk) 
				{
					smk.scaleMod = 0.3;
					smk.vel = (frandom[WeapFX](-1,1),frandom[WeapFX](-1,1),frandom[WeapFX](-1,1)) * 0.2;
				}
			}
			smokeTics++;
		}
	}
}
class Debris_PlasmaCasterMag : DiscardedMagazine
{
	bool noroll;
	
	Default
	{
		Speed 3;
		BounceCount 2;
		BounceFactor 0.5;
		BounceSound "WeaponAmmoDebris/PlasmaCaster/Bounce";
	}
	
	override void SetupGroundRoll()
	{
		if(noroll) return;
		
		gnd_rollvel = frandom[DecoMagRNG](2,15);
		gnd_pitchvel = gnd_rollvel * 0.33;
		gnd_movedir = (0.33, -1.0, 0);
	}
	
	override void OnLand()
	{
		int p = randompick[DecoMagRNG](-90,0,0,0,90);
		noroll = (p != 0);
		SetFacingAngles(angle, p, roll);
	}
}

class Debris_CommandoMagazine : DiscardedMagazine
{
	Default
	{	
		Scale 22.0;
		Height 2;
		BounceSound "WeaponAmmoDebris/Commando/Bounce";
	}
}
class Debris_GPMGMagazine : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/GPMG/Bounce";
	}
	
	override void OnLand()
	{
		SetFacingAngles(angle, 0, randompick[DecoMagRNG](-90,90));
	}	
}
class Debris_MagnumClip : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/Magnum/Bounce";
	}
}
class Debris_NeedlerJavelinMag : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/Javelin/Bounce";
	}
}
class Debris_RifleMagazine : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/Rifle/Bounce";
	}
		
	override void OnLand()
	{
		bool balanced = random[DecoMagRNG](0,100) <= 5; // Lmao
		SetFacingAngles(angle, 0, balanced ? 0 : 90);
	}
}
class Debris_SidekickClip : DiscardedMagazine
{
	Default
	{
		Height 2;
		BounceSound "WeaponAmmoDebris/Sidekick/Bounce";
	}
}
class Debris_SMGMagazine : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/SMG/Bounce";
		Scale 1.0;
	}
	
	override void OnLand()
	{
		double nroll = Normalize180(roll) + 180;
		SetFacingAngles(angle, 0, ceil(nroll / 90.) * 90);
	}
}
class Debris_StanchionMagazine : Debris_RifleMagazine
{
	Default
	{
		Height 2;
		BounceSound "WeaponAmmoDebris/Sniper/Bounce";
	}
}
class Debris_SniperMagazine : Debris_StanchionMagazine {}
class Debris_SpikerClip : DiscardedMagazine
{
	Default
	{
		BounceSound "WeaponAmmoDebris/Spiker/Bounce";
	}
}

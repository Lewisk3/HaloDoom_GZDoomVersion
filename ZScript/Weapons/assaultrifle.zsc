class Halo_AR_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 32;
	}
}

class HaloRifle_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges ARIFLE_RANGE1, ARIFLE_RANGE2;
		HaloProjectile.MinRangeDamage ARIFLE_MINDMG; 
		HaloProjectile.BaseDamage ARIFLE_DMG;
		HaloProjectile.Speed_MPS ARIFLE_BMPS;
		HaloProjectile.HeadshotDMGFactor ARIFLE_HEDMOD;
		Scale 0.5;
	}
}

class DoHelmetAnimation : Inventory
{
	Default
	{
		Inventory.MaxAmount 1;
	}
}

class Halo_AssaultRifle : HaloGun 
{
	const LCD_LLayer = 20;
	const LCD_RLayer = 21;
	const LCD_CLayer = 22;
	vector2 lcd_offs;
	double testang;
	
	Default
	{
		Weapon.SlotNumber 1;
		Obituary "%o was took down by %k's Assault Rifle.";
		Inventory.PickupMessage	"Assault Rifle Acquired.";
		Tag "Assault Rifle";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_Clip";
		Weapon.AmmoType2 "Halo_AR_Clip";
		Weapon.AmmoGive 16;
				
		// Recoil
		HaloGun.Bloom 0.32;
		HaloGun.BloomSpeed 0.24;
		HaloGun.BaseRecoil ARIFLE_RECOIL;
		HaloGun.Inaccuracy ARIFLE_ACCMOD;
		HaloGun.Crosshair "RifleRet", 1.0;
		HaloGun.UIGraphic "WI_AR", 1.0;
		HaloGun.PowerTier P_NORM;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}

	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/Rifle/Fire");
		MarkSound("Halo/Weapons/Rifle/Fire/Bass");
		MarkSound("Halo/Weapons/Rifle/Mech");
		MarkSound("Halo/Weapons/Rifle/Reload/Full");
		MarkSound("Halo/Weapons/Rifle/Reload/Empty");
		MarkSound("Halo/Weapons/Rifle/Select");
	}
	
	action void A_FireRifle()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/Rifle/Fire", 0, true);
		A_WeapSound("Halo/Weapons/Rifle/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloRifle_Bullet", 6);		
		A_SetSFXPos(20,-18,-12);
		A_SpawnSFX("BulletCasing", -90,-20);
		A_SetSFXPos(25,-10,-8);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_TakeAmmo();
		A_UpdateSpread();
	}
	
	action void A_DisableLCD()
	{
		A_Overlay(LCD_LLayer, "LCD_Off");
		A_Overlay(LCD_RLayer, "LCD_Off");
		A_Overlay(LCD_CLayer, "LCD_Off");
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/Rifle/Reload/Full";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/Rifle/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	action void A_LCDOffset(double x, double y)
	{
		invoker.lcd_offs = (x,y);
	}
	
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(
				countinv("DoHelmetAnimation") && 
				CVar.GetCVar("halodoom_dohelmetintro", player).GetBool(), 
				"HelmetAnimation"
			);
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/Rifle/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Chamber");
			}
			HARD ABCDEFG 1 A_DoSelectAnim();
		goto Ready.Active;
		Ready.Chamber:
			TNT1 A 0 A_DoSelectAnim(0, true);
			HRR2 ABCDEFGHIJKLMNOPQRSTUVWX 1;
		Ready.Active:
			HARI A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD);
				A_Overlay(LCD_LLayer, "LCD_AmmoCount.Left");
				A_Overlay(LCD_RLayer, "LCD_AmmoCount.Right");
				A_Overlay(LCD_CLayer, "LCD_Compass");
				A_OverlayFlags(LCD_LLayer, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
				A_OverlayFlags(LCD_RLayer, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
				A_OverlayFlags(LCD_CLayer, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
				A_OverlayScale(LCD_LLayer, 0,0, WOF_ADD);
				A_OverlayScale(LCD_RLayer, 0,0, WOF_ADD);
			}
		loop;
		
		HelmetAnimation:
			TNT1 A 0 
			{
				A_StartSound("Halo/WeaponIntro", flags:CHANF_OVERLAP);
				A_SetHUDVisible(false);
				invoker.handsbusy = true;
			}
			TNT1 A 12;
			HLM1 ABCDEFGHIJK 1;
			HLM1 L 70; // 54
			HLM1 MNOPQRSTUVW 2;
			HLM1 X 35;
			HLM1 YZ 2;
			HLM2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			HLM3 ABCDEFGHIJKLM 1;
			HLM3 N 1 A_RollQuake(2,15,3, true);
			HLM3 OPQRSTUVWX 1;
			HLM3 Y 60; // 37
			TNT1 A 0 A_SetHUDVisible(true);
			HLM3 Z 20; // 35
			HLM4 ABCDE 2;
			HLM4 FGHIJKLMNOPQRSTUVWXYZ 1;
			HLM5 ABCDEFGHIJKLMNO 1;
			HLM5 P 8;
			HLM5 QRSTU 1;
			HLM5 V 4;
			HLM5 WXYZ 1;
			HLM6 A 10;
			HLM6 BCDEFGHIJKLMNO 1;
			TNT1 A 0
			{
				invoker.handsbusy = false;
				TakeInventory("DoHelmetAnimation", 999);
			}
		goto Ready.Active;
		
		Ready.Dryfire:
			HARI A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_DisableLCD();
			HARD GFEDCB 1;
			HARD A 1 A_GunLower();
		wait;
		
		
		//  - 550RPM -
		// 550/60 = ~9.17
		// 35/9.17 = ~4 frames.
		Fire:
			TNT1 A 0 
			{
				A_SetFrame(randompick(0,2));
				return A_GunCheckReload();
			}
			HARF "#" 1 Bright
			{
				A_FireRifle();
				A_RecoilOffset(frandom(-12,12),frandom(3,9),2);
				A_SetRecoil(0.8, 0, 1);
				A_RQuakeEx(1,3,0,3,0,20,"",QF_RELATIVE|QF_WAVE);
				A_LCDOffset(4, 0);
				A_RollQuake(2,10,3, true);
				A_SetFrame(randompick(1,3));
			}
			HARF "#" 1 Bright
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/Rifle/Mech");
			}
			HARF E 1 
			{
				A_SetRecoil(-0.1, 0, 3);
				A_RecoilOffset(0,0,2);
				A_LCDOffset(8, 2);
			}
			HARF F 1 A_LCDOffset(0, 0);
		goto Ready.Active;
		
		// Ammo 10s count
		LCD_AmmoCount.Left:
			LCDL "#" 1 
			{
				A_SetFrame(floor(countinv(invoker.AmmoType2)/10.), LCD_LLayer);
				A_FollowRotatedPos(LCD_LLayer, PSP_WEAPON, (30,0));
				A_FollowRotation(LCD_LLayer, PSP_WEAPON);
				A_OverlayOffset(LCD_LLayer, invoker.lcd_offs.x, invoker.lcd_offs.y, WOF_ADD);
			}
		loop;
		// Ammo 1s count
		LCD_AmmoCount.Right:
			LCDR "#" 1 
			{
				A_SetFrame(floor(countinv(invoker.AmmoType2)%10.), LCD_RLayer);
				A_FollowRotatedPos(LCD_RLayer, PSP_WEAPON, (30,0));
				A_FollowRotation(LCD_RLayer, PSP_WEAPON);
				A_OverlayOffset(LCD_RLayer, invoker.lcd_offs.x, invoker.lcd_offs.y, WOF_ADD);
			}
		loop;
		
		// Compass 
		LCD_Compass:
			LCDC A 1
			{
				A_FollowRotatedPos(LCD_CLayer, PSP_WEAPON, (40,0));
				A_OverlayPivotAlign(LCD_CLayer, PSPA_CENTER, PSPA_CENTER);
				A_OverlayPivot(LCD_CLayer, 0, 0.18);
				A_OverlayRotate(LCD_CLayer, angle-90, WOF_INTERPOLATE);
				A_OverlayOffset(LCD_CLayer, invoker.lcd_offs.x, invoker.lcd_offs.y, WOF_ADD);
			}
		loop;
		
		LCD_Off:
			TNT1 A 1;
		stop;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_DisableLCD();
			TNT1 A 0 A_ReloadSound();
			HRR1 ABCDE 1 A_SetRecoil(0.7, 0, 1);
			HRR1 FGHIJ 2;
			HRR1 KLMNOPQRS 2;
			HRR1 T 2 A_SetRecoil(0.6, 0.8, 1);
			HRR1 "UVWXYZ[]" 2;
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Reload.Bolt");
		Reload.Tactical:
			HRR3 ABC 2;
			HRR3 D 2 A_SetRecoil(-0.7, 0, 2);
			TNT1 A 0 A_ReloadClip();
			HRR3 EFGH 1;
			HRR3 IJK 2;
		goto Ready.Active;
		Reload.Bolt:
			HRR2 ABCDEF 2;
			HRR2 G 2 A_SetRecoil(-1.0, 0.4, 4);
			HRR2 HIJKLMNOPQRST 2;
			HRR2 UVWX 1;
			TNT1 A 0 A_ReloadClip();
		goto Ready.Active;
		
		Spawn:
			ARFL A -1;
		stop;
	}
}
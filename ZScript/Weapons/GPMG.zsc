class Halo_GPMG_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 50;
	}
}
class Halo_GPMG_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 25;
		Inventory.MaxAmount 200;
		Inventory.Icon "HLAMO0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 25 Rounds for the GPMG";
		
		Ammo.BackpackMaxAmount 200;
	}
	
	States
	{
		Spawn:
			HLAM O -1 Bright;
		stop;
	}
}

class HaloGPMG_Bullet : HaloBullet 
{
	bool explosiveAmmo;
	Property IsExplosive : explosiveAmmo;

	Default
	{
		HaloProjectile.SetRanges GPMG_RANGE1, GPMG_RANGE2;
		HaloProjectile.MinRangeDamage GPMG_MINDMG; 
		HaloProjectile.BaseDamage GPMG_DMG;
		HaloProjectile.Speed_MPS GPMG_BMPS;
		HaloProjectile.HeadshotDMGFactor GPMG_HEDMOD;
		HaloProjectile.RicochetChance 0;
		HaloGPMG_Bullet.IsExplosive true;
		Scale 1.3;
	}
	
	States
	{
		XDeath:
		Death:
			MODL A 2 
			{
				if(explosiveAmmo)
					Spawn("GPMGBulletExplosion", pos);
			}
		stop;
	}
}

class GPMGBulletExplosion : CheapActor
{	
	Default
	{
		Scale 0.5;
		Alpha 0.8;
		Damage 0;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				let splash = Spawn("LargeSplashSpawner", pos);
				if(splash) splash.A_SetScale(splash.Scale.X * 2.0);
				
				let sparks = Spawn("ImpactSparks", pos);
				if(sparks) sparks.A_SetScale(0.35);
				
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+20));
				if(flare) flare.A_SetScale(0.35);
				HaloMath.ExplodeEx(self, 32, 128, damageBosses:false, infiniteHeight:false);
			}
			SX04 ABCD 1 Bright;
			TNT1 A 0 
			{
				vector3 fxpos = (pos.xy, pos.z+40);
				HaloMath.SpawnFX("FragGrenade_FlyingExplosion", fxpos, angle, random[GPMGExplosionRNG](1,3), 10, 20, 180,45, 25);
			}
			SX04 EFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}

class Halo_GPMG : HaloGun 
{	
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 5;
		Obituary "%o was turned into flesh cheese by %k's GPMG.";
		Inventory.PickupMessage	"M247 General Purpose Machine Gun";
		Tag "M247 GPMG";
		Weapon.BobSpeed 2.0;
		Weapon.BobRangeX 0.80;
		Weapon.AmmoType1 "Halo_GPMG_Reserves";
		Weapon.AmmoType2 "Halo_GPMG_Clip";
		Weapon.AmmoGive 50;
		HaloGun.Faction "Human";
				
		// Recoil
		HaloGun.Bloom 0.12;
		HaloGun.BloomSpeed 0.25;
		HaloGun.BaseRecoil GPMG_RECOIL;
		HaloGun.Inaccuracy GPMG_ACCMOD;
		HaloGun.Crosshair "TurRet", 0.7; // lmao look at me, I'm soo punny with names :P
		HaloGun.UIGraphic "WI_GPMG", 0.4, 0.4;
		HaloGun.SetupUIAmmo "WI_AMMO", 12.5, 12.5, 0, 9;
		HaloGun.UIAmmo_Scale_Offset 1.0, 0, -10;

		HaloGun.PowerTier P_POWER;
		HaloGun.Rarity 50;
		
		RecoilWeapon.YOffsetRange -4, 40;
	}
	
	override int GetPowerTier()
	{	
		if(HaloPlayer.IsGameType("HL2")) return P_STRONG;
		return super.GetPowerTier();
	}
	
	/*
	override void GetStatsLore(out Array<String> stats, out string lore)
	{
		stats.Push("M247 HE Heavy Machine Gun");
		stats.Push("Ammo Type: 20mm HE Rounds");
		stats.Push("Frame: Side Loading Heavy Machine Gun");
		stats.Push("Feed System: 50 Round Side Loading Box Magazine");	
		stats.Push(String.Format("Base Damage: %d", GMPG_DMG));
		
		lore = (
			"The M247 HE Heavy Machine Gun is an Anti-Vehicle Variant "
			"of the M247 GPMG which was a reliable weapon to the UNSC for years. "
			"It entered service in 2555 when the UNSC was in need of a portable "
			"anti-armor Machine Gun. It fires 20mm High Explosive Rounds "
			"designed for eliminating light armored vehicles, and heavy infantry. "
			"The explosive core contained in the 20mm rounds is more than enough "
			"fire power to put any ghost or hunter in their rightful place in this world. "
			"Due to it's ammunition type, the M247's fire rate and capacity is "
			"greatly reduced, both to reduce weight, and minimize explosive "
			"yeild in the event of a catastrophic ammunition cook off. "
			"The M247 is often seen as either a stationary gun, or weilded by Spartans. "
		);
	}
	*/

	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/GPMG/Fire");
		MarkSound("Halo/Weapons/GPMG/Fire/Bass");
		MarkSound("Halo/Weapons/GPMG/Mech");
		MarkSound("Halo/Weapons/GPMG/Reload");
		MarkSound("Halo/Weapons/GPMG/Reload/Empty");
		MarkSound("Halo/Weapons/GPMG/Draw");
	}
	
	action void A_FireGPMG()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/GPMG/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/GPMG/Fire/Bass", CHANF_OVERLAP, true);
		
		vector3 hitPos;
		Actor proj;
		[hitPos, proj] = A_ShootProjectile("HaloGPMG_Bullet", 11);
		
		if(proj) 
		{	
			// This is honestly annoying, I'll be very happy once 4.11 
			// adds let [v1, v2] = func(); syntax.
			let bullet = HaloGPMG_Bullet(proj);
			bullet.explosiveAmmo = !HaloPlayer.IsGameType("HL2");
		}
		
		A_SetSFXPos(20,-18,-12);
		A_SpawnSFX("HighCaliburCasing", -90,-20);
		A_SetSFXPos(25,-10,-8);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_TakeAmmo();
		A_UpdateSpread();
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/GPMG/Reload";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/GPMG/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	States
	{	
		Ready:
			TNT1 A 0 A_JumpIf(!A_DoFullSelectAnimation(), "Ready.Chambered");
			TNT1 A 4 A_WeapSound("Halo/Weapons/GPMG/Draw");
			WVS1 ABCDEFGHIJJJJJKKLLMMNNOPQQQRRRSSSTTT 1 A_DoSelectAnim(-5, true);
		goto Ready.Active;
		Ready.Chambered:
			TNT1 A 0 A_WeapSound("Halo/Weapons/GPMG/Draw");
			WVD1 NMLKJIHGFEDCBA 1 A_DoSelectAnim(-5);
		Ready.Active:
			WVG1 A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
			
		Ready.Dryfire:
			WVG1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			WVD1 ABCDEFGHIJKLM 1;
			WVD1 N 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_GunCheckReload();
			TNT1 A 0 A_JumpIf(HaloPlayer.IsGameType("HL2"), "Fire.Faster");
			WVF1 A 1 A_SetZoom(0.95, 2);
			WVF1 B 1 Bright
			{
				A_RecoilOffset(0,10,3);
				A_SetRecoil(1.42, 0, 1);
				A_RQuakeEx(4,2,1,3,0,20,"",QF_RELATIVE|QF_WAVE|QF_SCALEDOWN);
				A_RollQuake(2,10,1);
				A_FireGPMG();
			}
			WVF1 C 1
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/GPMG/Mech");
				A_RecoilOffset(0,0,3);
			}
			WVF1 CDE 1 
			{
				A_SetZoom(1.0, 3);
				A_RecoilOffset(0,0,3);
			}
		goto Ready.Active;
		
		Fire.Faster:
			WVF1 A 0 A_SetZoom(0.97, 2);
			WVF1 B 1 Bright
			{
				A_RecoilOffset(0,5,3);
				A_SetRecoil(1.1, 0, 1);
				A_RQuakeEx(4,2,1,3,0,20,"",QF_RELATIVE|QF_WAVE|QF_SCALEDOWN);
				//A_RollQuake(2,10,1);
				A_FireGPMG();
			}
			WVF1 C 1
			{
				A_Light(0);
				A_MechanismSound("Halo/Weapons/GPMG/Mech");
				A_RecoilOffset(0,0,3);
			}
			WVF1 DE 1 
			{
				A_SetZoom(1.0, 3);
				A_RecoilOffset(0,0,3);
			}
		goto Ready.Active;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ReloadSound();
			WVR1 ABCDE 2;
			WVR1 F 8;
			WVR1 G 2 
			{
				A_SetRecoil(0, -2.5, 1);
				A_SetSFXPos(10,-5,-20);
				if(!CountReloadAmmo()) A_SpawnSFX("Debris_GPMGMagazine", 0, 60);
			}
			WVR1 HIJKL 1;
			WVR1 M 12;
			WVR1 NOPQRSTUVWX 2;
			WVR1 Y 2 
			{
				A_SetRecoil(0, 1.2, 1);
				A_ReloadClip();
			}
			WVR1 Z 2;
			WVR2 AB 2;
			TNT1 A 0 A_JumpIf(CountReloadAmmo(), "Ready.Active");
		Reload.Empty:
			WVR2 B 12;
			WVR2 CDEFGHIJK 1;
			WVR2 L 4;
			WVR2 M 1 A_SetRecoil(-0.87, 0.23, 1);
			WVR2 NO 1;
			WVR2 P 4; 
			WVR2 Q 1 A_SetRecoil(0.87, -0.23, 1);
			WVR2 RSTUVWX 1;
		goto Ready.Active;
		
		Spawn:
			WVP1 A -1;
		stop;
	}
}

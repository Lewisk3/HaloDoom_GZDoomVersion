class Halo_GravityHammer_Battery : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 100;
	}
}

class GravityHammerExplosion : CheapActor
{
	Default
	{
		Scale 1.0;
		Alpha 0.8;
		RenderStyle "Add";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				let sparks = Spawn("ImpactSparks", pos);
				if(sparks) sparks.A_SetScale(2.0);
				
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+30));
				if(flare)
				{
					flare.A_SetRenderStyle(1.0, STYLE_AddShaded);
					flare.SetShade(0xFF18B4ED);
					flare.A_SetScale(0.75);
				}
				
				A_QuakeEx(2,2,2,10,0,1024);
			}
			SX04 ABCD 1 Bright;
			TNT1 A 0 
			{
				vector3 fxpos = (pos.xy, pos.z+40);
				 HaloMath.SpawnFX("FragGrenade_FlyingExplosion", fxpos, angle, random(15,25), 10, 20, 180,45, 10);
			}
			SX04 EFGHIJKLMNOPQ 1 Bright
			{
				if(!(frame%3))
				{
					for(int i = 0; i < 8; i++)
					{
						vector2 biriView = (
							frandom( 0,1) * 360,
							frandom(-1,1) * 90
						);
						vector3 posOffs = (
							frandom(-1,1),
							frandom(-1,1),
							frandom(-0.25,0.25)
						) * 30;
						
						vector3 spawnpos = level.Vec3Offset(pos, posOffs);
						BiriBiri.DoLightning(spawnpos, biriView, dist:100, stepsize:1.0, strength:20.0, 10, 30, 0);
					}
				}
			}
		stop;
	}
}

class GravityHammerField : RepulsorField
{
	Default
	{
		Mass 3000; // Think of it as a whitehole; its negative mass affects the pushback force. 
		RepulsorField.GravityConstant 0.06;
		RepulsorField.FieldSize 128.;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 2
			{
				Spawn("FX_Shockwave", pos);
				HaloMath.ExplodeEx(self, 400, 128, 1.0, damagetype:"Crush");
				let expl = Spawn("GravityHammerExplosion", pos);
			}
		Repulse:
			TNT1 AAAAAAAA 1 A_DoRepulse();
		stop;
	}
}

class Halo_GravityHammer : HaloGun
{
	bool swinging;

	Default
	{
		Height 127;
		Weapon.SlotNumber 5;
		Obituary "%o was turned into a viscous red jelly by %k's Gravity Hammer.";
		Inventory.PickupMessage	"Picked up the Type-2 Gravity Hammer.";
		Tag "Gravity Hammer";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_GravityHammer_Battery";
		Weapon.AmmoType2 "Halo_GravityHammer_Battery";
		Weapon.AmmoGive 100;
		HaloGun.HasBattery true, 5;
				
		// Recoil
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.15;
		HaloGun.BaseRecoil 0;
		HaloGun.Inaccuracy 0;
		HaloGun.Crosshair "GHAMRet", 1.0;
		HaloGun.UIGraphic "WI_GHAM", 1.0;
		HaloGun.PowerTier P_MELEE;
		
		RecoilWeapon.YOffsetRange -10, 1000;
	}
	
	action void A_MuzzleLightning(int amt = 10, vector2 posoffs = (0,0))
	{
		/*
		A_SetSFXPos(20,-35,8);
		vector2 view;
		for(int i = 0; i < amt; i++)
		{
			view.x = angle + frandom(-90,90);
			view.y = pitch + frandom(-35,35);
			BiriBiri.DoLightning(invoker.sfx_pos, view, dist:50, 0.5, 20.0, 10.0, 30, 0);
		}*/
		
		uint boltlen = 100;
		vector2 muzzlePos = (280,20) + posoffs;
		DoSpriteLightning(
			amt,
			frandom(-180,180), muzzlePos, boltlen:boltlen, 
			stepsize:2.5, roughness:14
		);
	}
		
	action bool A_FireHammer(double range = 128)
	{	
		let plr = HaloPlayer(self);
		if(!plr) return false;
		
		if( HaloMath.Distance3D((pos.xy, player.viewz), plr.aimpos) > range )
			return false;
		
		A_WeapSound("Halo/Weapons/GravityHammer/Fire", 0, true);
		A_WeapSound("Halo/Weapons/GravityHammer/Fire/Bass", CHANF_OVERLAP, true);
		A_TakeAmmo(5);
				
		let field = Spawn("GravityHammerField", plr.aimpos);
		if(field) field.target = self;
		return true;
	}
	
	States
	{
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/GravityHammer/Select");
			GHMS FEDCBA 1 A_DoSelectAnim(-5);
		Ready.Active:
			GHMI A 1 A_HaloWeaponReady(0);
		loop;
		
		Ready.Dryfire:
			GHMI A 12;
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			GHMS ABCDEF 1;
			GHMS F 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			TNT1 A 0 A_SetRecoil(1.0, 0.76, 15);
			GHMF ABCDEEE 2;
			GHMF FGH 2;
			GHMF IJ 1;
			GHMF K 1 
			{
				A_Overlay(10, "SwingCheck");
				A_RecoilOffset(-5,5,2);
				A_SetRecoil(-6, -2, 6);
			}
			GHMF LM 1 A_RecoilOffset(-10,8,2);
			GHMF N 1 A_RecoilOffset(-30,20,2);
			GHMF O 8 A_RecoilOffset(-40,300,6);
			TNT1 A 10 A_SetZoom(1.0, 6);
			TNT1 A 0 A_RecoilOffset(0,0,2);
			GHMS FEDCBA 2;
			GHMI A 1;
		goto Ready.Active;
		
		MuzzleBiris: 
			TNT1 A 35;
			TNT1 AAAAAAAAAAAAAAAAAAAAAAA 5 A_MuzzleLightning();
		stop;
		
		SwingCheck:
			TNT1 AAAAAAAAAAAA 1 A_JumpIf(A_FireHammer(), "SwingHit");
		stop;
		SwingHit:
			TNT1 A 1 
			{
				A_SetFlashColor("White", 0.78);
				A_Overlay(60, "MuzzleBiris");
				A_SetZoom(0.80, 4);
				A_RollQuake(4, 40, 2);
				A_RQuakeEx(2,3,2,15,0,20,"",QF_RELATIVE);
			}
		stop;
		
		Spawn:
			HMRF A -1;
		stop;
	}
}

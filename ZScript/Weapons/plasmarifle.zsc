class Halo_PlasmaRifle_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 100;
	}
}

class HaloPlasmaRifle_Proj : HaloPlasma_Proj
{
	Default
	{
		HaloProjectile.SetRanges PLASMARIFLE_RANGE1, PLASMARIFLE_RANGE2; 
		HaloProjectile.MinRangeDamage PLASMARIFLE_MINDMG; 
		HaloProjectile.BaseDamage PLASMARIFLE_DMG; 
		HaloProjectile.Speed_MPS  PLASMARIFLE_BMPS;
		HaloProjectile.HeadshotDMGFactor PLASMARIFLE_HEDMOD;
		HaloProjectile.SplashSpawner "PlasmaSplashSpawner";
		
		RenderStyle "Add";
		Translation "0:255=@65[10,8,240]";
		Alpha 0.90;
		Scale 0.12;
		DamageType "Plasma";
	}
	
	States
	{
		Death:
		XDeath:
		Crash:
			TNT1 A 1 
			{	
				HaloMath.ParticlesFX(self, "Blue", 30, 3, 10);
				A_DoLightning(4);
			}
		stop;
	}
}

class Halo_PlasmaRifle : HaloGun
{
	const LCD = 22;
	double firespeed;
	double lcd_offspd;
	vector2 lcd_offs, lcd_offs_real;
	
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 4;
		Obituary "%o got the boomer shooter treatment by %k's Plasma Rifle.";
		Inventory.PickupMessage	"Picked up the Type-25 Plasma Rifle.";
		Tag "Plasma Rifle";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_PlasmaRifle_Clip";
		Weapon.AmmoType2 "Halo_PlasmaRifle_Clip";
		Weapon.AmmoGive 100;
		HaloGun.HasBattery true, 1;
		HaloGun.Faction "Covenant";
		
		HaloGun.PowerTier P_ENERGY | P_NORM;
		HaloGun.Rarity 60;
				
		// Recoil
		HaloGun.Bloom 0.16;
		HaloGun.BloomSpeed 0.30;
		HaloGun.BaseRecoil PLASMARIFLE_RECOIL;
		HaloGun.Inaccuracy PLASMARIFLE_ACCMOD;
		HaloGun.Crosshair "PlsRRet", 0.75;
		HaloGun.UIGraphic "WI_PRFLE", 0.4, 0.4;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
		
	action void A_FireHaloPlasma(bool useammo = true, bool bottom = false)
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/PlasmaRifle/Fire", 0, true);
		A_WeapSound("Halo/Weapons/PlasmaRifle/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloPlasmaRifle_Proj", 12, bottom ? -10 : 0);
		invoker.heat += 0.03;
		invoker.firespeed += 0.10;
		if(useammo) A_TakeAmmo(1, false);
		A_UpdateSpread();
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		heat = clamp(heat, 0, 1.5);
		
		firespeed = clamp(firespeed, 0, 2);
		lcd_offspd = clamp(lcd_offspd, 0.01, 1.0);
		lcd_offs_real.x = HaloMath.Lerp(lcd_offs_real.x, lcd_offs.x, lcd_offspd); 
		lcd_offs_real.y = HaloMath.Lerp(lcd_offs_real.y, lcd_offs.y, lcd_offspd);
		
	}
	
	action void A_DisableLCD()
	{
		A_Overlay(LCD, "LCD_Off");
		A_Overlay(LCD+1, "LCD_Off");
	}
	
	action void A_LCDOffset(double x, double y, double spd = 1.0)
	{
		invoker.lcd_offs = (x,y);
		invoker.lcd_offspd = spd;
	}
		
	States
	{
		Ready:
			TNT1 A 0 
			{	
				A_WeapSound("Halo/Weapons/PlasmaRifle/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Pickup");
			}
			PSRD JIHGEDCBA 1 A_DoSelectAnim();
		goto Ready.Active;
		Ready.Pickup:
			PSRS ABCDEFGHIJKLMNOPQRS 1 A_DoSelectAnim(0, true);
		Ready.Active:
			PSRI A 1 
			{
				if(A_CheckInScope()) 
					A_LCDOffset(-15,0);
				else
					A_LCDOffset(0,0);

				invoker.heat *= 0.96;
				invoker.firespeed *= 0.75;
				A_HaloWeaponReady(0);
				A_Overlay(LCD, "LCD_HeatLow");
				A_Overlay(LCD+1, "LCD_HeatHigh");
				
				uint flags = PSPF_FORCEALPHA|PSPF_ALPHA|PSPF_ADDWEAPON|PSPF_ADDBOB;
				A_OverlayFlags(LCD,  flags, true);
				A_OverlayFlags(LCD+1, flags, true);
			}
		loop;
		
		Ready.Dryfire:
			PSRI A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_DisableLCD();
			PSRD ABCDEFGHI 1;
			PSRD J 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_JumpIf(invoker.heat >= 1.0, "Overheat");
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			TNT1 A 0 A_SetFrame(randompick(1,3));
			PSRF "#" 2 Bright
			{
				A_FireHaloPlasma(bottom:(A_GetFrame() >= 3));
				A_SetRecoil(0.25, 0, 2);
				A_RecoilOffset(frandom[WeapFX](-4,4),frandom[WeapFX](3,9),2);
				A_RollQuake(2,8,1);
				A_RQuakeEx(2,2,1,3,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			PSRI A 1 
			{
				A_SetFrameTics(3 - invoker.firespeed);
				A_Light(0);
			}
			PSRF "#" 2 Bright
			{	
				A_SetFrame(A_GetFrame()+1);
				A_FireHaloPlasma(false, (A_GetFrame() >= 3));
				A_SetRecoil(0.25, 0, 2);
				A_RollQuake(2,8,1);
				A_RQuakeEx(2,2,1,3,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RecoilOffset(frandom[WeapFX](-4,4),frandom[WeapFX](3,9),2);
			}
			PSRI A 1 
			{
				A_SetFrameTics(3 - invoker.firespeed);
				A_Light(0);
			}
		Hold:
			PSRI A 1 A_ReFire("Fire");
			TNT1 A 0 A_DisableLCD();
			PSRF FGHIJ 1;
		goto Ready.Active;
		
		Overheat:
			PSRR A 1;
			TNT1 A 0 
			{
				A_DisableLCD();
				invoker.handsbusy = true; // Disable hand actions while overheating.
				A_WeapSound("Halo/Weapons/PlasmaRifle/Overheat", CHANF_OVERLAP);
			}
			PSRR BCDEFGH 1; 
			TNT1 A 0 A_RQuakeEx(2,2,0,12,0,20,"");
			PSRR IJKLMNOPQRSTUVWWWWWWXYZ 2 
			{
				for(int i = 0; i < floor(4 * halodoom_effectintensity); i++) 
				{
					A_SetSFXPos(25, -20 + frandom[WeapFX](-8,8), -10 + frandom[WeapFX](-10,10));
					A_SpawnSFX("MuzzleSmoke", 0,0);
				}
				invoker.heat -= 0.07;
			}
			PSR2 ABCDEFGH 1;
			TNT1 A 0 
			{
				invoker.heat = 0;
				invoker.firespeed = 0;
				invoker.handsbusy = false; // Enable hand actions.
			}
		goto Ready.Active;
		
		// Weapon Status 
		LCD_HeatLow:
			PSRL A 1 Bright
			{
				A_FollowRotation(OverlayID(), PSP_WEAPON, -0.05);
				A_OverlayAlpha(OverlayID(), 1.0 - invoker.heat);
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (50,50));
				A_OverlayOffset(OverlayID(), invoker.lcd_offs_real.x, invoker.lcd_offs_real.y, WOF_ADD);
			}
		loop;
		LCD_HeatHigh:
			PSRL B 1 Bright
			{
				A_FollowRotation(OverlayID(), PSP_WEAPON, -0.05);
				A_OverlayAlpha(OverlayID(), invoker.heat);
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (50,50));
				A_OverlayOffset(OverlayID(), invoker.lcd_offs_real.x, invoker.lcd_offs_real.y, WOF_ADD);
			}
		loop;
		
		LCD_Off:
			TNT1 A 1;
		stop;
		
		Spawn:
			PRSF A -1;
		stop;
	}
}

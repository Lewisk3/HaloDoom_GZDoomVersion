class Halo_Needler_Mag : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 20;
	}
}
class Halo_Needler_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;
		
		Inventory.Amount 20;
		Inventory.MaxAmount 80;
		Inventory.Icon "HLAMI0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 20 Rounds for the Needler";
		
		Ammo.BackpackMaxAmount 120;
	}
	
	States
	{
		Spawn:
			HLAM I -1 Bright;
		stop;
	}
}


class HaloNeedler_Proj : HaloNeedleProjectile 
{
	Default
	{
		Scale 0.25;
		HaloSlowProjectile.Speed_MPS NEEDLER_BMPS;
		HaloSlowProjectile.ConvergeToAim false;
		
		HaloNeedleProjectile.NeedleDamages NEEDLER_DMG, NEEDLER_EXPDMG; // Hit, Explode
		HaloNeedleProjectile.ExplodeDelay NEEDLER_EXPDELAY;	 // In tics
		HaloNeedleProjectile.ExplodeCount NEEDLER_COMBINEAMT; 
		Translation "0:255=@70[128, 17, 247]";
	}
}

class Halo_Needler : HaloGun 
{
	const Layer_Needles = 20;
	vector2 needles_offs;
	Actor meleeHit; // reference hit actor on melee.
	
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 4;
		Obituary "%o was super-combined by %k's Needler.";
		Inventory.PickupMessage	"Picked up the Type-33 Needler.";
		Tag "Needler";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_Needler_Reserves";
		Weapon.AmmoType2 "Halo_Needler_Mag";
		Weapon.AmmoGive 80;
		HaloGun.Faction "Covenant";
		
		HaloGun.PowerTier P_NORM;
				
		// Recoil
		HaloGun.Bloom 0.32;
		HaloGun.BloomSpeed 0.24;
		HaloGun.BaseRecoil 1.5;
		HaloGun.Inaccuracy 7;
		
		HaloGun.Crosshair "NedleRet", 1.0;
		HaloGun.UIGraphic "WI_NEDL", 0.6, 0.45;
		HaloGun.SetupUIAmmo "WI_AMM4", 12, 14, 0, 10;
		
		RecoilWeapon.YOffsetRange 0, 40;
	}
	
	override void MarkPrecacheSounds()
	{
		MarkSound("Halo/Weapons/Needler/Fire");
		MarkSound("Halo/Weapons/Needler/Fire/Bass");
		MarkSound("Halo/Weapons/Needler/Mech");
		MarkSound("Halo/Weapons/Needler/Reload/Full");
		MarkSound("Halo/Weapons/Needler/Reload/Empty");
		MarkSound("Halo/Weapons/Needler/Select");
	}
	
	action void A_FireNeedler()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/Needler/Fire", 0, true);
		A_WeapSound("Halo/Weapons/Needler/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloNeedler_Proj", 6);		
		A_TakeAmmo();
		A_UpdateSpread();
	}
	
	action void A_HideNeedles()
	{
		A_Overlay(Layer_Needles, "Needles_Off");
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/Needler/Reload/Full";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/Needler/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	action void A_NeedleOffset(double x, double y)
	{
		invoker.needles_offs = (x,y);
	}
	
	bool CanNeedleMelee()
	{
		int loadedAmmo = Owner.countinv(AmmoType2);
		return loadedAmmo >= 12;
	}
	
	override bool CheckDoKick(bool reloading)
	{
		if(handsbusy || reloading || !CanNeedleMelee()) return true;
		
		CallMeleeState("DoMelee", true);
		return false;
	}
	
	States
	{
		Ready:
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/Needler/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Pickup");
			}
			NDLS ABCDEFGHIJKLM 1 A_DoSelectAnim();
		goto Ready.Active;
		Ready.Pickup:
			TNT1 A 0 A_DoSelectAnim(0, true);
			NDLS ABCDEFGHIJKLMNOPQRSTU 1;
		Ready.Active:
			NDLI A 1
			{
				if(A_CheckInScope()) 
					A_NeedleOffset(3,-5);
				else
					A_NeedleOffset(0,0);

				A_HaloWeaponReady(WRF_ALLOWRELOAD);
				A_Overlay(Layer_Needles, "Needles_On");
				A_OverlayFlags(Layer_Needles, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
			}
		loop;
		
		Ready.Dryfire:
			NDLI A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_HideNeedles();
			NDLS GFEDCB 1;
			NDLS A 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_GunCheckReload();
			NDLF B 1 Bright
			{
				A_FireNeedler();
				A_SetRecoil(0.8, 0, 1);
				A_RollQuake(2,10,1);
				A_RQuakeEx(2,3,2,2,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			NDLF C 1 Bright
			{
				A_Light(0);
				A_NeedleOffset(10, 5);
			}
			NDLF D 1 
			{
				A_NeedleOffset(24, 14);
				A_SetRecoil(-0.1, 0, 3);
				A_RecoilOffset(0,0,2);
			}
			NDLF E 1 A_NeedleOffset(10, 5);
			TNT1 A 0 A_ReFire();
			NDLF F 1 A_NeedleOffset(0, 0);
		goto Ready.Active;
		
		
		// Needles Count 
		Needles_On:
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Needles_NoAmmo");
			NEDL "#" 1 Bright
			{
				A_SetFrame(clamp(CountLoadedAmmo()-1, 0, 19), OverlayID());
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (70,0), 1);
				A_FollowRotation(OverlayID(), PSP_WEAPON);
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				A_OverlayOffset(OverlayID(), invoker.needles_offs.x, invoker.needles_offs.y, WOF_ADD);
				A_OverlayRenderstyle(OverlayID(), STYLE_Add);
			}
		loop;
		
		Needles_NoAmmo:
			TNT1 A 1;
		loop;
		
		Needles_Off:
			TNT1 A 1;
		stop;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_HideNeedles();
			TNT1 A 0 A_ReloadSound();
			TNT1 A 0 A_JumpIf(CountLoadedAmmo(), "Reload.Tactical");
			NDR1 ABCDEFGHIJKLMNOPQRS 1;
			NDR1 TU 1 A_SetRecoil(-1.75, 0, 2);
			NDR1 VW 1;
			TNT1 A 0 A_GotoState("Reload.Finish"); // Fix for backpack reload logic.
		
		Reload.Tactical:
			NDR3 ABCDEFGHIJKLMNOPQRS 1;
			NDR3 TU 1 A_SetRecoil(-1.75, 0, 2);
			NDR3 VW 1;
			TNT1 A 0 A_GotoState("Reload.Finish"); // Fix for backpack reload logic.
		
		Reload.Finish:
			TNT1 A 0 A_ReloadClip();
			NDR1 XYZ 1;
			NDR2 ABCDEFGHIJ 1;
			NDR2 K 1 A_SetRecoil(1.75, 0, 2);
			NDR2 LMNO 1;
			NDR2 P 1 A_SetRecoil(-2.5, 0, 2);
			NDR2 QRSTUVWX 1;
		goto Ready.Active;
		
		DoMelee:
			"####" "#" 1 
			{
				let meleeBash = ResolveState("DoMelee.Needles");
				let psp = player.GetPSprite(PSP_WEAPON);
				if(psp) psp.SetState(meleeBash);
			}
		stop;
		
		DoMelee.Needles:
			"####" "#" 0 A_JumpIf(!invoker.CanNeedleMelee(), "DoMelee.Normal");
			"####" "#" 1; // This is needed to ensure this state is actually completely set.
			TNT1 A 0 
			{
				A_HideNeedles();
				invoker.handsbusy = true;
				A_StartSound("Halo/Weapons/Needler/Melee", CHAN_AUTO, CHANF_OVERLAP);
			}
			TNT1 A 0 A_SetRecoil(0.5, 0, 8);
			NDRM ABCDEFGG 1;
			NDRM HIJKL 1
			{
				A_AddRecoil(-1.25, 0, 1);
				//HaloGun.CallTryMelee(self); // Makes Parrying attacks more responsive.
				
				if(!invoker.meleeHit)
				{
					invoker.meleeHit = A_HaloMelee(40, 50, hitsnd:"Halo/Melee/NeedlerHit", "", allowParry:false);
					if(invoker.meleeHit)
					{
						A_RQuakeEx(4,4,4,8,0,50,"", QF_SCALEDOWN);
						invoker.meleeHit.TriggerPainChance("Needles", true);
						invoker.meleeHit.freezetics = 30;
					}
				}
			}
			NDRM L 1 A_JumpIf(!invoker.meleeHit || invoker.meleeHit.health <= 0, "DoMelee.Finish");
			TNT1 A 0 
			{
				let haloplr = HaloPlayer(self);
				if(invoker.meleeHit && haloplr)
				{
					vector3 meleePos = (
						invoker.meleeHit.pos.xy, 
						invoker.meleeHit.z + (invoker.meleeHit.height )
					);
					haloplr.LookAtPoint(meleePos);
				}
			}
			NDRM N 2 A_SetViewRoll(viewroll - 2.0, SPF_INTERPOLATE);
			NDRM M 2 A_SetViewRoll(viewroll + 2.0, SPF_INTERPOLATE);
			NDRM O 2 A_SetViewRoll(viewroll + 2.0, SPF_INTERPOLATE);
			TNT1 A 0 
			{
				A_SetViewRoll(viewroll - 2.0, SPF_INTERPOLATE);
				if(invoker.meleeHit.health > 0)
				{
					A_TakeAmmo(12);
					
					let haloplr = HaloPlayer(self);
					if(haloplr) haloplr.StopLookingAtPoint();
					
					Actor whyGZDoom; vector3 _spawnPos;
					[_spawnPos, whyGZDoom] = A_ShootProjectile("HaloNeedler_Proj", 6);
					let proj = HaloNeedler_Proj(whyGZDoom);
		
					if(proj) 
					{
						proj.force_explosion = true;
						proj.explodedelay = 35;
						proj.maxLifetime = 8;
					}
				}
			}
			NDRM P 2;
			TNT1 A 0 
			{
				invoker.meleeHit.vel += HaloMath.VecFromAngles(angle, pitch, 8, precise:true);
				invoker.CallKickState("DoKick", force:true);
			}
		DoMelee.Finish:
			NDRM QQQRST 1;
			NDRM U 1
			{
				let haloplr = HaloPlayer(self);
				if(haloplr) haloplr.StopLookingAtPoint();
				
				if(invoker.meleeHit) invoker.meleeHit.freezetics = 0;
				invoker.meleeHit = NULL;
				invoker.handsbusy = false;
			}
		goto Ready.Active;
		
		DoMelee.Normal:
			NDLI A 1 {
				invoker.CallMeleeState("super::DoMelee", force:true);
			}
		goto Ready.Active;
		
		Spawn:
			NDFL A -1;
		stop;
	}

}

class Halo_MAB_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 60;
	}
}

class HaloMAB_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges ARMA5B_RANGE1, ARMA5B_RANGE2;
		HaloProjectile.MinRangeDamage ARMA5B_MINDMG; 
		HaloProjectile.BaseDamage ARMA5B_DMG;
		HaloProjectile.Speed_MPS ARMA5B_BMPS;
		HaloProjectile.HeadshotDMGFactor ARMA5B_HEDMOD;
		Scale 0.5;
	}
}

class Halo_MA5B : HaloGun 
{
	const LCD_LLayer = 20;
	const LCD_RLayer = 21;
	const LCD_CLayer = 22;
	vector2 lcd_offs;
	double testang;
	
	Default
	{
		Weapon.SlotNumber 1;
		Obituary "%o was turned into swiss cheese by %k's MA5B.";
		Inventory.PickupMessage	"Picked up the MA5B LMG.";
		Tag "LMG (MA5B)";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_AR_Reserves";
		Weapon.AmmoType2 "Halo_MAB_Clip";
		Weapon.AmmoGive 60;
				
		// Recoil
		HaloGun.Bloom 0.10;
		HaloGun.BloomSpeed 0.47;
		HaloGun.BaseRecoil ARMA5B_RECOIL;
		HaloGun.Inaccuracy ARMA5B_ACCMOD;
		HaloGun.Crosshair "MA5BRet", 1.0;
		HaloGun.UIGraphic "WI_AR", 1.0;
		
		HaloGun.Availability GT_HL1 | GT_MSX;
		HaloGun.PowerTier P_NORM;
		
		RecoilWeapon.YOffsetRange 0, 40;
	}

	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/MA5B/Fire");
		MarkSound("Halo/Weapons/MA5B/Fire/Bass");
		MarkSound("Halo/Weapons/MA5B/Mech");
		MarkSound("Halo/Weapons/MA5B/Reload/Full");
		MarkSound("Halo/Weapons/MA5B/Reload/Empty");
		MarkSound("Halo/Weapons/MA5B/Select");
	}
	
	action void A_FireRifle()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/MA5B/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/MA5B/Fire/Bass", CHANF_OVERLAP, true);
		A_ShootProjectile("HaloMAB_Bullet", 8);		
		A_SetSFXPos(20,-24,-12);
		A_SpawnSFX("BulletCasing", -90,-20);
		A_SetSFXPos(25,-10,-8);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_TakeAmmo();
		A_UpdateSpread();
	}
	
	action void A_DisableLCD()
	{
		A_Overlay(LCD_LLayer, "LCD_Off");
		A_Overlay(LCD_RLayer, "LCD_Off");
	}
	
	action void A_EnableLCD()
	{	
		A_Overlay(LCD_LLayer, "LCD_AmmoCount.Left");
		A_Overlay(LCD_RLayer, "LCD_AmmoCount.Right");
	}
	
	action void A_LCDOffset(double x, double y, bool add = false)
	{
		if(add) 
			invoker.lcd_offs += (x,y);
		else
			invoker.lcd_offs = (x,y);
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/MA5B/Reload/Full";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/MA5B/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	States
	{
		Ready:
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/MA5B/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Chamber");
			}
			WHS1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim();
			WHS2 ABCDE 1;
		goto Ready.Active;
		Ready.Chamber:
			TNT1 A 0 A_DoSelectAnim(0, true);
			WHD1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WHD2 ABCDEFGHIJKLMNOPQRSTUV 1;
		Ready.Active:
			WHG1 A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD);
				if(A_CheckInScope()) 
					A_LCDOffset(-9,7);
				else
					A_LCDOffset(0,0);
					
				A_EnableLCD();
				A_OverlayFlags(LCD_LLayer, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
				A_OverlayFlags(LCD_RLayer, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
			}
		loop;
		
		Ready.Dryfire:
			WHG1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_DisableLCD();
			WHG1 A 1 A_GunLower();
		wait;
		
		
		//  - ~900RPM -
		// ~2.3 frames.
		
		Fire:
			TNT1 A 0 A_EnableLCD();
			THT1 A 0 A_Jump(256, "Fire1", "Fire2", "Fire3", "Fire4");
			WHG1 A 1;
		goto Ready.Active;
		
		Fire1:
			TNT1 A 0 
			{				
				return A_GunCheckReload();
			}
			
			TNT1 A 0 A_SetFrame(A_GetFrame()+random(0,1));
			WHF1 "#" 1 Bright
			{
				A_FireRifle();
				A_RecoilOffset(frandom(-4,4),frandom(4,4),2);
				A_SetRecoil(0.6, frandom(-0.4,0.4), 1);
				A_RQuakeEx(2,2,2,4,0,20,"",QF_RELATIVE);
				A_RollQuake(1,10,2, true);
			}
			WHG1 A 1 Bright
			{
				A_MechanismSound("Halo/Weapons/MA5B/Mech");	
				A_RecoilOffset(0,0,2);
				A_Light(0);
			} 
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_DisableLCD();
			WHF1 CDEFGHIJKL 1 A_JumpIf(A_FirePressed(), "Fire");
		goto Ready.Active;
		
		Fire2:
			TNT1 M 0 
			{				
				return A_GunCheckReload();
			}
			
			TNT1 M 0 A_SetFrame(A_GetFrame()+random(0,1));
			WHF1 "#" 1 Bright
			{
				A_FireRifle();
				A_RecoilOffset(frandom(-4,4),frandom(4,4),2);
				A_SetRecoil(0.5, frandom(-0.35,0.35), 1);
				A_RQuakeEx(2,2,2,4,0,20,"",QF_RELATIVE);
				A_RollQuake(1,4,1, true);
			}
			WHG1 A 1 Bright
			{
				A_MechanismSound("Halo/Weapons/MA5B/Mech");	
				A_RecoilOffset(0,0,2);
				A_Light(0);
			} 
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_DisableLCD();
			WHF1 OPQRSTUVWX 1 A_JumpIf(A_FirePressed(), "Fire");
		goto Ready.Active;
		
		Fire3:
			TNT1 Y 0 
			{				
				return A_GunCheckReload();
			}
			
			TNT1 Y 0 A_SetFrame(A_GetFrame()+random(0,1));
			WHF1 "#" 1 Bright
			{
				A_FireRifle();
				A_RecoilOffset(frandom(-4,4),frandom(6,6),2);
				A_SetRecoil(0.5, frandom(-0.5,0.5), 1);
				A_RQuakeEx(1,2,1,2,0,20,"",QF_RELATIVE);
				A_RollQuake(1,10,2, true);
			}
			WHG1 A 1 Bright
			{
				A_MechanismSound("Halo/Weapons/MA5B/Mech");	
				A_RecoilOffset(0,0,2);
				A_Light(0);
			} 
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_DisableLCD();
			WHF2 ABCDEFGHIJ 1 A_JumpIf(A_FirePressed(), "Fire");
		goto Ready.Active;
		
		Fire4:
			TNT1 K 0 
			{				
				return A_GunCheckReload();
			}
			
			TNT1 K 0 A_SetFrame(A_GetFrame()+random(0,1));
			WHF2 "#" 1 Bright
			{
				A_FireRifle();
				A_RecoilOffset(frandom(-6,6),frandom(6,6),2);
				A_SetRecoil(0.7, frandom(-0.5,0.5), 1);
				A_RQuakeEx(1,2,1,2,0,20,"",QF_RELATIVE);
				A_RollQuake(1,6,1, true);
			}
			WHG1 A 1 Bright
			{
				A_MechanismSound("Halo/Weapons/MA5B/Mech");	
				A_RecoilOffset(0,0,2);
				A_Light(0);
			} 
			TNT1 A 0 A_ReFire();
			TNT1 A 0 A_DisableLCD();
			WHF2 NMOPQRSTUV 1 A_JumpIf(A_FirePressed(), "Fire");
		goto Ready.Active;
		
		/*
			WHG1 A 1 A_MechanismSound("Halo/Weapons/Rifle/Mech");	
			
			TNT1 A 0; // Firing frame is got from this state.
			TNT1 A 0 A_SetFrame(A_GetFrame()+random(0,1));
			WHF1 "#" 1 Bright
			{
				A_RecoilOffset(0,0,2);
				A_Light(0);
			}
		*/
		
		// Ammo 10s count
		LCD_AmmoCount.Left:
			WHAL "#" 1 Bright
			{
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				A_SetFrame(floor(countinv(invoker.AmmoType2)/10.), LCD_LLayer);
				A_FollowRotatedPos(LCD_LLayer, PSP_WEAPON, (30,30), offs:invoker.lcd_offs);
				A_FollowRotation(LCD_LLayer, PSP_WEAPON);
			}
		loop;
		// Ammo 1s count
		LCD_AmmoCount.Right:
			WHAR "#" 1 Bright
			{
				A_OverlayPivotAlign(OverlayID(), PSPA_CENTER, PSPA_CENTER);
				A_SetFrame(floor(countinv(invoker.AmmoType2)%10.), LCD_RLayer);
				A_FollowRotatedPos(LCD_RLayer, PSP_WEAPON, (30,30), offs:invoker.lcd_offs);
				A_FollowRotation(LCD_RLayer, PSP_WEAPON);
			}
		loop;
		
		LCD_Off:
			TNT1 A 1;
		stop;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_DisableLCD();
			TNT1 A 0 A_ReloadSound();
			TNT1 A 0 A_JumpIf(CountLoadedAmmo(), "Reload.Tactical");
			WHR3 TUVWXYZ 1;
			WHR4 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WHR5 ABCD 1;
			WHR5 E 1 A_SetRecoil(-1.25, 0.3, 2); // Mag Out
			WHR5 FGHIJKLMNOPQRST 1;
			WHR5 U 1 
			{
				A_SetRecoil(1.25, -0.3, 2); // Mag In
				A_ReloadClip();
			}
			WHR5 VWXYZ 1;
			WHR6 ABCDEFGHI 1;
			WHR6 J 1 A_SetRecoil(2.0, -0.6, 1); // Mag Slap;
			WHR6 KLMNOPQSTUVWXYZ 1;
			WHR7 ABCDEFGHIJKLMNOPQ 1;
		goto Ready.Active;
		
		Reload.Tactical:
			WHR1 ABCDEFGHIJKLMNOPQ 1;
			WHR1 R 1 A_SetRecoil(-1.25, 0.3, 2); // Mag Out
			WHR1 STUVWXYZ 1;
			WHR2 ABCDEFGHIJKL 1;
			WHR2 M 1 
			{
				A_SetRecoil(1.25, -0.3, 2); // Mag In
				A_ReloadClip();
			}
			WHR2 NOPQRSTUVW 1;
			WHR2 X 1 A_SetRecoil(2.0, -0.6, 1); // Mag Slap;
			WHR2 YZ 1;
			WHR3 ABCDEFGHIJKLMNOPQRS 1;
		goto Ready.Active;
		
		Spawn:
			WHP1 A -1;
		stop;
	}
}


class Halo_DMRClip : Ammo 
{
	Default
	{
		Inventory.MaxAmount 15;
	}
}
class Halo_DMR_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 8;
		Inventory.MaxAmount 60;
		Inventory.Icon "HLAMF0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 8 Rounds for the DMR.";
		
		Ammo.BackpackMaxAmount 72;
	}
	
	States
	{
		Spawn:
			HLAM F -1 Bright;
		stop;
	}
}


class HaloDMR_Bullet : HaloBullet 
{
	Default
	{
		Radius 2;
		Height 2;
	}
	
	Default
	{
		HaloProjectile.SetRanges DMR_RANGE1, DMR_RANGE2;
		HaloProjectile.MinRangeDamage DMR_MINDMG; 
		HaloProjectile.BaseDamage DMR_DMG;
		HaloProjectile.Speed_MPS DMR_BMPS;
		HaloProjectile.HeadshotDMGFactor DMR_HEDMOD;
		HaloProjectile.RipperCount 2;
		HaloProjectile.ShieldDamageFactors 1.0, 1.0;
	}
}

class Halo_DMR : HaloGun
{
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 4;
		Obituary "%o got the Call of Duty treatment from %k's DMR.";
		Inventory.PickupMessage	"Picked up the M392 Designated Marksman Rifle.";
		Tag "DMR";
		Weapon.BobSpeed 2.12;
		Weapon.BobRangeX 0.63;
		Weapon.AmmoType1 "Halo_DMR_Reserves";
		Weapon.AmmoGive 24;
		Weapon.AmmoType2 "Halo_DMRClip";
		
		HaloGun.Availability "HL3, HL4";
		HaloGun.PowerTier P_MID;
		HaloGun.Rarity 50;
				
		// Recoil
		RecoilWeapon.RecoilSpeed 20;
		HaloGun.Bloom 1.25;
		HaloGun.BloomSpeed 0.08;
		HaloGun.BaseRecoil DMR_RECOIL;
		HaloGun.Inaccuracy DMR_ACCMOD;
		HaloGun.Crosshair "DMRRet", 0.55;
		HaloGun.UIGraphic "WI_DMR", 1.0, 1.0;
		HaloGun.UISight "SI_DMR1", 0.25, 0.7;
		HaloGun.SetupScope 2.0, 0.25;
		HaloGun.ZoomSounds "Halo/Weapons/Sniper/Zoom/IN", "Halo/Weapons/Sniper/Zoom/OUT";
		
		RecoilWeapon.YOffsetRange -5, 40;
	}
	
		
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/DMR/Fire");
		MarkSound("Halo/Weapons/DMR/Fire/Bass");
		MarkSound("Halo/Weapons/DMR/Bolt");
		MarkSound("Halo/Weapons/DMR/Reload");
		MarkSound("Halo/Weapons/DMR/Draw");
		MarkSound("Halo/Weapons/DMR/Reload/Empty");
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/DMR/Reload";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/DMR/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	action void A_FireDMR()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/DMR/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/DMR/Fire/Bass", CHANF_OVERLAP, true);
		vector3 shootpos = A_ShootProjectile("HaloDMR_Bullet", 2, 6);
		
		A_SetSFXPos(25,-10,-8);
		for(int i = 0; i < 10; i++)
			A_SpawnSFX("MuzzleSmoke", 0,0);
			
		A_SetSFXPos(25,-15,-30);
		A_SpawnSFX("BulletCasing", -90,-50);
			
		A_TakeAmmo(1);
		A_UpdateSpread();
	}

	States
	{
		
		Ready:
			TNT1 A 0 A_JumpIf(!A_DoFullSelectAnimation(), "Ready.Active");
			TNT1 A 4 A_WeapSound("Halo/Weapons/DMR/Draw");
			WJD1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim(-5, true);
			WJD2 ABCDEFGHIJKLMNOPQRSTUV 1;
		goto Ready.Active;

		Ready.Active:
			WJI1 A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
				
		Ready.Dryfire:
			WJI1 A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			WJI1 A 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0
			{
				A_RecoilOffset(0,8,1);
				return A_GunCheckReload();
			}
			WJF1 A 1 Bright 
			{
				A_FireDMR();
				A_ModifyRecoil(A_CheckInScope() ? 0.5 : 1.0);
				A_SetRecoil(2.0, 0, 2);
				A_SetZoom(0.94, 1);
				A_RQuakeEx(4,2,0,4,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RollQuake(1,6,2);
			}
			WJF1 B 1 bright A_RecoilOffset(0,-20,4);
			WJF1 C 1 
			{
				A_SetZoom(1.0, 8);
				A_Light(0);
				A_SetRecoil(-0.18, 0, 8);
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/DMR/Mech", CHANF_OVERLAP);
			WJF1 DEFG 1 A_RecoilOffset(0,0,4);
			WJF1 HI 1;
			WJI1 A 8;
			TNT1 A 0 A_ReFire();
		goto Ready.Active;
		
		Bolt:
			TNT1 A 0 A_ScopeDisable();
			WJR5 ABCDEFGHIJKLMNOPQRSTUVWX 1;
			WJR5 YZ 1 A_SetRecoil(-0.34, 0, 1);
			TNT1 A 0 
			{
				A_SetSFXPos(25,-20,-20);
				A_SpawnSFX("BulletCasing", -90,-20);
			}
			WJR6 ABC 1;
			WJR6 DE 1 A_SetRecoil(0.34, 0, 1);
			WJR6 FGHIJKLMNOPQRSTUVXY 1;
		goto Ready.Active;
				
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_ReloadSound();
			WJR1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WJR2 A 1;
			WJR2 B 1 A_SetRecoil(-0.7, -0.35, 3);
			WJR2 CDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WJR3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			WJR4 ABCDEFGHIJ 1;
			WJR4 K 1 
			{
				A_SetRecoil(0.7, 0.35, 3);
				A_ReloadClip();
			}
			WJR4 LMNOPQRSTUVWXYZ 1;
			WJR5 A 1;
	
			TNT1 A 0 A_JumpIf(!CountReloadAmmo(), "Bolt");
		goto Ready.Active;
		
		Scope.ON:
			TNT1 A 1 
			{
				A_ScopeON();
				invoker.UI_Sight = invoker.default.UI_Sight;
			}
			TNT1 A 5 A_SetZoom(invoker.scopezoom, 3, true);
			TNT1 A 0 
			{
				bool holding = A_ButtonStatus(BT_ALTATTACK, BTS_HELD) && !A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED);
				invoker.zoom_btnstate = holding ? 0 : BTS_PRESSED;
				if(holding) return ResolveState("Scope.Ready");
				return ResolveState("Scope.Wait");
			}
		goto Scope.Wait;
		
		Scope.Two:
			TNT1 A 1 
			{
				A_ScopeON();
				invoker.UI_Sight = "SI_DMR2";
			}
			TNT1 A 5 A_SetZoom(invoker.scopezoom * 1.5, 3, true);
		goto Scope.Ready;
		
		Scope.Wait:
			TNT1 A 1 
			{
				State ret = ResolveState(null);
				if(!invoker.enablezoom) ret = ResolveState("Scope.OFF");
				if(A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED)) ret = ResolveState("Scope.Two");
				return ret;
			}
		loop;
		
		Spawn:
			WJP1 A -1;
		stop;
	}
}

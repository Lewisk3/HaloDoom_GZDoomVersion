class Halo_PlasmaCaster_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 5;
	}
}
class Halo_PlasmaCaster_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.04;

		Inventory.Amount 2;
		Inventory.MaxAmount 15;
		Inventory.Icon "HLAMR0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 2 Rounds for the Plasma Caster";
		
		Ammo.BackpackMaxAmount 15;
	}
	
	States
	{
		Spawn:
			HLAM R -1 Bright;
		stop;
	}
}

class PlasmaCasterProj : PlasmaGrenade_Proj
{
	Default
	{
		BounceType "Grenade";
		BounceCount 2;
		BounceFactor 0.35;
		WallBounceFactor 0.35;
		
		+ALLOWBOUNCEONACTORS;
		+BOUNCEONACTORS;
	}
	
	override bool ShouldStick()
	{
		return bounceCount <= 0;
	}
}

class PlasmaCasterClusterProj : PlasmaGrenade_Proj
{
	override void DoExplode()
	{
		Spawn("PlasmaGrenadeExplosion", pos);
		
		for(int i = 0; i < 2; i++)
		{
			let mini = Spawn("PlasmaCasterMiniProj", pos);
			if(mini)
			{
				mini.target = target;
				mini.vel = HaloMath.VecFromAngles(
					angle + 180 + frandom[CasterCluster](-60,60), 0, 8
				);
				mini.vel.z = frandom(5,10);
			}
		}
	}
}

class PlasmaCasterMiniProj : PlasmaGrenade_Proj
{
	Default
	{
		Scale 0.05;
	}
	
	override bool ShouldStick()
	{
		return false;
	}

	override void DoExplode()
	{
		let expl = PlasmaGrenadeExplosion(Spawn("PlasmaGrenadeExplosion", pos));
		if(expl)
		{
			expl.explosionRadius = 64;
			expl.explosionDmg = 100;
			expl.A_SetScale(0.35);
		}
	}
}


class Halo_PlasmaCaster : HaloGun
{	
	double charge;

	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 6;
		Obituary "%o was stuck by %k's sticky Plasma balls.";
		Inventory.PickupMessage	"Picked up the Plasma Caster.";
		Tag "Plasma Caster";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_PlasmaCaster_Reserves";
		Weapon.AmmoType2 "Halo_PlasmaCaster_Clip";
		Weapon.AmmoGive 5;
				
		// Recoil (Only cosmetic in this case)
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.30;
		HaloGun.BaseRecoil 0;
		HaloGun.Inaccuracy 20;
		HaloGun.Crosshair "PLCTRet", 0.75;
		HaloGun.UIGraphic "WI_PLCT", 0.75, 0.75;
		
		HaloGun.Availability "HL4";
		HaloGun.PowerTier P_POWER | P_ENERGY;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
		
	action void A_FirePlasmaBall()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/PlasmaCaster/Fire", 0, true);

		vector3 hitPos; Actor proj;
		[hitPos, proj] = A_ShootProjectile("PlasmaCasterProj", 12, 2);	
		
		A_TakeAmmo();
	}
	
	action void A_FirePlasmaCluster()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/PlasmaCaster/ChargedFire", 0, true);
	
		double clusterSpread = 3;
		for(int i = 0; i < 4; i++)
		{
			vector3 hitPos; Actor proj;
			[hitPos, proj] = A_ShootProjectile("PlasmaCasterClusterProj", 12, 2);	
			if(proj)
			{
				// Aim at crosshair
				let haloplr = HaloPlayer(self);
				if(haloplr)
				{	
					proj.angle += frandom[ClusterSpread](-clusterSpread,clusterSpread);
					proj.pitch += frandom[ClusterSpread](-clusterSpread,clusterSpread);
					proj.vel = HaloMath.VecFromAngles(proj.angle, proj.pitch, proj.Speed);
				}
			}
		}
	
		A_TakeAmmo(2);
	}
		
	States
	{
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/PlasmaCaster/Draw");
			WSS1 FEDCBA 1 A_DoSelectAnim();
		Ready.Active:
			WSI1 A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD, usescope:false);
				A_StopSound(CHAN_VOICE);
				invoker.charge = 0;
			}
		loop;
		
		Ready.Dryfire:
			WSI1 A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			WSS1 ABCDE 1;
			WSS1 F 1 A_GunLower();
		wait;
				
		Fire:
			TNT1 A 0 A_GunCheckReload();
			WSF1 B 1 Bright;
			WSF1 C 1 Bright
			{
				A_RecoilOffset(20,20,6);
				A_SetRecoil(1.0, 0, 2);
				A_SetZoom(0.97, 2);
				A_FirePlasmaBall();
				A_RQuakeEx(2,2,2,6,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			WSF1 C 2 Bright A_RecoilOffset(10,10,6);
			TNT1 A 0 
			{
				A_Light(0);
				A_RQuakeEx(2,2,2,4,0,20,"");
			}
			WSF1 D 1; 
			WSC1 H 1;
			WSF1 EFGH 1 
			{
				A_SetZoom(1.0, 8);
				A_RecoilOffset(0,0,6);
			}
			WSF1 I 1;
			WSI1 A 4;
		goto Ready.Active;
		
		AltFire:
			TNT1 A 0 A_JumpIf(CountLoadedAmmo() < 2, "Reload");
			TNT1 A 0 A_StartSound("Halo/Weapons/PlasmaCaster/ChargeBegin", CHAN_VOICE, CHANF_OVERLAP | CHANF_LOOPING);
			WSC1 ABCDEF 1 A_RecoilOffset(0,0,6);
		Charge.Loop:
			TNT1 A 0 A_StartSound("Halo/Weapons/PlasmaCaster/ChargeLoop", CHAN_VOICE, CHANF_OVERLAP | CHANF_LOOPING);
			WSC1 GHIJ 2
			{
				A_RecoilOffset(
					frandom[FlamerOffs](-1.65, 1.65), 
					frandom[FlamerOffs](-1.25, 1.05), 
					2, true
				);
				A_RollQuake(1,10,1);
					
				if(invoker.charge < 1.0) 
					invoker.charge += 0.1;
			}
			TNT1 A 0 A_ReFire("Charge.Loop");
		Charge.Fire:
			TNT1 A 0 A_JumpIf(invoker.charge < 1.0, "Charge.Finish");
			WSC1 G 1
			{
				A_RecoilOffset(40,40,6);
				A_SetRecoil(6.0, 0, 2);
				A_SetZoom(0.87, 2);
				A_FirePlasmaCluster();
				A_RQuakeEx(4,2,3,8,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			WSC1 G 1 A_RecoilOffset(1,1,6, true);
			TNT1 A 0 
			{
				A_Light(0);
				A_RQuakeEx(3,2,2,6,0,20,"");
			}
			WSC1 GGGGG 1 
			{
				A_SetZoom(1.0, 8);
				A_RecoilOffset(1,1,6, true);
			}
			WSC1 G 6 A_RecoilOffset(0,0,6);
		Charge.Finish:
			TNT1 A 0 A_StopSound(CHAN_VOICE);
			WSC1 GFEDCBA 1;
		goto Ready.Active;
		
		Reload: // 44
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_WeapSound("Halo/Weapons/PlasmaCaster/Reload");
			WSR1 ABCDEFFFFFGHI 2;
			WSR1 J 1 
			{
				A_SetRecoil(0, -1.0, 2);
				A_RecoilOffset(-10,0,2, true);
			}
			WSR1 KLMNOOOOOOOPQRST 2 A_RecoilOffset(0,0,18);
			WSR1 U 1 
			{
				A_SetRecoil(0.15, 1.0, 2);
				A_RecoilOffset(10,0,2, true);
			}
			TNT1 A 0 A_ReloadClip();
			WSR1 VWXYZ 2 A_RecoilOffset(0,0,12);
			WSR2 ABC 2;
			WSR2 D 1 
			{
				A_SetRecoil(1.0, 0, 2);
				A_RecoilOffset(0,10,2, true);
			}
			WSR2 EFGHI 1 A_RecoilOffset(0,0,6);
		goto Ready.Active;
		
		Spawn:
			WSG1 A -1;
		stop;
	}
}

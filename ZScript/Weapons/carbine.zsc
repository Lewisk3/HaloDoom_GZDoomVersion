class Halo_CarbineClip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 18;
	}
}
class Halo_CarbineReserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 18;
		Inventory.MaxAmount 72;
		Inventory.Icon "HLAME0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 18 Rounds for the Carbine";
		
		Ammo.BackpackMaxAmount 144;
	}
	
	States
	{
		Spawn:
			HLAM E -1 Bright;
		stop;
	}
}

class HaloCarbine_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges CARBINE_RANGE1, CARBINE_RANGE2;
		HaloProjectile.MinRangeDamage CARBINE_MINDMG; 
		HaloProjectile.BaseDamage CARBINE_DMG;
		HaloProjectile.Speed_MPS CARBINE_BMPS;
		HaloProjectile.HeadshotDMGFactor CARBINE_HEDMOD;
		HaloProjectile.ShieldDamageFactors 0.75, 0.75;
		HaloProjectile.RicochetChance 0;
		
		DamageType "Fire";
	}
	
	States
	{
		Death:
			TNT1 A 1
			{
				for(int i = 0; i < 10; i++)
				{
					double sAngle = frandom[WeapFX](-30,30);
					double sPitch = frandom[WeapFX](-30,30);
					vector3 offs = (
						frandom[WeapFX](-15,15),
						frandom[WeapFX](-15,15),
						frandom[WeapFX](-15,15)
					);
					
					vector3 pvel = (
						cos(angle+sAngle),
						sin(angle+sAngle),
						sin(pitch+sPitch)
					) * -frandom[WeapFX](4,10);
					A_SpawnParticle(0x11f220, SPF_FULLBRIGHT|SPF_RELPOS, 10, 5, sAngle, offs.x, offs.y, offs.z, pvel.x, pvel.y, pvel.z);
				}
			}
		stop;
	}
}


class Halo_Carbine : HaloGun
{
	const LCD = 22;

	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 4;
		Obituary "%o was took down by %k's Carbine.";
		Inventory.PickupMessage	"Picked up the Type-51 Carbine.";
		Tag "Carbine";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_CarbineReserves";
		Weapon.AmmoType2 "Halo_CarbineClip";
		Weapon.AmmoGive 36;
		HaloGun.Faction "Covenant";
		
		HaloGun.PowerTier P_ENERGY | P_STRONG;
		HaloGun.Rarity 60;

		// Recoil
		HaloGun.Bloom 0.32;
		HaloGun.BloomSpeed 0.18;
		HaloGun.BaseRecoil CARBINE_RECOIL;
		HaloGun.Inaccuracy CARBINE_ACCMOD;
		HaloGun.Crosshair "CarbRet", 0.8;
		HaloGun.UISight "SI_CARB", 1.0, 0.6;
		HaloGun.SetupScope 2.0, 0.5;
		HaloGun.UIGraphic "WI_CARB", 0.4, 0.4;
		HaloGun.ZoomSounds "Halo/Weapons/Zoom/IN", "Halo/Weapons/Zoom/OUT";
		
		RecoilWeapon.YOffsetRange -5, 40;
	}
	
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
	}
	
	action void FireLaser(vector3 hitpos)
	{
		vector3 localOffs = (10, 3.0, -3.0);
		A_SetSFXPos(localOffs.x, localOffs.y, localOffs.z);
		
		double yoffs = A_GetWeapYOffs() * 0.25;

		let beam = LaserBeam.Create(self, localOffs.x,localOffs.y,localOffs.z, type:"LSR_CarbineTrail");
		beam.SetEnabled(true);
	}
	
	action state A_CheckRapidFire()
	{
		return A_JumpIf(A_FirePressed(), "Fire");
	}
	
	action void A_FireCarbine()
	{
		A_WeapSound("Halo/Weapons/Carbine/Fire", CHANF_OVERLAP);
		A_WeapSound("Halo/Weapons/Carbine/Fire/Bass", CHANF_OVERLAP);
		vector3 shootpos = A_ShootProjectile("HaloCarbine_Bullet", 1, 0);
		A_SetSFXPos(25,-5, -5);
		
		FireLaser(shootpos);

		/*
		let trail = A_TrailSFX(shootpos, 1.25, 0x11f220);
		if(trail) 
		{
			trail.A_SetScale(2.0);
			trail.fadespd = 0.30;
		}
		*/
					
		A_TakeAmmo(1);
		A_UpdateSpread();
	}
	
	action void A_DisableLCD()
	{
		A_Overlay(LCD, "LCD_Off");
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/Rifle/Reload/Full";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/Rifle/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	States
	{
		DoSmoke:	
			TNT1 AAAA 3 
			{
				let psp = player.GetPSprite(OverlayID());
				if(psp) psp.frame = random[WeapFX](3,8);
				A_SetSFXPos(25,-5,-7);
				for(int i = 0; i < random[WeapFX](1,5); i++)
				{
					let smk = PlasmaSmoke_Green(A_SpawnSFX("PlasmaSmoke_Green", 0,0));
					if(smk) 
					{
						smk.vel = (frandom[WeapFX](-1,1),frandom[WeapFX](-1,1),frandom[WeapFX](-1,1)) * 0.2;
						smk.scaleMod = 0.5;
					}
				}
			}
 		stop;
	
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Carbine/Select");
			CRBS ABCD 1 A_DoSelectAnim(0, true);
		Ready.Active:
			CRBI A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
				A_Overlay(LCD, "LCD_Ammo");
				A_OverlayFlags(LCD, PSPF_ADDWEAPON|PSPF_ADDBOB, true);
			}
		loop;
		
		Ready.Dryfire:
			CRBI A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 
			{
				A_DisableLCD();
			}
			CRBS DCBA 1;
			CRBS A 1 A_GunLower();
		wait;
		
		Fire:
			CRBF A 1 bright
			{
				A_RecoilOffset(0,8,1);
				return A_GunCheckReload();
			}
			TNT1 A 0 
			{
				A_ModifyRecoil(A_CheckInScope() ? 0.5 : 1.0);
				A_FireCarbine();
				A_SetRecoil(1.0, 0, 2);
				A_RQuakeEx(4,2,0,4,0,20,"",QF_RELATIVE|QF_WAVE);
				A_Overlay(10, "DoSmoke");
			}
			CRBF B 1 bright A_RecoilOffset(8,-10,4);
			CRBF C 1 
			{
				A_Light(0);
				A_SetRecoil(-0.18, 0, 4);
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/Carbine/Mech", CHANF_OVERLAP);
			CRBF DEF 1 A_RecoilOffset(0,0,4);
		Hold:
			CRBI A 1 A_CheckRapidFire();
			TNT1 A 0 A_ReFire("Hold");
		goto Ready.Active;
		
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_DisableLCD();
			TNT1 A 0 A_StartSound("Halo/Weapons/Carbine/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			CRR1 ABCDEFGH 1;
			CRR1 I 1 
			{
				A_SetRecoil(-2.0, 0, 2);
				A_SetSFXPos(10,-25,-10);
				A_SpawnSFX("Debris_CarbineMagazine", -110, -30, 4);
			}
			CRR1 JKLMNOPQRSTUVWXYZ 1;
			CRR2 ABCDEFGH 1;
			CRR2 I 2 A_SetRecoil(1.0, 0, 2);
			TNT1 A 0 A_ReloadClip();
			CRR2 JKLMNOPQRSTUVWX 1;
			CRR2 YZ 2 A_SetRecoil(-0.5, 0, 2);
			CRR3 ABCDEFGHIJK 1;
		goto Ready.Active;
		
		
		// Weapon Status 
		LCD_Ammo:
			CRBL "#" 1 Bright
			{
				A_FollowRotatedPos(OverlayID(), PSP_WEAPON, (40,0));
				A_FollowRotation(OverlayID(), PSP_WEAPON);
				A_SetFrame(CountLoadedAmmo() ? 0 : 1, OverlayID()); 
			}
		loop;
		
		LCD_Off:
			TNT1 A 1;
		stop;
		
		
		Spawn:
			CARF A -1;
		stop;
	}
}

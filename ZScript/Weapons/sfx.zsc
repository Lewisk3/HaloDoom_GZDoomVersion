class CheapActor : Actor
{
	Default
	{
		Radius 1;
		+NOINTERACTION;
	}
	
	override void Tick()
	{			
		if (alpha <= 0)
		{
			destroy();
			return;
		}
		if (isFrozen()) return;
			
		//animation:
		if (tics != -1) 
		{
			if(tics > 0) tics--;
			while (!tics) 
				if(!SetState(CurState.NextState)) return;
		}
	}
}

class SmokeTrail : CheapActor
{
	vector3 startpos;
	vector3 endpos;
	double fadespd; 
	double dist;
	
	Default
	{
		RenderStyle "AddShaded";
	}
	
	static SmokeTrail Start(Color col, vector3 from, vector3 to, vector2 angles, double alpha, double fadespd = 0.05, class<SmokeTrail> type = "SmokeTrail")
	{
		let trail = SmokeTrail(Spawn(type, from));
		if(trail) 
		{
			trail.startpos = from;
			trail.endpos = to;
			trail.alpha = alpha;
			
			// Face target position
			vector3 aim = level.SphericalCoords(from, to, (angles.x, angles.y));
			trail.dist = aim.z;
			trail.angle = (angles.x - aim.x);
			trail.pitch = (angles.y - aim.y) + 90;
			trail.fadespd = fadespd;
			trail.SetShade(col);
		}
		return trail;
	}
	
	override void Tick()
	{
		super.Tick();
		bInvisible = GetAge() < 2;
		
		// Project position out to center
		double mid = dist * 0.5;
		double sinp = sin(pitch-90), cosp = cos(pitch-90);
		double cosa = cos(angle), sina = sin(angle);
		vector3 dir = (cosa*cosp, sina*cosp, -sinp) * mid;
		
		SetOrigin(level.vec3offset(startpos, dir), false);
		
		// Scale to distance
		double radi_units = dist * 0.75;
		Scale.Y = radi_units;
	}
	
	States
	{
		Spawn:
			BEAM A 4;
		Spawn.Loop:
			BEAM A 1 A_FadeOut(fadespd);
		loop;
	}
}

class BulletCasing : Actor
{
	int animspd;
	Property AnimateSpeed : animspd;
	Default
	{
		Speed 4;
		BulletCasing.AnimateSpeed 2;
		Projectile;
		BounceType "Doom";
		BounceCount 3;
		BounceFactor 0.7;
		-SOLID;
		-NOGRAVITY;
		Gravity 0.35;
		Radius 2;
		Height 2;
		Scale 0.15;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other is "PlayerPawn") return false;
		return super.CanCollideWith(other, passive);
	}
	
	override void Tick()
	{
		bool dosmoke = true;
		let src = HaloGun(target);
		if(src && src.cvfx_smoke)
			dosmoke = src.cvfx_smoke.GetBool();
			
		if( !(level.maptime%10) && random[SpawnSmoke](0,1) && GetAge() < 3*35 && dosmoke )
		{
			let smoke = Spawn("CasingSmoke", pos);
			if(smoke) 
			{
				smoke.vel = vel;
				smoke.A_SetScale(frandom(0.04,0.15));
				smoke.alpha = frandom(0.05,0.5);
			}
		}
		super.Tick();
	}
	
	States
	{
		Spawn:
			CAS3 A 1;
		Animate:
			"####" ABCDEFGHI 2 A_SetTics(animspd);
		loop;
		XDeath:
		Death:
		Crash:
			"####" A 2100 // 1 minute 
			{
				bNOINTERACTION = true;
				frame = random(10,13);
			}
		WaitDeath:
			"####" "#" 1 A_FadeOut(0.002);
		wait;
	}
}

class CasingSmoke : Actor
{
	Default
	{
		Speed 2;
		+NOINTERACTION;
		RenderStyle "Add";
		Alpha 0.5;
		Scale 0.15;
	}
	
	override void Tick()
	{
		super.Tick();
		vel.z += 0.05;
		vel *= 0.87;
	}
	
	States
	{
		Spawn:
			SMKE ABCDEFGHIJKLMNOPQR 3;
		Death:
			SMKE R 1 A_FadeOut(0.07);
		wait;
	}
}

class MuzzleSmoke : CasingSmoke
{
	Default
	{
		Speed 2;
		+NOINTERACTION;
		RenderStyle "Add";
		Alpha 0.30;
		Scale 0.08;
		+ROLLSPRITE;
	}
	
	double rolldir;
	double fadespd;
	
	override void BeginPlay()
	{
		super.BeginPlay();
		rolldir = randompick(-1,1);
		fadespd = frandom(0.8,2.0);
		vel.x += frandom(-1,1);
		vel.y += frandom(-1,1);
		A_SetScale(frandom(0.02,0.1));
	}
	
	override void Tick()
	{
		super.Tick();
		DoPhysics();
	}
	
	virtual void DoPhysics()
	{
		vel.z += 0.01;
		vel *= 0.87;
		roll -= 1.2 * rolldir;
		alpha -= 0.006 * fadespd;
		A_SetScale(scale.x * 1.02);
		if(alpha <= 0.001) Destroy();
	}
	
	States
	{
		Spawn:
			SMOK A 1;
		loop;
	}
}

class RisingSmoke : MuzzleSmoke
{
	Default
	{
		Alpha 0.4;
	}

	override void DoPhysics()
	{
		vel.z += 0.1;
		vel *= 0.87;
		roll -= 1.2 * rolldir;
		alpha -= 0.006 * fadespd;
		A_SetScale(scale.x * 0.98);
		if(alpha <= 0.001) Destroy();
	}
}


class ShellCasing : BulletCasing
{
	Default
	{
		Speed 2;
	}
	States
	{
		Spawn:
			CAS2 A 1;
		goto Animate;
	}
}

class MuzzleSparks : Actor
{	
	double grav;
	Property FXGravity : grav;
	
	Default
	{
		+NOINTERACTION;
		RenderStyle "Add";
		Scale 0.04;
		MuzzleSparks.FXGravity 1.2;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		grav += frandom(-grav*0.1, grav*0.1);
	}
	
	override void Tick()
	{
		super.Tick();
		
		vel.z -= grav;
		if(pos.z <= floorz) 
		{
			HaloMath.ParticlesFX(self, "Yellow", 10);
			Destroy();
			return;
		}
		
		let smoke = Spawn("CasingSmoke", pos);
		if(smoke) 
		{
		//	smoke.vel = vel;
			smoke.A_SetScale(frandom(0.10,0.15));
			smoke.alpha = frandom(0.07,0.14);
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 0 NoDelay 
			{
				vel *= frandom(0.8, 1.2);
			}
		SpawnLoop:
			IPF2 "#" 1 Bright 
			{
				if(++frame > 3) frame = 0;
				A_FadeOut(1. / 25.);
			}
			TNT1 A 0 A_JumpIf(GetAge() > 25, "Null");
		loop;
	}
}

class FX_Shockwave : CheapActor
{
	double exSpeed;

	Default
	{
		Scale 0.5;
		Alpha 1.0;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
	}
	
	override void BeginPlay()
	{
		super.beginPlay();
		exSpeed = 1.0;
	}
	
	override void Tick()
	{
		if(isFrozen()) return;
		scale *= 1.15 / max(exSpeed, 1.);
		alpha *= 0.95 * exSpeed;
		exSpeed *= 0.98;
		
		if(alpha <= 0) 
		{
			Destroy();
			return;
		}
	}
	
	States
	{
		Spawn:
			SWVE A -1;
		stop;
	}
}

class SmallCasing : BulletCasing
{
	Default
	{
		Speed 5;
	}
	States
	{
		Spawn:
			CAS1 A 1;
		goto Animate;
	}
}

class FXFollower : Actor
{
	Default
	{
		+NOINTERACTION;
	}
	
	States
	{
		Spawn:
			PLSS A 2;
		stop;
	}
}

// TODO: Implement this shield stuff.
class TestShield : Actor
{
	Default
	{	
		Radius 10;
		Height 10;
		+SOLID;
		+SHOOTABLE;
		+INTERPOLATEANGLES;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if( !passive && (other.target == master || other == master) ) return false;
		return super.CanCollideWith(other, passive);
	}
	
	override void Tick()
	{
		super.Tick();
		if(master)
		{	
			vector3 offs = HaloMath.V3Offset(master.angle, master.pitch, master.roll, 30,0, 0, 1.0);
			vector3 followPos = (master.pos.xy, master.pos.z + (master.height*0.5));
			SetOrigin(level.vec3offset(followPos, offs), true);
		}
	}
	
	static TestShield attach(Actor to)
	{	
		let sh = TestShield(Spawn("TestShield", to.pos));
		if(sh) sh.master = to;
		return sh;
	}
	
	States
	{
		Spawn:
			PLSS A -1;
		stop;
	}
}

// Gravity Hammer stuff
class RepulsorField : Actor
{
	// Constant(s)
	double gForce, maxDist;
	
	Property GravityConstant : gForce;
	Property FieldSize : maxDist;

	Default
	{
		+NOINTERACTION;
		Radius 16;
		Height 16;
		Mass 3000;
		RepulsorField.GravityConstant 0.06;
		RepulsorField.FieldSize 128.;
	}
	
	void DrawField()
	{
		double density = 10;
		for(double p = -90; p < 90; p += density)
		{
			for(double a = -180; a < 180; a += density)
			{
				vector3 radialPos = HaloMath.V3Offset(a, p, 0, 1.0,0,0, maxDist);
				radialPos.z /= 1.2;
				radialPos = level.Vec3Offset(pos, radialPos);
				Spawn("FieldParticle", radialPos);
			}
		}
	}
	
	void A_DoRepulse(double limit = 6)
	{
		double ZDoomToReal = 1.0;
			
		// Repulse things
		let physIt = ThinkerIterator.Create();
		Actor act;
		while(act = Actor(physIt.Next()))
		{
			if(!act.bSOLID && !act.bMISSILE) continue;
			if(!act.IsVisible(self, true)) continue;
			
			vector3 affectorPos = (act.pos.xy, act.pos.z + (act.height*0.5));
			vector3 forceDir = HaloMath.SphereBetween(pos, affectorPos);
			if(forceDir.z > maxDist) continue;
		//	SmokeTrail.Start("Blue", pos, affectorPos, forceDir.xy, 1.0);
			
			double dist = forceDir.z ** 2;
			double force = gForce * ( 
				((mass * act.mass) * ZDoomToReal) / dist 
			);
			force = clamp(force, -limit, limit);
			force *= clamp(HaloMath.GetInertia(act.mass), 0.75, 2.0);
			
			if(!act.FindInventory("EMP_DeBuff") && act != target) 
				act.GiveInventory("EMP_DeBuff", 1);
			
			vector3 pushForce = HaloMath.VecFromAngles(forceDir.x, forceDir.y, force); 
			pushForce.xy *= 0.8;
			pushForce.z *= -1;
			act.vel += pushForce;
			
			if(act.bMISSILE) act.vel = HaloMath.VecFromAngles(forceDir.x, -forceDir.y, act.vel.Length());
		}
	}
	
	States
	{
		Spawn:
			TNT1 A 2 NoDelay DrawField();
		Repulse:
			TNT1 A 1 A_DoRepulse();
		loop;
	}
}
class FieldParticle : CheapActor
{
	Default
	{
		Scale 0.5;
	}

	States
	{
		Spawn:
			PLSS A -1;
		stop;
	}
}
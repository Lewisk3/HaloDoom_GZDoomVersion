
class Halo_StanchionClip : Ammo 
{
	Default
	{
		Inventory.MaxAmount 100;
	}
}


class Halo_Stanchion : HaloGun replaces BFG9000
{
	Default
	{
		Weapon.SlotNumber 2;
		Obituary "%o was eviscerated by %k's Railgun.";
		Inventory.PickupMessage	"Stanchion Acquired.";
		Tag "Stanchion";
		Weapon.BobSpeed 1.87;
		Weapon.BobRangeX 0.63;
		Weapon.AmmoType1 "Cell";
		Weapon.AmmoGive 100;
		Weapon.AmmoType2 "Halo_StanchionClip";
				
		// Recoil
		RecoilWeapon.RecoilSpeed 20;
		HaloGun.HasBattery true, 20;
		HaloGun.Bloom 1.25;
		HaloGun.BloomSpeed 0.08;
		HaloGun.BaseRecoil STANCHION_RECOIL;
		HaloGun.Inaccuracy STANCHION_ACCMOD;
		HaloGun.Crosshair "SNPRet";
		HaloGun.UIGraphic "WI_SNPR";
		HaloGun.UISight "SI_SNPR", 1.0, 0.8;
		HaloGun.SetupScope 4.0, 0.25;
		HaloGun.ZoomSounds "Halo/Weapons/Sniper/Zoom/IN", "Halo/Weapons/Sniper/Zoom/OUT";
		
		RecoilWeapon.YOffsetRange 0, 100;
	}
	
		
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/Stanchion/Fire");
		MarkSound("Halo/Weapons/Stanchion/Fire/Bass");
		// MarkSound("Halo/Weapons/Stanchion/Reload");
		// MarkSound("Halo/Weapons/Stanchion/Ready");
	}
	
	action void A_FireStanchion()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/Stanchion/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/Stanchion/Fire/Bass", CHANF_OVERLAP, true);
		RailgunProjectile.FireRailgun(self, STANCHION_DMG, STANCHION_DMG*0.25, (30, 8, -6));
		
		A_SetSFXPos(25,-5,-7);
		for(int i = 0; i < 15; i++)
			A_SpawnSFX("MuzzleSmoke", 0,0);
			
		A_TakeAmmo(20);
		A_UpdateSpread();
	}

	States
	{
		
		DoSmoke:	
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3 
			{
				let psp = player.GetPSprite(OverlayID());
				if(psp) psp.frame = random(3,8);
				A_SetSFXPos(25,-5,-7);
				for(int i = 0; i < random(1,5); i++)
					A_SpawnSFX("MuzzleSmoke", 0,0);
			}
		stop;
		
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Stanchion/Ready");
			STCS ABCDE 1 A_DoSelectAnim();
		Ready.Active:
			STCI A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
			}
		loop;
		
		Ready.Dryfire:
			STCI A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			STCS A 1 A_GunRaise();
		wait;

		Deselect:
			STCS EDCB 1;
			STCS A 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_GunCheckReload();
			STCF A 1 Bright
			{
				A_RecoilOffset(60,60,6);
				A_SetRecoil(4.42, 0, 2);
				A_SetZoom(0.87, 2);
				A_FireStanchion();
				A_RollQuake(-3, 30, 3);
				A_RQuakeEx(2,2,2,10,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			STCF BC 1 Bright A_RecoilOffset(60,60,6);
			TNT1 A 0 A_Light(0);
			STCF DEEEEEE 1 A_SetZoom(1.0, 7);
			STCF E 10 A_RecoilOffset(0,0,10);
			STCF FGHI 1;
			STCI A 20 A_Overlay(60, "DoSmoke");
		goto Ready.Active;
					
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_StartSound("Halo/Weapons/Stanchion/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			STCR ABC 2;
			TNT1 A 0 A_SetRecoil(0.45, 0, 4);
			STCR DEF 2;
			STCR G 1 A_SetRecoil(-1.45, 0, 1);
			STCR H 15;
			STCR IJKLMNO 2;
			STCR P 1 A_SetRecoil(1.45, 0, 1);
			STCR Q 15 A_ReloadClip();
			STCR RSTU 2;
			TNT1 A 0 A_SetRecoil(-0.45, 0, 4);
			STCR VWX 3;
		goto Ready.Active;

		Scope.ON:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom * 0.5, 3, true);
			TNT1 A 0 
			{
				bool holding = A_ButtonStatus(BT_ALTATTACK, BTS_HELD) && !A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED);
				invoker.zoom_btnstate = holding ? 0 : BTS_PRESSED;
				if(holding) return ResolveState("Scope.Ready");
				return ResolveState("Scope.Wait");
			}
		goto Scope.Wait;
		
		Scope.Two:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom * 2.0, 3, true);
			
		goto Scope.Ready;
		
		Scope.Wait:
			TNT1 A 1 
			{
				State ret = ResolveState(null);
				if(!invoker.enablezoom) ret = ResolveState("Scope.OFF");
				if(A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED)) ret = ResolveState("Scope.Two");
				return ret;
			}
		loop;

		Spawn:
			SNPF A -1;
		stop;
	}
}

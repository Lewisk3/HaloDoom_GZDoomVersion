// Nade items
class FragGrenades : Inventory
{
	class<Actor> nadeType;
	String throwSprite;
	String hudIcon;
	Sound throwSound;
	int nadeSlot;
	
	Property ThrowSound : throwSound;
	Property ThrowSprite : throwSprite;
	Property HudIcon : hudIcon;
	Property Slot : nadeSlot;
	Property Type : nadeType;

	Default
	{
		Inventory.MaxAmount 4;
		Inventory.PickupMessage "Picked up a frag grenade.";
		Inventory.PickupSound "Halo/Grenade/Frag/Pickup";
		+Inventory.KEEPDEPLETED;
		+FLOATBOB;
		+ROLLSPRITE;
		
		FloatBobStrength 0.25;
		
		FragGrenades.Slot 1;
		FragGrenades.ThrowSprite "HFRG";
		FragGrenades.HudIcon "Grenades/frag.png";
		FragGrenades.Type "FragGrenade_Proj";
		FragGrenades.ThrowSound "Halo/Grenade/Frag/Throw";
		
		Scale 0.10;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		A_SpriteOffset(0, -20);
		roll = 45;
	}
	
	States
	{
		// Make sure to cache all "throwSprite" here.
		// Otherwise, you'll be very strange issues, from GZDoom hard crashing
		// to graphics data being completely invalid.
		Cache:
			HFRG A 0;
			HPLS A 0;
		stop;
		
		Spawn:
			FRAG A -1;
		stop;
	}
}
class PlasmaGrenades : FragGrenades 
{
	Default
	{
		Inventory.PickupMessage "Picked up a plasma grenade.";
		Inventory.PickupSound "Halo/Grenade/Plasma/Pickup";
		
		FragGrenades.Slot 2;
		FragGrenades.ThrowSprite "HPLS";
		FragGrenades.HudIcon "Grenades/plasma.png";
		FragGrenades.Type "PlasmaGrenade_Proj";
		FragGrenades.ThrowSound "Halo/Grenade/Plasma/Throw";
	}
	
	States
	{
		Spawn:
			PLGN A -1;
		stop;
	}
}

// Nade projectiles
class FragGrenade_Proj : Actor
{
	Default
	{	
		BounceType "Doom";
		BounceCount 2;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+USEBOUNCESTATE;
		BounceFactor 0.6;
		Projectile;
		Gravity 0.67;
		+ROLLSPRITE;
		
		-NOGRAVITY;
		Speed 20;
		
		Radius 3;
		Height 3;
		Scale 0.08;
	}	
	
	override void Tick()
	{
		super.Tick();
		
		if(waterlevel > 0)
		{
			vel.xy *= 0.9;
			A_SetGravity(default.gravity * 0.75);
			
			if(!InStateSequence(CurState, FindState("Death"))) 
				SetState(FindState("Death"));
		}
	}
	
	States
	{
		Spawn:
			FRAG A 1
			{
				roll += 5;
			}
		loop;
		
		Bounce:
			FRAG A 1 
			{
				A_StartSound("Halo/Grenade/Frag/Bounce");
				roll -= 20;
			}
		goto Spawn;
		
		Crash:
		XDeath:
		goto Detonate;
		
		Death:
			FRAG A 28; 
		Detonate:
			TNT1 A 1
			{
				if(waterlevel > 0 || HitWater(CurSector, pos))
					A_StartSound("Halo/Grenade/Frag/ExplodeWater");
				else
					A_StartSound("Halo/Grenade/Frag/Explode");
					
				Spawn("FragGrenadeExplosion", pos);
			}
		stop;
	}
}


class FragGrenade_Smoke : TankRocket_Smoke
{
	Default
	{	
		Scale 1.0;
	}
}

class FragGrenade_FlyingExplosion : TankRocket_FlyingExplosion
{
	Default
	{
		Scale 0.20;
	}
}
class FragGrenadeExplosion : CheapActor
{	
	Default
	{
		Scale 1.0;
		Alpha 0.8;
		Damage 120;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				let sparks = Spawn("ImpactSparks", pos);
				if(sparks) sparks.A_SetScale(1.0);
				
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+20));
				if(flare) flare.A_SetScale(0.75);
				
				A_QuakeEx(2,2,2,10,0,1024);
			}
			SX04 ABCD 1 Bright;
			TNT1 A 0 
			{
				vector3 fxpos = (pos.xy, pos.z+40);
				HaloMath.SpawnFX("FragGrenade_FlyingExplosion", fxpos, angle, random(5,12), 10, 20, 180,45, 25);
				A_Explode(damage, 256);
			}
			SX04 EFGHIJKLMNOPQ 1 Bright
			{
				vector3 fxpos = (pos.xy, pos.z+20);
				if(!(frame%2))
					HaloMath.SpawnFX("FragGrenade_Smoke", fxpos, angle, 1, 20, 20, rstyle:STYLE_Subtract);
			}
		stop;
	}
}


// Plasma Grenade
class PlasmaGrenade_Proj : Actor
{
	Actor hitactor;
	bool onfloor;
	bool onceiling;
	vector3 hitoffs;
	
	Default
	{	
		Projectile;
		Gravity 0.67;
		+ROLLSPRITE;
		
		-NOGRAVITY;
		Speed 40;
		
		Radius 5;
		Height 5;
		Scale 0.08;
	}	
		
	override void Tick()
	{
		super.Tick();
		
		if(!bMISSILE && !bNOGRAVITY)
		{
			onfloor = (pos.z <= floorz);
			onceiling = (pos.z >= ceilingz);
			bNOGRAVITY = true;
			
			vel *= 0;
		}		
		
		let smoke = Spawn("PlasmaGrenade_Trail", pos);
		if(smoke) 
		{
			smoke.A_SetScale(0.15);
			if(!bMISSILE)
			{
				smoke.vel.z = 1;
				smoke.vel.xy = (1,1) * frandom(-1.0,1.0);
			}
		}
		
		if(waterlevel > 0)
		{
			vel.xy *= 0.9;
			A_SetGravity(default.gravity * 0.75);
			
			if(!InStateSequence(CurState, FindState("Death"))) 
				SetState(FindState("Death"));
		}
		
		if(hitactor)
		{
			vector3 followPos = HaloMath.V3Offset(hitactor.angle, hitactor.pitch, hitactor.roll, hitoffs.x * 0.25, hitoffs.y * 0.25, hitoffs.z, 1.0);
			followPos = level.Vec3Offset(hitactor.pos, followPos);
			SetOrigin(followPos, true);
		}
		
		if(onfloor || onceiling) 
		{
			double toz = onfloor ? floorz : onceiling ? ceilingz : pos.z;
			SetOrigin((pos.xy, toz), true);
		}
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if(!victim.bSHOOTABLE) return -1;
		if(hitactor) return -1;
		if(victim == target) return -1;
		
		if(!hitactor)
		{
			vel *= 0;
			hitactor = victim;
			hitoffs = HaloMath.DiffToLocal(pos, victim.pos, (victim.angle, victim.pitch));
		}
		
		return -1;
	}
	
	States
	{
		Spawn:
			PLGN A 1
			{
				roll += 5;
			}
		loop;
		
		Crash:
		XDeath:
		Death:
			PLGN A 70 
			{
				A_StartSound("Halo/Grenade/Plasma/Armed"); 
				A_AlertMonsters(128);
			}
		Detonate:
			TNT1 A 1
			{
				if(waterlevel > 0 || HitWater(CurSector, pos))
					A_StartSound("Halo/Grenade/Plasma/ExplodeWater");
				else
					A_StartSound("Halo/Grenade/Plasma/Explode");
					
				Spawn("PlasmaGrenadeExplosion", pos);
			}
		stop;
	}
}

class PlasmaGrenade_Smoke : Actor
{
	Default
	{	
		+NOINTERACTION;
		+ROLLSPRITE;
		Scale 1.0;
		RenderStyle "Add";
		Translation "0:255=@60[24, 180, 237]";
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		
		roll = frandom(-60,90);
		A_SetScale(default.scale.x * frandom(0.25, 0.75));
	}
	
	States
	{
		Spawn:
			FRME ABCDEFGHIJKLMNOPQR 2;
			FRME S 2 
			{
				A_FadeOut(0.1);
				A_SetScale(scale.x * 0.90);
			}
		wait;
	}
}

class PlasmaGrenade_Trail : Actor
{
	Default
	{	
		+NOINTERACTION;
		Scale 1.0;
		RenderStyle "Add";
	//	Translation "0:255=@60[24, 180, 237]";
	}
	
	States
	{
		Spawn:
			L2NB B 2 Bright;
			L2NB B 1 Bright 
			{
				A_FadeOut(0.04);
				A_SetScale(Scale.X * 0.90);
			}
		wait;
	}
}

class PlasmaGrenadeExplosion : CheapActor
{	
	Default
	{
		Scale 1.0;
		Alpha 0.8;
		DamageType "PlasmaExplosion";
		Translation "0:255=@60[24, 180, 237]";
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				vector3 fxpos = (pos.xy, pos.z+20);
				HaloMath.SpawnFX("PlasmaGrenade_Smoke", fxpos, angle, 20, 20, 20, frandom(0,360), frandom(-30,30), frandom(-3, 3));
				HaloMath.SpawnFX("WraithPlasma_FlyingPlasma", fxpos, angle, random(5,12), 10, 20, 180,45, 12);
				
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+30));
				if(flare)
				{
					flare.A_SetRenderStyle(1.0, STYLE_AddShaded);
					flare.SetShade(0xFF18B4ED);
					flare.A_SetScale(0.75);
				}
				
				A_QuakeEx(2,2,2,20,0,1024);
			}
			TNT1 A 0 A_Explode(200, 256, damagetype:damagetype);
			SX04 ABCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}

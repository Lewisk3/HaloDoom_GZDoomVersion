// Nade items
class FragGrenades : Inventory
{
	class<Actor> nadeType;
	String throwSprite;
	String hudIcon;
	int nadeSlot;
	
	Property ThrowSprite : throwSprite;
	Property HudIcon : hudIcon;
	Property Slot : nadeSlot;
	Property Type : nadeType;

	Default
	{
		Inventory.MaxAmount 4;
		Inventory.PickupMessage "Picked up a frag grenade.";
		Inventory.PickupSound "Halo/Grenade/Frag/Pickup";
		+Inventory.KEEPDEPLETED;
		+FLOATBOB;
		+ROLLSPRITE;
		
		FloatBobStrength 0.25;
		
		FragGrenades.Slot 1;
		FragGrenades.ThrowSprite "HFRG";
		FragGrenades.HudIcon "Grenades/frag.png";
		FragGrenades.Type "FragGrenade_Proj";
		
		Scale 0.10;
	}
	
	States
	{
		// Make sure to cache all "throwSprite" here.
		// Otherwise, you'll be very strange issues, from GZDoom hard crashing
		// to graphics data being completely invalid.
		Cache:
			HFRG A 0;
			HPLS A 0;
		stop;
		
		Spawn:
			FRAG A -1 NoDelay 
			{
				A_SpriteOffset(0, -20);
				roll = 45;
			}
		stop;
	}
}
class PlasmaGrenades : FragGrenades 
{
	Default
	{
		Inventory.PickupMessage "Picked up a plasma grenade.";
		Inventory.PickupSound "Halo/Grenade/Plasma/Pickup";
		
		FragGrenades.Slot 2;
		FragGrenades.ThrowSprite "HPLS";
		FragGrenades.HudIcon "Grenades/plasma.png";
		FragGrenades.Type "FragGrenade_Proj";
	}
}

// Nade projectiles
class FragGrenade_Proj : Actor
{
	Default
	{	
		BounceType "Doom";
		BounceCount 2;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+USEBOUNCESTATE;
		BounceFactor 0.6;
		Projectile;
		Gravity 0.67;
		+ROLLSPRITE;
		
		-NOGRAVITY;
		Speed 20;
		
		Radius 5;
		Height 5;
		Scale 0.08;
	}	
	
	override void Tick()
	{
		super.Tick();
		
		if(waterlevel > 0)
		{
			vel.xy *= 0.9;
			A_SetGravity(default.gravity * 0.75);
			
			if(!InStateSequence(CurState, FindState("Death"))) 
				SetState(FindState("Death"));
		}
	}
	
	States
	{
		Spawn:
			FRAG A 1
			{
				roll += 5;
			}
		loop;
		
		Bounce:
			FRAG A 1 
			{
				A_StartSound("Halo/Grenade/Frag/Bounce");
				roll -= 20;
			}
		goto Spawn;
		
		Crash:
		XDeath:
		goto Detonate;
		
		Death:
			FRAG A 28; 
		Detonate:
			TNT1 A 1
			{
				if(waterlevel > 0 || HitWater(CurSector, pos))
					A_StartSound("Halo/Grenade/Frag/ExplodeWater");
				else
					A_StartSound("Halo/Grenade/Frag/Explode");
					
				Spawn("FragGrenadeExplosion", pos);
			}
		stop;
	}
}


class FragGrenade_Smoke : TankRocket_Smoke
{
	Default
	{	
		Scale 1.0;
	}
}

class FragGrenade_FlyingExplosion : TankRocket_FlyingExplosion
{
	Default
	{
		Scale 0.20;
	}
}
class FragGrenadeExplosion : CheapActor
{	
	Default
	{
		Scale 1.0;
		Alpha 0.8;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1 
			{
				let sparks = Spawn("ImpactSparks", pos);
				if(sparks) sparks.A_SetScale(1.0);
				
				let flare = Spawn("TankRocket_Flare", (pos.xy, pos.z+20));
				if(flare) flare.A_SetScale(0.75);
				
				A_QuakeEx(2,2,2,10,0,1024);
			}
			SX04 ABCD 1 Bright;
			TNT1 A 0 
			{
				vector3 fxpos = (pos.xy, pos.z+40);
				HaloMath.SpawnFX("FragGrenade_FlyingExplosion", fxpos, angle, random(5,12), 10, 20, 180,45, 25);
				A_Explode(86, 256);
			}
			SX04 EFGHIJKLMNOPQ 1 Bright
			{
				vector3 fxpos = (pos.xy, pos.z+20);
				if(!(frame%2))
					HaloMath.SpawnFX("FragGrenade_Smoke", fxpos, angle, 1, 20, 20, rstyle:STYLE_Subtract);
			}
		stop;
	}
}

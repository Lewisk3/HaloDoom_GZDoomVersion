
class Halo_SniperClip : Ammo 
{
	Default
	{
		Inventory.MaxAmount 4;
	}
}
class Halo_Sniper_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	
	Default 
	{
		Radius 4;
		Height 4;
		Scale 0.5;
		
		Inventory.Amount 2;
		Inventory.MaxAmount 40;
		Inventory.Icon "HLAML0";
		Inventory.PickupMessage "+2 Sniper Ammo.";
		
		Ammo.BackpackMaxAmount 80;
	}
	
	States
	{
		Spawn:
			HLAM L -1 Bright;
		stop;
	}
}


class HaloSniper_Bullet : HaloBullet 
{
	Default
	{
		Radius 2;
		Height 2;
	}
	
	Default
	{
		DamageType "SSG";
		HaloProjectile.SetRanges SNIPER_RANGE1, SNIPER_RANGE2;
		HaloProjectile.MinRangeDamage SNIPER_MINDMG; 
		HaloProjectile.BaseDamage SNIPER_DMG;
		HaloProjectile.Speed_MPS SNIPER_BMPS;
		HaloProjectile.HeadshotDMGFactor SNIPER_HEDMOD;
		HaloProjectile.RipperCount 3;
		HaloProjectile.DoExplosiveDamage 64, 128;
	}
}

class Halo_SniperRifle : HaloGun
{
	Default
	{
		Weapon.SlotNumber 2;
		Obituary "%o got the Call of Duty treatment from %k's Sniper Rifle.";
		Inventory.PickupMessage	"Picked up the S99-Bolt-Action Sniper Rifle.";
		Tag "Sniper Rifle";
		Weapon.BobSpeed 2.12;
		Weapon.BobRangeX 0.63;
		Weapon.AmmoType1 "Halo_Sniper_Reserves";
		Weapon.AmmoGive 4;
		Weapon.AmmoType2 "Halo_SniperClip";
		HaloGun.PowerTier P_MID;
				
		// Recoil
		RecoilWeapon.RecoilSpeed 20;
		HaloGun.Bloom 1.25;
		HaloGun.BloomSpeed 0.08;
		HaloGun.BaseRecoil SNIPER_RECOIL;
		HaloGun.Inaccuracy SNIPER_ACCMOD;
		HaloGun.Crosshair "SNPRet", 1.0;
		HaloGun.UIGraphic "WI_SNPR", 1.0;
		HaloGun.UISight "SI_SNPR", 1.0, 0.8;
		HaloGun.SetupScope 4.0, 0.25;
		HaloGun.ZoomSounds "Halo/Weapons/Sniper/Zoom/IN", "Halo/Weapons/Sniper/Zoom/OUT";
		
		RecoilWeapon.YOffsetRange -10, 40;
	}
	
		
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/Sniper/Fire");
		MarkSound("Halo/Weapons/Sniper/Fire/Bass");
		MarkSound("Halo/Weapons/Sniper/Bolt");
		MarkSound("Halo/Weapons/Sniper/Reload");
		MarkSound("Halo/Weapons/Sniper/Ready");
	}
	
	
	action void A_FireSniper()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/Sniper/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/Sniper/Fire/Bass", CHANF_OVERLAP, true);
		vector3 shootpos = A_ShootProjectile("HaloSniper_Bullet", 1, 8);
		A_SetSFXPos(25,-5,-3);
		let trail = A_TrailSFX(shootpos, 1.75);
		if(trail) trail.A_SetScale(2.0);
		
		A_SetSFXPos(25,-5,-7);
		for(int i = 0; i < 15; i++)
			A_SpawnSFX("MuzzleSmoke", 0,0);
			
		A_TakeAmmo(1);
		A_UpdateSpread();
	}

	States
	{
		
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Sniper/Ready");
			HSND ABCDEF 1 A_DoSelectAnim();
		Ready.Active:
			HSNI A 1 
			{
				A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
			}
		loop;
		
		Ready.Dryfire:
			HSNI A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			HSND A 1 A_GunRaise();
		wait;

		Deselect:
			HSND FEDCB 1;
			HSND A 1 A_GunLower();
		wait;
		
		// DBL - 30RPM -
		// 30/60.  = 0.5
		// 35/0.5  = 70 frames
		// 26 frames for shot, leaves 44 for reload.
		Fire:
			TNT1 A 0 A_GunCheckReload();
			HSNF A 1 Bright
			{
				A_RecoilOffset(random(-12,12),24,3);
				A_SetRecoil(4.42, 3.42, 2);
				A_SetZoom(0.90, 2);
				A_FireSniper();
				A_RollQuake(4, 20, 3);
				A_RQuakeEx(3,3,3,10,0,20,"",QF_RELATIVE);
			}
			HSNF BC 1 Bright;
			TNT1 A 0 A_Light(0);
			HSNF DEFGGHIJKL 1 A_SetZoom(1.0, 7);
			HSNF L 4;
		goto Bolt;
		
		// 1,280ms @ 40ms per frame rendered.
		// ~45 frames
		Bolt:
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_StartSound("Halo/Weapons/Sniper/Bolt",CHAN_WEAPON,CHANF_OVERLAP);
			HSNB ABCDEFGH 1;
			HSNB IJKLMNO 1 A_SetRecoil(-0.34, 0.67, 1);
			TNT1 A 0 
			{
				A_SetSFXPos(25,-20,-20);
				A_SpawnSFX("SmallCasing", -90,-20);
			}
			HSNB PPO 2;
			HSNB ONNMLKJ 1; 
			HSNB IHGFE 1 A_SetRecoil(0.34, -0.67, 1);
			HSNB DCBAA 1;
		goto Ready.Active;
				
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_StartSound("Halo/Weapons/Sniper/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			HSR1 ABCDEFG 2;
			HSR1 HIJKLM 1;
			HSR1 NN 1 A_SetRecoil(-2.0, 0, 3);
			HSR1 OPQRS 1;
			HSR1 T 4;
			HSR1 UVWXYZ 1;
			HSR2 AB 2;
			HSR2 CC 1 A_SetRecoil(2.0, 0, 3);
			TNT1 A 0 A_ReloadClip();
		// This is... less than ideal but, I don't want to create a varible for this.
			TNT1 A 0 A_JumpIf(!CountReloadAmmo(), "Reload.Empty");
		Reload.Full:
			HSR2 CDEFGHIJ 1;
			HSR2 KLMNOPQRST 2;
		goto Ready.Active;
		Reload.Empty:
			HSR2 CDEFGHIJ 1;
			HSR2 KLMNOPQRST 2;
		goto Bolt;

		Scope.ON:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom * 0.5, 3, true);
			TNT1 A 0 
			{
				bool holding = A_ButtonStatus(BT_ALTATTACK, BTS_HELD) && !A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED);
				invoker.zoom_btnstate = holding ? 0 : BTS_PRESSED;
				if(holding) return ResolveState("Scope.Ready");
				return ResolveState("Scope.Wait");
			}
		goto Scope.Wait;
		
		Scope.Two:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom * 2.0, 3, true);
		goto Scope.Ready;
		
		Scope.Wait:
			TNT1 A 1 
			{
				State ret = ResolveState(null);
				if(!invoker.enablezoom) ret = ResolveState("Scope.OFF");
				if(A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED)) ret = ResolveState("Scope.Two");
				return ret;
			}
		loop;

		Spawn:
			SNPF A -1;
		stop;
	}
}

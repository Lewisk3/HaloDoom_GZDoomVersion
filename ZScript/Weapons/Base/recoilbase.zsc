class RecoilWeapon : Weapon
{
	/* 
		Smooth weapon recoil by : Lewisk3 (Redxone)
	*/
		
	transient CVar cv_recoil;
	bool usesway, velsway, swapping;

	double recoil_pitch, defpitch;
	double recoil_angle, defangle;
	double defzoom, zoomfactor, zoomtimer;
	double woffsx, woffsy, wofftimer;
	double realoffsx, realoffsy;
	double yoff_min, yoff_max;
	double basezoom;
	double recoilmod;
	double rollshake_str, rollshake_time, rollshake_freq, rollshake_dirfreq, rollshake_maxtime;

	int deftimer, recoil_timer, newtimer, looksway;
	double swayspd, pitchmax, anglemax;
	
	Vector2 weapsway;
	Vector2 staticoffs;
	Vector2 curstaticoffs;

	property RecoilSpeed : deftimer;
	property LookSway : usesway, velsway, swayspd;
	property SwayRange : pitchmax, anglemax;
	Property YOffsetRange : yoff_min, yoff_max;
	property _Defaults : swapping;
	
	Default
	{
		RecoilWeapon.RecoilSpeed 6;
		Weapon.BobStyle "InverseSmooth";
		Weapon.BobRangeX 0.43;
		Weapon.BobRangeY 0.67;
		Weapon.BobSpeed 1.21;
		
		RecoilWeapon._Defaults true;
		RecoilWeapon.LookSway true, false, 2.5;
		RecoilWeapon.SwayRange 20.0, 10.0;
		RecoilWeapon.YOffsetRange 0, 40;
	}
	
	static double sign(int num)
	{
		return (num < 0 ? -1 : 1);
	}
	
	action void A_RecoilSetupWeaponReady(uint flags=0)
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if(!psp) return;
		
		let hplr = HaloPlayer(player.mo);
		double wyoffs = hplr ? hplr.weap_yoffs : 0;
		
		A_WeaponReady(flags);
		if(invoker.swapping && psp.y >= WEAPONTOP-wyoffs) invoker.swapping = false;
	}
		
	action void A_LookSway(float swayspeed, bool requirespd=false, Actor ptr = NULL)
	{
		if(!ptr) ptr = self;
		if(requirespd)
		{
			let plr = PlayerPawn(ptr);
			if(!plr) return;
			if(plr.vel.length() == 0) return;
			plr.player.WeaponState |= WF_WEAPONBOBBING;
		}
		// This is a port of Nash's ACS weapon sway: https://forum.zdoom.org/viewtopic.php?f=45&t=52122
		int yaw = ptr.GetPlayerInput(INPUT_YAW) / 1280; 
		int wpitch = (1.0 - (ptr.pitch * 4)) / 10;
		double swayMod = yaw * 20;
		if (swayMod < 0 && invoker.looksway >= swayMod) invoker.looksway -= swayspeed - yaw; // left
		if (swayMod > 0 && invoker.looksway <= swayMod) invoker.looksway += swayspeed + yaw; // right
		if (yaw == 0)
		{
			if (invoker.looksway < 0) invoker.looksway = invoker.looksway > 0 ? 0 : invoker.looksway + 1.0;
			if (invoker.looksway > 0) invoker.looksway = invoker.looksway < 0 ? 0 : invoker.looksway - 1.0;
		}
		invoker.looksway = clamp(invoker.looksway, -invoker.anglemax, invoker.anglemax);
		wpitch = clamp(wpitch, -invoker.pitchmax, 8 - invoker.pitchmax);
		invoker.weapsway = ( invoker.looksway, -wpitch ); // -wpitch
		
		//ptr.A_WeaponOffset(invoker.weapsway.x,invoker.weapsway.y, WOF_ADD | WOF_INTERPOLATE);
	}
	
	static double FrameInterpolate(double from, double to, double spd)
	{
		if(spd <= 0) spd = 1;
		if(from < to) from += abs(from-to)/spd;
		if(from > to) from -= abs(from-to)/spd;
		return from;
	}
	
	static vector2 PosInterpolate(Vector2 from, Vector2 to, double spd, bool swap=false)
	{
	    if (swap)
		{
			vector2 tmp = from;
			from = to;
			to = tmp;
		}
		if(from.x < to.x) from.x += abs(from.x-to.x)/spd;
		if(from.y < to.y) from.y += abs(from.y-to.y)/spd;
		if(from.x > to.x) from.x -= abs(from.x-to.x)/spd;
		if(from.y > to.y) from.y -= abs(from.y-to.y)/spd;
		return (swap ? to : from);
	}

	action void A_SetZoom(double z, double zoomframes, bool keepzoom = false)
	{
		if(keepzoom) invoker.basezoom = z;
		if(invoker.zoomfactor == 0) invoker.zoomfactor = 1;
		invoker.defzoom = (z == 0) ? 1.0 : z;
		invoker.zoomtimer = zoomframes;
	}
	
	action void A_SetRecoil(double p, double a, double spd)
	{
		invoker.recoil_pitch = p * invoker.recoilmod;
		invoker.recoil_angle = a * invoker.recoilmod;
		invoker.recoil_timer = (spd == 0) ? invoker.deftimer : spd;
		invoker.newtimer = invoker.recoil_timer;
	}
	
	action void A_AddRecoil(double p, double a, double spd)
	{
		invoker.recoil_pitch += p * invoker.recoilmod;
		invoker.recoil_angle += a * invoker.recoilmod;
		invoker.recoil_timer = (spd == 0) ? invoker.deftimer : spd;
		invoker.newtimer = invoker.recoil_timer;
	}
	
	action void A_ModifyRecoil(double mod)
	{
		invoker.recoilmod = mod;
	}
	
	action void A_RecoilOffset(double x, double y, double spd, bool add = false)
	{
		if(add) 
		{
			x += invoker.woffsx;
			y += invoker.woffsy;
		}
		invoker.woffsx = x;
		invoker.woffsy = y;
		invoker.wofftimer = spd;
		A_UpdateOffsets();
	}
	
	action void A_SetupSwapping()
	{
		invoker.swapping = true;
	}
	
	action void A_RLower(int speed, bool dosetup = true)
	{
		if(dosetup) A_SetupSwapping();
		A_SetCrossHair(0);
		invoker.realoffsx = invoker.woffsx;
		invoker.realoffsy = invoker.woffsy;
		// Reset recoil interpolation if deselected.
		invoker.recoil_pitch = 0;
		invoker.recoil_angle = 0;
		invoker.defpitch = pitch;
		invoker.defangle = angle;
		A_Lower(speed);
	}
	
	action void A_RRaise(int speed, bool dosetup = true)
	{
		if(dosetup) A_SetupSwapping();
		A_SetCrossHair(9);
		invoker.realoffsx = invoker.woffsx;
		invoker.realoffsy = invoker.woffsy;
		A_Raise(speed);
	}
	
	
	action void A_UpdateOffsets(Actor ptr=NULL)
	{
		if(!ptr) ptr = self;
	
		let hplr = HaloPlayer(ptr);
		double wyoffs = hplr ? hplr.weap_yoffs : 0;
		if(invoker.swapping) wyoffs = 0;
		
		vector2 yrange = (invoker.yoff_min + wyoffs, invoker.yoff_max + wyoffs);
		if(!invoker.swapping)
		{
			invoker.woffsy = clamp(invoker.woffsy, yrange.x, yrange.y);
			invoker.realoffsy = clamp(invoker.realoffsy, yrange.x, yrange.y);
		}
		
		invoker.staticoffs.y = max(invoker.yoff_min, invoker.staticoffs.y);
		invoker.curstaticoffs.x = HaloMath.Lerp(invoker.curstaticoffs.x, invoker.staticoffs.x, 0.35);
		invoker.curstaticoffs.y = HaloMath.Lerp(invoker.curstaticoffs.y, invoker.staticoffs.y, 0.35);
		if( invoker.realoffsx == invoker.woffsx && invoker.realoffsy == invoker.woffsy+wyoffs) 
		{
			vector2 finaloffs = (
				invoker.weapsway.x+invoker.curstaticoffs.x,
				32 + invoker.weapsway.y+invoker.curstaticoffs.y
			);
			if(!invoker.swapping)ptr.A_WeaponOffset(finaloffs.x, finaloffs.y);
			return;
		}
		
		double diffx = abs(invoker.realoffsx - invoker.woffsx);
		double diffy = abs(invoker.realoffsy - invoker.woffsy);
		if(diffx < 0.1) invoker.realoffsx = invoker.woffsx; 
		if(diffy < 0.1) invoker.realoffsy = invoker.woffsy;

		vector2 finaloffs = (
			invoker.realoffsx+invoker.weapsway.x+invoker.curstaticoffs.x,
			32 + invoker.realoffsy+invoker.weapsway.y+invoker.curstaticoffs.y
		);
		ptr.A_WeaponOffset(finaloffs.x, finaloffs.y);
		
		invoker.realoffsx = RecoilWeapon.FrameInterpolate(invoker.realoffsx, invoker.woffsx, invoker.wofftimer);
		invoker.realoffsy = RecoilWeapon.FrameInterpolate(invoker.realoffsy, invoker.woffsy, invoker.wofftimer);
	}
	
	// [Lewisk]: Had to be re-implemented because the original uses self because it's an Action function.
	private void O_ZoomFactor(double zoom = 1, int flags = 0)
	{
		let player = Owner.player;
		if (player != NULL && player.ReadyWeapon != NULL)
		{
			zoom = 1 / clamp(zoom, 0.1, 50.0);
			if (flags & 1) Owner.player.FOV = Owner.player.DesiredFOV * zoom;
			if (flags & 2) zoom = -zoom;
			Owner.player.ReadyWeapon.FOVScale = zoom;
		}
	}
	
	action void A_RQuakeEx(int ix, int iy, int iz, int dur, int drad, int trad, sound sfx = "", int flags = 0, double wx = 1., double wy = 1., double wz = 1.)
	{	
		if(!invoker.cv_recoil) return;
		double cvi = invoker.cv_recoil.GetFloat();
		if(cvi <= 0) return;
		A_QuakeEx(ix*cvi,iy*cvi,iz*cvi,dur,drad,trad,sfx,flags,wx,wy,wz);
	}
	action void A_RQuake(int str, int dur, int drad, int trad, sound sfx = "")
	{	
		if(!invoker.cv_recoil) return;
		double cvi = invoker.cv_recoil.GetFloat();
		if(cvi <= 0) return;
		A_Quake(str*cvi,dur,drad,trad,sfx);
	}
	
	action void A_RollQuake(double str, int dur, double freq = 4, bool noreplace = false, RecoilWeapon ptr = null)
	{
		if(!ptr) ptr = invoker;
		
		if(!noreplace || ptr.rollshake_str == 0)
		{
			ptr.rollshake_str = str;
			ptr.rollshake_time = dur;
			ptr.rollshake_maxtime = dur;
			ptr.rollshake_freq = freq;
			ptr.rollshake_dirfreq = 0;
		}
		else
		{
			ptr.rollshake_time = dur;
			ptr.rollshake_maxtime = dur;
		}
	}
	
	override void DoEffect()
	{
		if(!recoilmod) recoilmod = 1.0;
		if(!Owner) return;
		PlayerInfo plr = PlayerPawn(Owner).player;
		if(!plr) return;
		
		// Roll shake.
		if(rollshake_time > 0)
		{
			double strmod = HaloMath.fmap(rollshake_time, 0, rollshake_maxtime, 0.1, 1.0);
			if(rollshake_dirfreq >= rollshake_freq) 
			{
				rollshake_str *= -1;
				rollshake_dirfreq = -1;
			}
			rollshake_dirfreq++;
			
			double rshake = rollshake_str * strmod * cv_recoil.GetFloat();
			Owner.A_SetRoll(Owner.roll + rshake, SPF_INTERPOLATE);
			rollshake_time--;
		}
		else if(rollshake_str != 0)
		{
			Owner.A_SetRoll(HaloMath.Lerp(Owner.roll, 0, 0.25), SPF_INTERPOLATE);
			if(abs(Owner.roll) <= 0.01) 
			{
				Owner.roll = 0;
				rollshake_str = 0;
			}
		}
		
		// Stop here if weapon isn't selected.
		if(plr.ReadyWeapon != self) 
		{
			A_SetZoom(1.0, 1);
			return;
		}
		plr.WeaponState |= WF_WEAPONBOBBING;
		
		if(!cv_recoil)
			cv_recoil = CVar.GetCVar("halodoom_recoil_intensity", plr);
		
		bool dosway = !swapping;
		if( usesway && dosway ) A_LookSway(3,velsway,Owner);
		A_UpdateOffsets(Owner);
		
		if( abs(recoil_pitch) == 0 && abs(recoil_angle) == 0 )
		{
			defangle = Owner.angle;
			defpitch = Owner.pitch;
		}
		
		if(PlayerPawn(Owner))
		{
			PlayerInfo plr = PlayerPawn(Owner).player;
			if( abs(plr.cmd.pitch) > 1 )	defpitch = Owner.pitch;
			if( plr.centering || !(level.IsFreelookAllowed()) ) defpitch = 0;
			if( abs(plr.cmd.yaw  ) > 1 )	defangle = Owner.angle;
		}
		
		if(recoil_timer)
		{
			Owner.A_setPitch( Owner.pitch - recoil_pitch );
			Owner.A_setAngle( Owner.angle - recoil_angle );	
		}
		
		double zoom_offs = basezoom != 0 ? basezoom - 1 : 0;
		double zoom_intensity = cv_recoil.GetFloat();  
		if(zoom_intensity == 0)
		{
			zoomfactor = 1.0;
			O_ZoomFactor(zoomfactor + basezoom, ZOOM_INSTANT);
		}
		else
		{
			zoomfactor = FrameInterpolate(zoomfactor, defzoom + zoom_offs, zoomtimer / zoom_intensity);
			if(zoomfactor > 0)O_ZoomFactor(zoomfactor + basezoom, ZOOM_INSTANT);
		}
		
		if(recoil_timer > 0) recoil_timer--;
		
		if(recoil_timer <= 0)
		{
			double ipitch = FrameInterpolate(Owner.pitch,defpitch,deftimer);
			double iangle = FrameInterpolate(Owner.angle,defangle,deftimer);
			if( abs(ipitch-defpitch) <= 0.1 && abs(iangle-defangle) <= 0.1)
			{	
				recoil_pitch = 0;
				recoil_angle = 0;
			}
			Owner.A_setPitch( ipitch );
			Owner.A_setAngle( iangle );	
		}
		
		// Idle Bob
		double bobz = cos(level.maptime * 3) * 0.5;
		woffsy += bobz; 
				
		double velz = Owner.vel.z * 0.6;
		velz = clamp(velz, -10, 10);
		woffsy += velz;
		woffsy *= 0.8;
		super.DoEffect();
	}
}

class HaloGun : RecoilWeapon
{
	enum PowerTiers
	{
		P_NULL   = 1 << 0,
		P_WEAK   = 1 << 1, // Unused
		P_NORM   = 1 << 2,
		P_MID    = 1 << 3,
		P_STRONG = 1 << 4,
		P_POWER  = 1 << 5,
		P_ENERGY = 1 << 6,
		P_UBER   = 1 << 7,
		P_MELEE  = 1 << 8
	}
				
	transient CVar cvfx_smoke;
	transient CVar cvfx_casings;
	vector3 sfx_pos;
	bool debug_sfxpos;
	const BTN_SWITCHWEAP = BT_USER1;
	bool first_shot; // Tied to fire btn.
	bool pbtn_fire;
	bool pbtn_altfire;
	bool backpack_reloading;
	bool force_deselect;
	uint backpack_reloadtimer;
	uint backpack_reloadmaxtime;
	uint SpawnTier;
	int reload_ammoleft;
	double damage_modifier;
	double baserecoil;
	double spreadmod; // Spread introduced by continuous fire
	double bloomamt, bloomspd, accmod;
	double rotation_range;
	double rotation_sens;
	bool donefirstdrawanim; 
	bool handsbusy; // Keep track of melee stuff and other hand actions.
	Weapon NextWeapon;
	
	// UI Stuff
	const SIGHT_OVERLAY = 0xFF;
	const MELEE_OVERLAY = 0xA0;
	const FEET_OVERLAY = -0xB0;
	string wcrosshair;
	string UI_Icon;
	string UI_Sight;
	double iconScaleX;
	double iconScaleY;
	double sightscale;
	double scoperecoil;
	double sightalpha;
	double meleelower;
	double wcrosshairscale;
	bool enablezoom;
	double scopezoom;
	bool zoomed;
	int zoom_btnstate;
	string gametypes_str; // Spawn filters based on selected gametype.
	
	bool uses_battery;
	bool GunLightningFlash;
	
	int battery_drain;
	double heat;
	
	uint sightFlags;
	flagdef SI_Fullscreen : sightFlags, 0;
	flagdef SI_Rotate : sightFlags, 1;
	flagdef SI_AlwaysHide : sightFlags, 2;
	
	// Disable HUD while selected.
	bool HUD_Hide;
	
	// Sound Effects
	const CHAN_RELOADING = CHAN_7;
	Sound snd_zoomin;
	Sound snd_zoomout;
	
	Property Bloom : bloomamt;
	Property BloomSpeed : bloomspd;
	Property Crosshair : wcrosshair, wcrosshairscale;
	Property BaseRecoil : baserecoil;
	Property Inaccuracy : accmod;
	Property SwayRange : rotation_range;
	Property SwaySpeed : rotation_sens;
	Property BackpackReloadTime : backpack_reloadmaxtime;
	property UIGraphic : UI_Icon, iconScaleX, iconScaleY;
	Property UISight : UI_Sight, sightscale, sightalpha;
	Property SetupScope : scopezoom, scoperecoil;
	Property ZoomSounds : snd_zoomin, snd_zoomout;
	Property LowerOnMelee : meleelower;
	Property HasBattery : uses_battery, battery_drain;
	Property Availability : gametypes_str;
	Property PowerTier : SpawnTier;
	Property _ProjDamageMod : damage_modifier;

	enum ButtonStates
	{
		BTS_UP = 0,
		BTS_DOWN,
		BTS_HELD,
		BTS_RELEASED,
		BTS_PRESSED
	};
	
	Default
	{
		Height 56;
		RecoilWeapon.RecoilSpeed 16;
		HaloGun.Bloom 0.32;
		HaloGun.Crosshair "", 1;
		HaloGun.BaseRecoil 2;
		HaloGun.BackpackReloadTime 35;
		HaloGun.UISight "SI_DEF", 0.3, 0.75;
		HaloGun.SetupScope 1.3, 1.0;
		HaloGun.UIGraphic "MISSNG", 1.0, 1.0;
		HaloGun.SwayRange 4.0;
		HaloGun.SwaySpeed 2.5;
		HaloGun._ProjDamageMod 1.0;
		HaloGun.LowerOnMelee 50;
		HaloGun.PowerTier P_NULL;
		HaloGun.Availability "ALL";
		Weapon.BobRangeX 1.5;
		Weapon.BobRangeY 0.6;
		Weapon.BobSpeed 0.5;
		HaloGun.ZoomSounds "Halo/Weapons/SuitZoom/IN", "Halo/Weapons/SuitZoom/OUT";
		Inventory.PickupSound "Halo/Pickup/Weapon";
	}

	// Called when a new level is loaded.
	virtual void LevelLoaded()
	{
		if(handsbusy) 
		{
			let haloplr = HaloPlayer(Owner);
			if(haloplr) haloplr.ResetMovementMods();
			
			A_FinishMelee();
		}
	}

	// Game Type functions.
	clearscope static uint getGameTypeFlags(class<HaloGun> weap)
	{
		let weapDefs = GetDefaultByType(weap);
		return HaloMath.gameTypesToFlags(weapDefs.gametypes_str);
	}
		
	clearscope static void getGameTypeWeapons(uint gametype, out Array<String> weapslist)
	{
		for(int i = 0; i < AllActorClasses.Size(); i++)
		{
			let actType = HaloGun(GetDefaultByType(AllActorClasses[i]));
			if( !actType || actType.getClass() == "HaloGun") continue;
			
			// Skip weapons outside spawning parameters.
			uint weapon_gametype = Halogun.getGameTypeFlags(actType.getClass());
			if( gametype != 0 && !(weapon_gametype & gametype) ) 
				continue;
						
			weapslist.Push(actType.getTag());
		}
	}

	// Weapon functions
	override void OnDrop (Actor dropper) 
	{
		let wp = WeaponPickupProxy.BecomeWeaponProxy(self, !!dropper.player);
		if(wp) wp.clipammo = dropper.countinv(ammotype2);
	}
	
	action double A_CheckMeleeRange(double maxrange = 512)
	{
		FLineTraceData lt;
		LineTrace(angle, maxrange, pitch, 0, player.viewheight, data:lt);
		return lt.Distance;
	}
		
	action void DoSpriteLightning(double amt, double boltAngle, vector2 startPos, vector2 xy_spread = (20,20), double boltlen = 100, double stepsize = 1.0, double roughness = 10, uint layerStart = -200)
	{
		uint curLayer = layerStart;
		double boltSize = 0.5;
		double curAngle = boltAngle;
		vector2 curPos = startPos;
		PSprite prevBiri;
		
		int adjustedAmt = max(amt * halodoom_effectintensity, 0);
		for(int x = 0; x < min(adjustedAmt,15); x++)
		{
			curAngle = boltAngle;
			curPos = startPos + (
				frandom(-xy_spread.x,xy_spread.x), 
				frandom(-xy_spread.y,xy_spread.y)
			);
			prevBiri = NULL;
			
			for(int i = 0; i < boltlen; i++)
			{
				curAngle += frandom(-roughness, roughness);
				vector2 dir = ( cos(curAngle), sin(curAngle) ) * (boltSize * stepsize);
				curPos += dir;
				
				player.setPSprite(curLayer, ResolveState("SetupGunLightning"));
				PSprite curBiri = player.GetPSprite(curLayer);
				if(curBiri)
				{
					curBiri.x = curPos.x;
					curBiri.y = curPos.y;
					curBiri.bPivotPercent = true;
					curBiri.bAddWeapon = true;
					curBiri.bAddBob = true;
					curBiri.pivot = (0.5, 0.5);
					curBiri.scale = (1.0,1.0) * (1.0 - (double(max(i,1))/boltLen));
					curBiri.rotation = curAngle;
					curBiri.alpha = 1.0;
					
					if(prevBiri)
					{
						double facingAngle = atan2( prevBiri.y - curBiri.y, prevBiri.x - curBiri.x );
						curBiri.rotation = facingAngle;
					}
					
					prevBiri = curBiri;
				}
				
				if(layerStart < 0) 
					curLayer--;
				else
					curLayer++;
			}
		}
	}
	
	action Actor A_HaloMelee(int damage, double range = 48, vector2 fpthrust = (12,5), Sound hitsnd = "", Sound wallsnd = "", Name damageType = "Melee")
	{
		return DoHaloMelee(self, damage,range,fpthrust,hitsnd,wallsnd,damageType);
	}
	
	static Actor DoHaloMelee(Actor source, int damage, double range = 48, vector2 fpthrust = (12,5), Sound hitsnd = "", Sound wallsnd = "", Name damageType = "Melee")
	{	
		FLineTraceData lt;
		double aimz = source.player ? source.player.viewheight : (source.height * 0.5);
		source.LineTrace(source.angle, range, source.pitch, 0, aimz, data:lt);
		Actor victim = lt.HitActor;
		int aimCheck = -6;
		while (aimCheck++ < 6 && !victim)
		{
			source.LineTrace(source.angle + (aimCheck * 8), range, source.pitch, 0, aimz, data:lt);
			victim = lt.hitActor;
		}
		
		if(victim && victim.bSHOOTABLE) 
		{
			vector3 victimAngles = level.sphericalCoords(victim.pos, source.pos, (victim.angle, victim.pitch));
			if(abs(victimAngles.x) >= 120) damage *= 3.45; // Backstab!
		
			double inertia = HaloMath.GetInertia(victim.mass);
			victim.DamageMobJ(source, source, damage, damageType, 0, source.angle);
			if(!victim.bNOBLOOD) victim.BloodSplatter(lt.HitLocation, source.angle, true);
			victim.Thrust(fpthrust.x*inertia, source.angle);
			victim.vel.z += fpthrust.y;
			source.A_Quake(2,3,0,20,"");
			source.A_StartSound(hitsnd, CHAN_WEAPON, flags:CHANF_OVERLAP);
						
			let haloplr = HaloPlayer(source);
			if(haloplr) haloplr.OnMeleeHit(victim);
		}
		else if(lt.HitType != TRACE_HitNone) 
		{
			let ln = lt.HitLine;
			source.A_Quake(2,3,0,20,"");
			source.A_StartSound(wallsnd, CHAN_WEAPON, flags:CHANF_OVERLAP);
			if(ln) ln.Activate(source, 0, SPAC_Impact);
		}
		return victim;
	}
	
	
	// For some reason weapons start with an odd offset.
	action void A_DoSelectAnim(double yoffs = 0., bool first_time_draw = false)
	{
		 A_RecoilOffset(0, 20 + yoffs, 2);
		 if(first_time_draw) invoker.donefirstdrawanim = true;
	}

	action void A_UpdateSpread()
	{
		invoker.spreadmod += invoker.bloomamt;
	}
	
	action double A_RecoilSpread()
	{
		double scopemod = (invoker.scoperecoil == 0) ? 1.0 : invoker.scoperecoil;
		double finalspread = frandom[GunRecoil](-invoker.baserecoil, invoker.baserecoil)*(1.0+(invoker.spreadmod*invoker.accmod)) * scopemod;
		return finalspread;
	}
	
	action void A_SetFlashColor(Color col, double alpha)
	{
		let plr = HaloPlayer(self);
		if(plr)
		{
			plr.screen_color = col;
			plr.screen_fade  = alpha;
		}
	}
	
	action void A_Pushback(double force, double angleOffs = 0, Actor ptr = null)
	{
		if(!ptr) ptr = self;
		vector3 dir = HaloMath.VecFromAngles( angle + angleOffs, pitch, -force );
		ptr.vel += dir;
	}
	
	action double A_GetWeapYOffs()
	{
		// Primarily used to offset weapon SFX and projectiles
		// when the crosshair is lowered.
		let plr = HaloPlayer(self);
		return plr ? plr.weap_yoffs : 0;
	}
	
	action void A_SetHUDVisible(bool onoff)
	{
		invoker.HUD_Hide = !onoff;
	}
	
	action vector3, actor A_ShootProjectile(class<Actor> proj, double leftright = 0, double updown = 0, double spreadmod = 1.0)
	{
		vector3 hitpos = pos;
		double scopemod = (invoker.scoperecoil == 0) ? 1.0 : invoker.scoperecoil;
		
		let aproj = A_FireProjectile(proj,0, false, leftright, updown, 0,0);
		let haloProj = HaloProjectile(aproj);
		let haloSlowProj = HaloSlowProjectile(aproj);
		
		if(aproj)
		{
			let plr = HaloPlayer(self);
			
			// Follow player's velocity on spawn.
			aproj.vel += vel;
			
			vector2 recoil = (
				(A_RecoilSpread()*spreadmod*scopemod),
				(A_RecoilSpread()*spreadmod*scopemod)
			);
			
			aproj.angle = angle;
			aproj.pitch = pitch;
			
			vector3 aimpos = aproj.pos;
			if(plr)
			{
				aimpos = plr.aimpos;
				bool inRange = (
					abs(plr.aimActor_anglesTo.x) <= halodoom_magnetism && 
					abs(plr.aimActor_anglesTo.y) <= halodoom_magnetism
				);
				
				if( plr.aimActor_nearest && inRange && !plr.aimActor )  
					aimpos = (plr.aimActor_nearest.pos.xy, plr.aimActor_pos.z);
				
			}
			else
				aimpos = HaloMath.getPlayerAim(PlayerPawn(self));
			
			if(haloProj) 
			{
				haloProj.truedamage = haloProj.default.truedamage * invoker.damage_modifier;
				haloProj.DoConverge(aimpos, recoil);
			}
			if(haloSlowProj) 
			{
				haloSlowProj.truedamage = haloSlowProj.default.truedamage * invoker.damage_modifier;
				haloSlowProj.DoConverge(aimpos, recoil);
			}
			
			FLineTraceData lt;
			aproj.LineTrace(aproj.angle, 1024*64, aproj.pitch, 0, offsetforward: 20, data:lt);
			hitpos = lt.HitLocation;
		}
		return hitpos, aproj;
	}
	
	action void A_DebugSFX(bool onoff = true)
	{
		invoker.debug_sfxpos = onoff;
	}
	
	action void A_SetSFXPos(double forward, double leftright, double updown)
	{
		double yoffs = A_GetWeapYOffs() * 0.15;		
		vector3 relpos = HaloMath.RelativeV3Offset(self, 0, 0, 0, forward, -leftright, updown - yoffs, 1.);
		invoker.sfx_pos = relpos;
	}
	
	action SmokeTrail A_TrailSFX(vector3 hitpos, double startalpha = 1.0, Color col = 0x969696, class<SmokeTrail> type = "SmokeTrail")
	{	
		double yoffs = A_GetWeapYOffs() * 0.25;
		vector3 frompos = (
			invoker.sfx_pos.xy,
			invoker.sfx_pos.z - yoffs
		);
		return SmokeTrail.Start(col, frompos, hitpos, (angle, pitch), startalpha, type:type);
	}
	
	action Actor A_SpawnSFX(class<Actor> sfxtype, double projangle, double projpitch, double spd = -1)
	{
		if(!invoker.cvfx_smoke || !invoker.cvfx_casings) return null;
		if(sfxtype is "CasingSmoke" && !invoker.cvfx_smoke.GetBool()) return null;
		if(sfxtype is "BulletCasing" && !invoker.cvfx_casings.GetBool()) return null;
		double cosp = cos(pitch+projpitch);
		if(spd < 0) spd = GetDefaultByType(sfxtype).speed;
		vector3 projvel = (
			cos(angle+projangle) * cosp,
			sin(angle+projangle) * cosp,
			-sin(projpitch)
		) * spd;
		projvel += vel;
		let proj = Spawn(sfxtype, invoker.sfx_pos);
		if(proj)
		{
			proj.vel = projvel;
			proj.angle = angle+projangle;
			proj.pitch = pitch+projpitch;
			proj.target = invoker;
		}
		return proj;
	}
	
	action void A_MuzzleSparks(double amt, double spd, double sp_horz, double sp_vert, class<Actor> sparks = "MuzzleSparks")
	{
		if(!invoker.cvfx_smoke || !invoker.cvfx_smoke.GetBool()) return;
		int adjustedAmt = max(amt * halodoom_effectintensity, 0);
		for(int i = 0; i < amt; i++)
		{
			let mspark = Spawn(sparks, invoker.sfx_pos);
			if(mspark)
			{
				double sparkAngle = frandom[WeapSFX](-sp_horz, sp_horz) + angle;
				double sparkPitch = frandom[WeapSFX](-sp_vert, sp_vert) + pitch;
				double cosp = cos(sparkPitch);
				vector3 projvel = (
					cos(sparkAngle) * cosp,
					sin(sparkAngle) * cosp,
				   -sin(sparkPitch)
				) * spd;
				projvel += vel;
				
				mspark.vel = projvel;
				mspark.angle = sparkAngle;
				mspark.pitch = sparkPitch;
				mspark.target = self;
			}
		}
	}
	
	bool CheckWeaponSelected()
	{
		return (Owner.player && Owner.player.ReadyWeapon == self);
	}
		
	action void A_FollowRotation(int DEST_LAYER, int SRC_LAYER, double mul = 1.0)
	{
		let src_psp = player.GetPSprite(SRC_LAYER);
		A_OverlayPivotAlign(DEST_LAYER, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(DEST_LAYER, src_psp.rotation*mul);
	}
	action void A_FollowRotatedPos(int DEST_LAYER, int SRC_LAYER, vector2 max, double mul = 1.0, vector2 offs = (0,0))
	{
		let src_psp = player.GetPSprite(SRC_LAYER);
		vector2 rvec = (cos(src_psp.rotation+90)*max.x, sin(src_psp.rotation)*max.y) * mul;
		if(!invoker.handsbusy) rvec.y -= invoker.staticoffs.y;
		bool hidezoom = invoker.scopezoom >= 2.0 && invoker.zoomed;
		
		A_OverlayOffset(DEST_LAYER, rvec.x + offs.x, rvec.y + offs.y + (hidezoom ? 0x7FFFFF : 0));
		
		// Scale
		let dst_psp = player.GetPSprite(DEST_LAYER);
		if(dst_psp && src_psp) dst_psp.scale = src_psp.scale; 
	}
	
	action void A_UpdateCrosshair(string nxhair, HaloGun ptr = null)
	{
		if(!ptr) ptr = invoker;
		if(nxhair == "") 
			ptr.wcrosshair = ptr.default.wcrosshair;
		else
			ptr.wcrosshair = nxhair;
	}
	
	action void A_CancelBackpackReload()
	{
		invoker.backpack_reloading = false;
		invoker.backpack_reloadtimer = 0;
	}
	
	action void A_SetSprite(Name spr, uint layer = PSP_WEAPON)
	{
		let spr = GetSpriteIndex(spr);
		if(!player) return;
		let psp = player.GetPSprite(layer);
		if(psp) psp.Sprite = spr;
	}
	
	action void A_SetFrameTics(int tics, uint layer = PSP_WEAPON)
	{
		if(!player) return;
		let psp = player.GetPSprite(layer);
		if(psp) psp.Tics = tics;
	}
	action int A_GetFrame(uint layer = PSP_WEAPON)
	{
		if(!player) return 0;
		let psp = player.GetPSprite(layer);
		return psp ? psp.Frame : 0;
	}
	action void A_SetFrame(int frm, uint layer = PSP_WEAPON)
	{
		if(!player) return;
		let psp = player.GetPSprite(layer);
		if(psp) psp.Frame = frm;
	}
	
	action void A_SetSightGraphic(string graphic)
	{
		invoker.UI_Sight = graphic;
	}
	action void A_ResetSightGraphic()
	{
		invoker.UI_Sight = invoker.default.UI_Sight;
	}
	
	clearscope Weapon FindNextWeapon()
	{
		/*
		Weapon gun = NULL;
		if(!Owner) return NULL;
		for(let i = Owner.Inv; i; i = i.Inv)
		{
			gun = Weapon(i);
			if(gun && gun != self) break;
		}
		*/
		return NextWeapon;
	}
	
	action bool A_DoFullSelectAnimation()
	{
		CVar fullsel = CVar.GetCVar("halodoom_dofullselectanim", player);
		bool result = (fullsel && fullsel.GetBool()) || !invoker.donefirstdrawanim;
		return result;
	}
	
	bool CallMeleeState(StateLabel stateName, bool force = false)
	{
		let psp  = Owner.player.GetPSprite(PSP_WEAPON);
		let meleepsp = Owner.player.GetPSprite(MELEE_OVERLAY);
		bool inreload = psp && InStateSequence(psp.CurState,FindState("Reload"));
		
		if(meleepsp.CurState == NULL || force)
		{
			Owner.A_StopSound(CHAN_RELOADING);
			Owner.player.SetPSprite(MELEE_OVERLAY, FindState(stateName));
			if(inreload) psp.SetState(FindState("Ready.Active"));
			return true;
		}
		return false;
	}
	
	bool CheckMeleeState(StateLabel stateName)
	{
		let meleepsp = Owner.player.GetPSprite(MELEE_OVERLAY);
		return meleepsp && InStateSequence(meleepsp.CurState, FindState(stateName));
	}
	
	action void A_RWeaponReady(uint flags=0)
	{
		A_RecoilSetupWeaponReady(flags);
		if(invoker.handsbusy) player.WeaponState &= ~WF_WEAPONSWITCHOK;
	}
	
	override void DoEffect()
	{
		super.DoEffect();
				
		if(!cvfx_smoke)
			cvfx_smoke = CVar.GetCVar("halodoom_fx_smoke", Owner.player);
		if(!cvfx_casings) 
			cvfx_casings = CVar.GetCVar("halodoom_fx_casings", Owner.player);
		
		if(debug_sfxpos) Spawn("FXFollower", sfx_pos);
		
		// Update next weapon.
		if(Owner.player)
		{
			let wnext = PlayerPawn(Owner).PickNextWeapon();
			if( Owner.player.ReadyWeapon != wnext ) NextWeapon = wnext;
		}
		
		if(!CheckWeaponSelected()) 
		{
			if(handsbusy) 
			{
				staticoffs.y -= meleelower;
				handsbusy = false;
			}
			if(backpack_reloading)
			{
				backpack_reloadtimer--;
				if(backpack_reloadtimer <= 0)
				{
					let rammo = GetDefaultByType(AmmoType2);
					int reserves = countinv(AmmoType1);
					int takeammo = rammo.maxamount - countinv(AmmoType2); 
					if(takeammo > reserves) takeammo = reserves;
					GiveInventory(AmmoType2,takeammo);
					DepleteAmmo(takeammo);
					backpack_reloading = false;
					backpack_reloadtimer = 0;
					// console.printf("Finished backpack reload");
				}
			}
			return;
		}
		if(!Owner.player) return;
		let vehman = Veh_Manager(Owner.FindInventory("Veh_Manager"));
		if(vehman && vehman.disableweaps) return;
						
		// Get useful data
		uint btns = Owner.player.cmd.buttons;
		uint oldbtns = Owner.player.oldbuttons;
		let psp  = Owner.player.GetPSprite(PSP_WEAPON);
		bool inreload = psp && InStateSequence(psp.CurState,FindState("Reload"));
		
		// WeapSound features
		bool infire = psp && InStateSequence(psp.CurState,FindState("Fire"));
		if( !infire || !((btns & BT_ATTACK) && (oldbtns & BT_ATTACK)) ) 
			first_shot = true;
		
		// Weapon roll
		vector2 su = (cos(Owner.angle+90), sin(Owner.angle+90));
		vector2 vu = Owner.vel.xy;
		vu.x *= su.x;
		vu.y *= su.y;
		psp.halign = PSPA_CENTER;
		psp.valign = PSPA_CENTER;
		double weaprotation = (vu.x+vu.y);
		if(inreload) weaprotation = 0;
		if(Owner.player.cmd.sidemove && abs(weaprotation) > 0.02)
			psp.rotation = HaloMath.Lerp(psp.rotation, weaprotation * rotation_sens, 0.1);
		else
			psp.rotation = HaloMath.Lerp(psp.rotation, 0, 0.1);
			
		psp.rotation = clamp(psp.rotation, -rotation_range, rotation_range);
		
		if(Owner.health > 0)
			DoActionButtons();
				
		// Force weapon to be deselected.
		if(force_deselect && !InStateSequence(psp.CurState,FindState("Deselect")))
		{
			let nextweap = FindNextWeapon();
			if(nextweap)
			{
				Owner.player.WeaponState |= WF_WEAPONSWITCHOK | WF_REFIRESWITCHOK;
				nextweap.Use(false);
				psp.SetState(FindState("Deselect"));
			}
			force_deselect = false;
		}
		
		// Backpack reload check
		if(inreload && A_ButtonPressed(BT_RELOAD, Owner) && !backpack_reloading)
		{
			if(backpack_reloadtimer)
				backpack_reloading = true;
			else
				backpack_reloadtimer = backpack_reloadmaxtime;
		}

		// Constantly keep track of this for better responsiveness.
		pbtn_fire = A_ButtonPressed(BT_ATTACK, Owner);
		pbtn_altfire = A_ButtonPressed(BT_ALTATTACK, Owner);
		
		// Drain battery if below optimal.
		if( countinv(AmmoType2) < battery_drain && countinv(AmmoType2) > 0 ) 
		{
			TakeInventory(AmmoType2, 1);
		}
		
		spreadmod -= bloomamt*bloomspd;
		spreadmod = clamp(spreadmod, 0, 2);
	}
	
	// This override will ensure that the weapon is given its clip ammo upon 
	// being picked up.
	override bool TryPickup (in out Actor toucher)
	{
		if(!(toucher is "PlayerPawn")) return super.TryPickup(toucher);
		if(!toucher.FindInventory(getClassName())) 
		{
			if(AmmoType2)
			{
				let rammo = GetDefaultByType(AmmoType2);
				toucher.GiveInventory(AmmoType2,rammo.maxamount);
			}
		}
		return super.TryPickup(toucher);;
	}
	
	// Called from event handler, needed for extra action buttons, not limited to USER1-4.
	void ThrowCurrentGrenade()
	{
		// Throw nades
		let curNade = HaloPlayer(Owner).activeGrenade;
		if(!handsbusy)
		{
			if(curNade && curNade.amount > 0 && CallMeleeState("ThrowFrag"))
				curNade.amount--;
			else
				HaloPlayer(Owner).SendHUDMessage("Grenade depleted!");
		}
	}
	
	void DoActionButtons()
	{
		let psp  = Owner.player.GetPSprite(PSP_WEAPON);
		bool inreload = psp && InStateSequence(psp.CurState,FindState("Reload"));
	
		// Process weapon switch
		if(A_ButtonStatus(BTN_SWITCHWEAP, BTS_PRESSED, Owner) && !InStateSequence(psp.CurState,FindState("Deselect.Quick")) && !handsbusy)
		{
			// Deselect weapon.
			let nextweap = FindNextWeapon();
			if(nextweap) 
			{
				Owner.player.WeaponState |= WF_WEAPONSWITCHOK | WF_REFIRESWITCHOK;
				State tostate = !inreload ? FindState("Deselect") : FindState("Deselect.Quick");
				psp.SetState(tostate);
				nextweap.Use(false);
			}
		}
				
		// De-scope if reload detected.
		if(inreload && zoomed) enablezoom = false;
		let plr = HaloPlayer(Owner);
		if(!plr) return;
		
		// Melee attack
		if( A_ButtonStatus(BT_USER2, BTS_PRESSED, Owner) && (!handsbusy || CheckMeleeState("GrappleWait")) && plr.CheckCanMelee() )
		{
			// Only melee if hands are not already being used for something else.
			CallMeleeState("DoMelee", true);
		}
				
		// Slide
		let feetpsp = Owner.player.GetPSprite(FEET_OVERLAY);
		if( !!Owner.FindInventory("SlideAnimator") && !InStateSequence(feetpsp.CurState, FindState("SlideStart")) )
		{
			Owner.player.SetPSprite(FEET_OVERLAY, FindState("SlideStart"));
		}
		
		// Grapple
		if(plr.grapple && !handsbusy)
		{
			Owner.player.SetPSprite(MELEE_OVERLAY, FindState("GrappleStart"));
			if(inreload) psp.SetState(FindState("Ready.Active"));
		}
	}
	
	// [Lewisk3] Checks if a button was recently pressed.
	action bool A_ButtonPressed(int btn, Actor ptr=NULL)
	{
		let src = ptr ? ptr : self;
		if(!src.player) return false;
		return (src.player.cmd.buttons & btn) && !(src.player.oldbuttons & btn);
	}
	action bool A_ButtonStatus(int btn, int bstate, Actor ptr=NULL)
	{
		let src = ptr ? ptr : self;
		if(!src.player) return false;
		bool btnstatus;
		UserCmd cmd = src.player.cmd;
		uint oldbtns = src.player.oldbuttons;
		switch(bstate)
		{
			case BTS_UP:
				btnstatus = !(cmd.buttons & btn); break;
			case BTS_DOWN:
				btnstatus =  (cmd.buttons & btn); break;
			case BTS_HELD:
				btnstatus = (cmd.buttons & btn) && (oldbtns & btn); break;
			case BTS_PRESSED:
				btnstatus =  (cmd.buttons & btn) && !(oldbtns & btn); break;
			case BTS_RELEASED:
				btnstatus = !(cmd.buttons & btn) && (oldbtns & btn); break;
		}
		return btnstatus;
	}
	action bool A_FirePressed() { return invoker.pbtn_fire; }
	action bool A_AltFirePressed() { return invoker.pbtn_altfire; }
	
	// [Lewisk3] Use this instead of using deprecated functions :P
	action void A_WeapSound(sound snd, uint flags = 0, bool firesound = false)
	{	
		double vol = firesound ? (invoker.first_shot ? 1.0 : 0.5) : 1.0;
		A_StartSound(snd, CHAN_WEAPON, flags, vol);
		if(firesound) invoker.first_shot = false;
	}
	
	// [Lewisk3] This plays the mechanism sound of the weapon,
	// essentially the sound of the thing that loads the next bullet.
	action void A_MechanismSound(Sound snd, uint flags = 0)
	{
		let rammo = GetDefaultByType(invoker.AmmoType2);
		double ammo_usedperc = double(countinv(invoker.AmmoType2)) / rammo.maxamount;
		A_StartSound( 
			snd, CHAN_WEAPON, 
			flags | CHANF_OVERLAP, 
			0.2 + (1.5 * (1.0-ammo_usedperc) )
		);
	}
	
	action void DepleteAmmo(int amt)
	{
		if(!sv_infiniteammo) TakeInventory(invoker.AmmoType1, amt);
	}
	
	// For reloading clips/magazines
	action void A_ReloadClip()
	{
		let rammo = GetDefaultByType(invoker.AmmoType2);
		int reserves = countinv(invoker.AmmoType1);
		
		int takeammo = rammo.maxamount - countinv(invoker.AmmoType2); 
		if(takeammo > reserves) takeammo = reserves;
		
		GiveInventory(invoker.AmmoType2, sv_infiniteammo ? rammo.MaxAmount : takeammo);
		DepleteAmmo(takeammo);
		A_CancelBackpackReload();
	}
	
	// Takes from primary ammunition pool, optionally has a type parameter
	// setting this to ammotype1 will take from the secondary pool. 
	// By default NULL results in using ammotype2
	action void A_TakeAmmo(int amt = 1, bool playEmptySND = true, class<Inventory> type = NULL)
	{
		if(sv_infiniteammo) return;
		if(!type) type = invoker.ammotype2;
		A_TakeInventory(type, amt);
		if(countinv(type) <= 0 && playEmptySND) 
			A_StartSound("Halo/Weapons/MagEmpty", CHAN_AUTO, CHANF_OVERLAP); 
	}
		
	// For reloading one at a time, like a shotgun.
	action void A_ReloadSingle()
	{
		if(countinv(invoker.AmmoType1) > 0)
		{
			DepleteAmmo(1);
			GiveInventory(invoker.AmmoType2,1);
			A_CancelBackpackReload();
		}
	}

	// For readability when checking ammunition.
	action int CountLoadedAmmo()
	{
		return countinv(invoker.AmmoType2);
	}
	action int CountReservedAmmo()
	{
		return countinv(invoker.AmmoType1);
	}
	
	// Check if we need to reload, if we do, jump to Reload.
	action state A_GunCheckReload()
	{
		if(!invoker.uses_battery)
			return !countinv(invoker.AmmoType2) ? ResolveState("Reload") : ResolveState(NULL);
		else
			return countinv(invoker.AmmoType2) < invoker.battery_drain ? ResolveState("Reload") : ResolveState(NULL);
	}
	
	// Validate that a reload should be done, returns fallback if mag is already full 
	// or if no reserve ammo is found.
	action state A_ValidateReload(StateLabel fallback="Ready")
	{
		if(invoker.handsbusy) return ResolveState(fallback);
		let rammo = GetDefaultByType(invoker.AmmoType2);
		if( countinv(invoker.AmmoType2) == rammo.maxamount || 
		    countinv(invoker.AmmoType1) == 0 && !sv_infiniteammo )
			return ResolveState(fallback);
		
		invoker.reload_ammoleft = CountLoadedAmmo();
		return ResolveState(NULL);
	}
	action int CountReloadAmmo()
	{
		return invoker.reload_ammoleft;
	}
	
	// Getters and Setters for readability.
	action void A_ScopeDisable()
	{
		invoker.enablezoom = false;
	}
	action void A_ScopeEnable()
	{
		invoker.enablezoom = true;
	}
	action void A_ScopeON(bool usePerspective = true)
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if(psp && usePerspective) 
		{
			// Min scale, should be around 3x
			double zscale = 1.0+HaloMath.fmap(invoker.scopezoom, 1.0, 3.0, 0, 2.0); 
			if( invoker.scopezoom >= 2.0 || (invoker.bSI_AlwaysHide) ) 
				zscale = 0;
			
			vector2 hidepos = (15, 10) * zscale;
			psp.scale = (zscale,zscale);
			invoker.staticoffs = (hidepos.x, hidepos.y);
		}
		invoker.zoomed = true;
		A_StartSound(invoker.snd_zoomin, flags:CHANF_OVERLAP);
	}
	action void A_ScopeOFF()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if(psp) psp.scale = (1.,1.);
		invoker.staticoffs = (0,0);
		invoker.zoomed = false;
		A_StartSound(invoker.snd_zoomout, flags:CHANF_OVERLAP);
	}
	action bool A_CheckInScope()
	{
		return invoker.zoomed;
	}
	action void A_HaloWeaponReady(uint flags = 0, bool usescope = true)
	{
		if(usescope) 
		{
			A_ScopeEnable();
			A_Overlay(SIGHT_OVERLAY, "Scope.Ready", true);
		}
		A_RWeaponReady(flags);
	}
	action bool A_LowerAim()
	{
		return A_GetWeapYOffs() > 0;
	}
	action void A_BeginMelee()
	{
		if(invoker.handsbusy) return;
		invoker.staticoffs.y += invoker.meleelower;
		invoker.handsbusy = true;
	}
	action void A_FinishMelee()
	{
		if(!invoker.handsbusy) return;
		invoker.staticoffs.y -= invoker.meleelower;
		invoker.handsbusy = false;
	}
	
	// Custom lower and raise.
	action void A_GunLower(int speed = 32)
	{
		if(invoker.zoomed) 
			A_ScopeDisable();
		else 
			A_RLower(speed);
	}
	
	action void A_GunRaise(int speed = 32)
	{
		A_RRaise(speed);
	}

	States
	{	
		Deselect.Quick:
			"####" "#" 1;
			"####" "#" 0 
			{
				A_GunLower(12);
			}
		loop;
		
		WaitState:
			"####" "#" 1;
		loop;
		
		ThrowFrag: 
			TNT1 A 0 
			{
				A_BeginMelee();
				if(HaloPlayer(self).activeGrenade)
				{
					A_StartSound(HaloPlayer(self).activeGrenade.throwSound, CHAN_WEAPON, CHANF_OVERLAP);
					A_OverlayFlags(OverlayID(), PSPF_ADDBOB|PSPF_ADDWEAPON, 0);
					A_OverlayOffset(OverlayID(), 0, 30);
				}
				else
					return ResolveState("ThrowFrag.Abort");
					
				return ResolveState(null);
			}
			TNT1 A 8;
			TNT1 A 0 A_SetSprite(HaloPlayer(self).activeGrenade.throwSprite, OverlayID());
			"####" ABCD 1;
			"####" E 2 
			{
				A_SetSFXPos(20,17,-15);
				let nadeItem = HaloPlayer(self).activeGrenade;
				let nade = Spawn(nadeItem.nadeType, invoker.sfx_pos);
				if(nade) 
				{
					nade.vel = HaloMath.V3Offset(angle, pitch, roll, 1,0,0, 30);
					nade.target = self;
				}
				
				A_SetRecoil(-0.75, 0, 3);
			}
			"####" FGHIJK 1;
		ThrowFrag.Abort:
			TNT1 A 0 A_FinishMelee();
		stop;
		
		DoMelee:
			TNT1 A 0 
			{
				A_BeginMelee();
				A_StartSound("Halo/Melee/Swing", flags:CHANF_OVERLAP);
				A_OverlayFlags(OverlayID(), PSPF_ADDBOB|PSPF_ADDWEAPON, 0);
				A_OverlayOffset(OverlayID(), -30, 25);
			}
			PNCH ABC 1 
			{
				// Remove this check for melee boost, lets you gain stupid speeds.
				if(A_CheckMeleeRange() < 128) A_Recoil(-5); 
				A_SetRecoil(0.4, -0.8, 3);
			}
			PNCH C 1 
			{
				A_SetRecoil(0.80, -1.20, 3);
				A_HaloMelee(50, 70, hitsnd:"Halo/Melee/Punch", "Halo/Melee/Ouch");
			}
			PNCH DEFG 1 
			{
				A_SetRecoil(-0.3, 0.6, 5);
			}
			PNCH HIJJJJJJJ 1 
			{
				A_OverlayOffset(OverlayID(), 3, 3, WOF_ADD | WOF_INTERPOLATE);
			}
			TNT1 A 0 A_FinishMelee();
		stop;
		
		// I would use an inventory item to animate this but, GZDoom's
		// PSprite system is a broken mess due to the devs implementing pointless 
		// "restrictions" in the name of "Security" in a games engine already
		// restricted enough by nature. 
		GrappleStart:
			TNT1 A 0 A_BeginMelee();
			GRPL A 1 
			{
				A_OverlayFlags(OverlayID(), PSPF_ADDBOB|PSPF_ADDWEAPON, 0);
				A_OverlayOffset(OverlayID(), -50, 50);
			}
			GRPL AAAA 1 A_OverlayOffset(OverlayID(), 14, -12, WOF_ADD|WOF_INTERPOLATE); 
		goto GrappleWait;
		
		GrappleWait:
			GRPL A 1;
			TNT1 A 0
			{
				if(HaloPlayer(self).grapple) return ResolveState("GrappleWait");
				return ResolveState(null);
			}
		goto GrappleFinish;
		
		GrappleFinish:
			GRPL AAAA 1 A_OverlayOffset(OverlayID(), -14, 12, WOF_ADD|WOF_INTERPOLATE); 
			TNT1 A 0 A_FinishMelee();
		stop;
		
		// Slide
		SlideStart:
			SLID A 1 
			{
				A_OverlayFlags(OverlayID(), PSPF_ADDBOB|PSPF_ADDWEAPON, 0);
				A_OverlayOffset(OverlayID(), 0, 80);
			}
			SLID AAA 1 A_OverlayOffset(OverlayID(), 0, -20, WOF_ADD|WOF_INTERPOLATE); 
		goto SlideWait;
		
		SlideWait:
			SLID A 1;
			TNT1 A 0
			{
				if(!!FindInventory("SlideAnimator")) return ResolveState("SlideWait");
				return ResolveState(null);
			}
		goto SlideFinish;
		
		SlideFinish:
			SLID AAA 1 A_OverlayOffset(OverlayID(), 0, 30, WOF_ADD|WOF_INTERPOLATE); 
		stop;
				
				
		// Cortana			
		Use_Cortana:
			TNT1 A 0 
			{
				A_BeginMelee();
				A_OverlayFlags(OverlayID(), PSPF_ADDBOB|PSPF_ADDWEAPON, 0);
				A_OverlayOffset(OverlayID(), 0, 30);
			}
			TNT1 A 8;
			CRT1 ABCDEFGHIJKLMNOP 1;
			CRT1 Q 5;
			CRT1 RS 2;
			CRT1 T 6;
			
			TNT1 A 0 
			{
				let plr = HaloPlayer(self);
				if(plr.pendingDoorColor ~== "Red"   ) A_SetFrame(0, MELEE_OVERLAY);
				if(plr.pendingDoorColor ~== "Blue"  ) A_SetFrame(1, MELEE_OVERLAY);
				if(plr.pendingDoorColor ~== "Yellow") A_SetFrame(2, MELEE_OVERLAY);
				HaloPlayer(self).OpenPendingDoor();
			}
			CRTC "#" 6;
			
			CRT1 U 6;
			CRT1 VW 2;
			CRT1 X 5;
			CRT1 YZ 1;
			CRT2 ABC 1;
			CRT2 D 4;
			CRT2 EFGHIJKL 1;
			TNT1 A 0 A_FinishMelee();
		stop;
				
		// Scope
		Scope.Ready:
			TNT1 A 1
			{	
				if(player.camera != PlayerPawn(self)) return ResolveState(null);
				bool zoom_in  = A_ButtonStatus(BT_ALTATTACK, BTS_DOWN) && !invoker.zoomed;
				bool zoom_out = A_ButtonStatus(BT_ALTATTACK, BTS_UP) && invoker.zoomed;
			
				if(invoker.zoom_btnstate == BTS_PRESSED)
				{					
					zoom_in  = A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED) && !invoker.zoomed;
					zoom_out = A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED) && invoker.zoomed;
				}
				
				State scope_on = ResolveState("Scope.ON");
				State scope_off = ResolveState("Scope.OFF");
				if(!invoker.enablezoom && !invoker.zoomed)
				{
					return ResolveState(null);
				}
				else if(!invoker.enablezoom)
				{
					zoom_in = false;
					zoom_out = true;
				}
				if(zoom_in) return scope_on;
				if(zoom_out) return scope_off;
				return ResolveState(null);
			}
		loop;
				
		Scope.ON:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom, 3, true);
			TNT1 A 0 
			{
				bool holding = A_ButtonStatus(BT_ALTATTACK, BTS_HELD) && !A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED);
				invoker.zoom_btnstate = holding ? 0 : BTS_PRESSED;
			}
		goto Scope.Ready;
		Scope.OFF:
			TNT1 A 1 A_ScopeOFF();
			TNT1 A 5 A_SetZoom(0, 3, true);
		goto Scope.Ready;
		
		GunLightning:
			"####" "#" 0 
			{
				A_OverlayFlags(OverlayID(), PSPF_RENDERSTYLE | PSPF_ALPHA, true);
				A_OverlayRenderStyle(OverlayID(), STYLE_Add);
			}
		goto DoGunLightning;
		
		// Made to be redefined in a weapon for customized gunlightning graphic.
		SetupGunLightning:
			BIRI B 0;
		goto GunLightning;
		
		DoGunLightning:
			"####" "#" 1
			{
				let curPSprite = player.GetPSprite(OverlayID());
				curPSprite.alpha *= 0.25;
				
				if(curPSprite.alpha <= 0.01) 
					return ResolveState(null);
				return ResolveState("DoGunLightning");
			}
		stop;
		
		Spawn:
			MSNG A -1;
		stop;
	}
}
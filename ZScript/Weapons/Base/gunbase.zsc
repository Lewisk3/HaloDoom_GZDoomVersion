class HaloGun : RecoilWeapon
{
	transient CVar cvfx_smoke;
	transient CVar cvfx_casings;
	vector3 sfx_pos;
	bool debug_sfxpos;
	const BTN_SWITCHWEAP = BT_USER1;
	bool first_shot; // Tied to fire btn.
	bool pbtn_fire;
	bool pbtn_altfire;
	bool backpack_reloading;
	bool force_deselect;
	uint backpack_reloadtimer;
	uint backpack_reloadmaxtime;
	double baserecoil;
	double spreadmod; // Spread introduced by continuous fire
	double bloomamt, bloomspd, accmod;
	double rotation_range;
	double rotation_sens;
	bool donefirstdrawanim; 
	
	// UI Stuff
	const SIGHT_OVERLAY = 0xFF;
	string wcrosshair;
	string UI_Icon;
	string UI_Sight;
	double sightscale;
	double scoperecoil;
	bool enablezoom;
	double scopezoom;
	bool zoomed;
	int zoom_btnstate;
	
	// Sound Effects
	Sound snd_zoomin;
	Sound snd_zoomout;
	
	Property Bloom : bloomamt;
	Property BloomSpeed : bloomspd;
	Property Crosshair : wcrosshair;
	Property BaseRecoil : baserecoil;
	Property Inaccuracy : accmod;
	Property SwayRange : rotation_range;
	Property SwaySpeed : rotation_sens;
	Property BackpackReloadTime : backpack_reloadmaxtime;
	property UIGraphic : UI_Icon;
	Property UISight : UI_Sight, sightscale;
	Property SetupScope : scopezoom, scoperecoil;
	Property ZoomSounds : snd_zoomin, snd_zoomout;

	enum ButtonStates
	{
		BTS_UP = 0,
		BTS_DOWN,
		BTS_HELD,
		BTS_RELEASED,
		BTS_PRESSED
	};
	
	Default
	{
		RecoilWeapon.RecoilSpeed 16;
		HaloGun.Bloom 0.32;
		HaloGun.Crosshair "";
		HaloGun.BaseRecoil 2;
		HaloGun.BackpackReloadTime 35;
		HaloGun.UISight "SI_MAG", 1.0;
		HaloGun.UIGraphic "WI_AR";
		HaloGun.SwayRange 4.0;
		HaloGun.SwaySpeed 2.5;
		Weapon.BobRangeX 1.5;
		Weapon.BobRangeY 0.6;
		Weapon.BobSpeed 0.5;
		HaloGun.ZoomSounds "Halo/Weapons/Zoom/IN", "Halo/Weapons/Zoom/OUT";
	}
	
	// For some reason weapons start with an odd offset.
	action void A_DoSelectAnim(double yoffs = 0., bool first_time_draw = false)
	{
		 A_WeaponOffset(0, 45 + yoffs);
		 if(first_time_draw) invoker.donefirstdrawanim = true;
	}

	action void A_UpdateSpread()
	{
		invoker.spreadmod += invoker.bloomamt;
	}
	
	action double A_RecoilSpread()
	{
		double scopemod = (invoker.scoperecoil == 0) ? 1.0 : invoker.scoperecoil;
		double finalspread = frandom[GunRecoil](-invoker.baserecoil, invoker.baserecoil)*(1.0+(invoker.spreadmod*invoker.accmod)) * scopemod;
		return finalspread;
	}
	
	action double A_GetWeapYOffs()
	{
		// Primarily used to offset weapon SFX and projectiles
		// when the crosshair is lowered.
		let plr = HaloPlayer(self);
		return plr ? plr.weap_yoffs : 0;
	}
	
	action vector3 A_ShootProjectile(class<HaloProjectile> proj, double leftright = 0, double updown = 0, double spreadmod = 1.0)
	{
		vector3 hitpos = pos;
		double yoffs = A_GetWeapYOffs() * 0.25;
		bool lowered = yoffs > 0;
		double scopemod = (invoker.scoperecoil == 0) ? 1.0 : invoker.scoperecoil;
		
		let aproj = HaloProjectile(A_FireProjectile(proj,0, false, leftright, updown, 0,0));	
		if(aproj)
		{
			let plr = HaloPlayer(self);
			vector2 recoil = (
				(A_RecoilSpread()*spreadmod*scopemod),
				(A_RecoilSpread()*spreadmod*scopemod)
			);
			
			aproj.angle = angle;
			aproj.pitch = pitch;
			aproj.DoConverge(plr.aimpos, recoil);
			
			FLineTraceData lt;
			aproj.LineTrace(aproj.angle, 1024*64, aproj.pitch, 0, offsetforward: 20, data:lt);
			hitpos = lt.HitLocation;
		}
		return hitpos;
	}
	
	action void A_DebugSFX(bool onoff = true)
	{
		invoker.debug_sfxpos = onoff;
	}
	
	action void A_SetSFXPos(double forward, double leftright, double updown)
	{
		double yoffs = A_GetWeapYOffs() * 0.15;		
		vector3 relpos = HaloMath.RelativeV3Offset(self, 0, 0, forward, -leftright, updown - yoffs, 1.);
		invoker.sfx_pos = relpos;
	}
	
	action void A_TrailSFX(vector3 hitpos, double startalpha = 1.0, Color col = 0x969696)
	{		
		double yoffs = A_GetWeapYOffs() * 0.25;
		vector3 frompos = (
			invoker.sfx_pos.xy,
			invoker.sfx_pos.z - yoffs
		);
		SmokeTrail.Start(col, frompos, hitpos, (angle, pitch), startalpha);
	}
	
	action Actor A_SpawnSFX(class<Actor> sfxtype, double projangle, double projpitch, double spd = -1)
	{
		if(!invoker.cvfx_smoke || !invoker.cvfx_casings) return null;
		if(sfxtype is "CasingSmoke" && !invoker.cvfx_smoke.GetBool()) return null;
		if(sfxtype is "BulletCasing" && !invoker.cvfx_casings.GetBool()) return null;
		double cosp = cos(pitch+projpitch);
		if(spd < 0) spd = GetDefaultByType(sfxtype).speed;
		vector3 projvel = (
			cos(angle+projangle) * cosp,
			sin(angle+projangle) * cosp,
			-sin(projpitch)
		) * spd;
		projvel += vel;
		let proj = Spawn(sfxtype, invoker.sfx_pos);
		if(proj)
		{
			proj.vel = projvel;
			proj.angle = angle+projangle;
			proj.pitch = pitch+projpitch;
			proj.target = invoker;
		}
		return proj;
	}
	
	bool CheckWeaponSelected()
	{
		return (Owner.player && Owner.player.ReadyWeapon == self);
	}
		
	action void A_FollowRotation(int DEST_LAYER, int SRC_LAYER, double mul = 1.0)
	{
		let src_psp = player.GetPSprite(SRC_LAYER);
		A_OverlayPivotAlign(DEST_LAYER, PSPA_CENTER, PSPA_CENTER);
		A_OverlayRotate(DEST_LAYER, src_psp.rotation*mul);
	}
	action void A_FollowRotatedPos(int DEST_LAYER, int SRC_LAYER, vector2 max, double mul = 1.0)
	{
		let src_psp = player.GetPSprite(SRC_LAYER);
		vector2 rvec = (cos(src_psp.rotation+90)*max.x, sin(src_psp.rotation+90)*max.y) * mul;
		A_OverlayOffset(DEST_LAYER, rvec.x, rvec.y);
	}
	
	action void A_UpdateCrosshair(string nxhair)
	{
		if(nxhair == "") 
			invoker.wcrosshair = invoker.default.wcrosshair;
		else
			invoker.wcrosshair = nxhair;
	}
	
	action void A_CancelBackpackReload()
	{
		invoker.backpack_reloading = false;
		invoker.backpack_reloadtimer = 0;
	}
	
	action void A_SetSprite(Name spr, uint layer = PSP_WEAPON)
	{
		let spr = GetSpriteIndex(spr);
		if(!player) return;
		let psp = player.GetPSprite(layer);
		if(psp) psp.Sprite = spr;
	}
	action void A_SetFrame(int frm, uint layer = PSP_WEAPON)
	{
		if(!player) return;
		let psp = player.GetPSprite(layer);
		if(psp) psp.Frame = frm;
	}
	
	clearscope Weapon FindNextWeapon()
	{
		Weapon gun = NULL;
		if(!Owner) return NULL;
		for(let i = Owner.Inv; i; i = i.Inv)
		{
			gun = Weapon(i);
			if(gun && gun != self) break;
		}
		return gun;
	}
	
	action bool A_DoFullSelectAnimation()
	{
		CVar fullsel = CVar.GetCVar("halodoom_dofullselectanim", player);
		bool result = (fullsel && fullsel.GetBool()) || !invoker.donefirstdrawanim;
		return result;
	}
	
	override void DoEffect()
	{
		super.DoEffect();

		if(!cvfx_smoke)
			cvfx_smoke = CVar.GetCVar("halodoom_fx_smoke", Owner.player);
		if(!cvfx_casings) 
			cvfx_casings = CVar.GetCVar("halodoom_fx_casings", Owner.player);
		
		if(debug_sfxpos) Spawn("FXFollower", sfx_pos);
		
		if(!CheckWeaponSelected()) 
		{
			if(backpack_reloading)
			{
				backpack_reloadtimer--;
				if(backpack_reloadtimer <= 0)
				{
					let rammo = GetDefaultByType(AmmoType2);
					int reserves = countinv(AmmoType1);
					int takeammo = rammo.maxamount - countinv(AmmoType2); 
					if(takeammo > reserves) takeammo = reserves;
					GiveInventory(AmmoType2,takeammo);
					TakeInventory(AmmoType1,takeammo);
					backpack_reloading = false;
					backpack_reloadtimer = 0;
					// console.printf("Finished backpack reload");
				}
			}
			return;
		}
		if(!Owner.player) return;
		
		// Get useful data
		uint btns = Owner.player.cmd.buttons;
		uint oldbtns = Owner.player.oldbuttons;
		let psp  = Owner.player.GetPSprite(PSP_WEAPON);
		
		// WeapSound features
		bool infire = psp && InStateSequence(psp.CurState,FindState("Fire"));
		if( !infire || !((btns & BT_ATTACK) && (oldbtns & BT_ATTACK)) ) 
			first_shot = true;
		
		// Weapon roll
		vector2 su = (cos(Owner.angle+90), sin(Owner.angle+90));
		vector2 vu = Owner.vel.xy;
		vu.x *= su.x;
		vu.y *= su.y;
		psp.halign = PSPA_CENTER;
		psp.valign = PSPA_CENTER;
		double weaprotation = (vu.x+vu.y);
		if(Owner.player.cmd.sidemove && abs(weaprotation) > 0.02)
			psp.rotation = HaloMath.Lerp(psp.rotation, weaprotation * rotation_sens, 0.1);
		else
			psp.rotation = HaloMath.Lerp(psp.rotation, 0, 0.1);
			
		psp.rotation = clamp(psp.rotation, -rotation_range, rotation_range);
		
		// Process weapon switch
		bool inreload = psp && InStateSequence(psp.CurState,FindState("Reload"));
		if((btns & BTN_SWITCHWEAP) && !InStateSequence(psp.CurState,FindState("Deselect.Quick")))
		{
			// Deselect weapon.
			let nextweap = FindNextWeapon();
			if(nextweap) 
			{
				Owner.player.WeaponState |= WF_WEAPONSWITCHOK | WF_REFIRESWITCHOK;
				State tostate = !inreload ? FindState("Deselect") : FindState("Deselect.Quick");
				psp.SetState(tostate);
				nextweap.Use(false);
			}
		}
		
		// Force weapon to be deselected.
		if(force_deselect && !InStateSequence(psp.CurState,FindState("Deselect")))
		{
			let nextweap = FindNextWeapon();
			if(nextweap)
			{
				Owner.player.WeaponState |= WF_WEAPONSWITCHOK | WF_REFIRESWITCHOK;
				nextweap.Use(false);
				psp.SetState(FindState("Deselect"));
			}
			force_deselect = false;
		}
		
		// Backpack reload check
		if(inreload && A_ButtonPressed(BT_RELOAD, Owner) && !backpack_reloading)
		{
			if(backpack_reloadtimer)
				backpack_reloading = true;
			else
				backpack_reloadtimer = backpack_reloadmaxtime;
		}

		// Constantly keep track of this for better responsiveness.
		pbtn_fire = A_ButtonPressed(BT_ATTACK, Owner);
		pbtn_altfire = A_ButtonPressed(BT_ALTATTACK, Owner);
		
		spreadmod -= bloomamt*bloomspd;
		spreadmod = clamp(spreadmod, 0, 2);
	}
	
	// This override will ensure that the weapon is given its clip ammo upon 
	// being picked up.
	override bool TryPickup (in out Actor toucher)
	{
		if(!(toucher is "PlayerPawn")) return super.TryPickup(toucher);
		if(!toucher.FindInventory(getClassName())) 
		{
			if(AmmoType2)
			{
				let rammo = GetDefaultByType(AmmoType2);
				toucher.GiveInventory(AmmoType2,rammo.maxamount);
			}
		}
		return super.TryPickup(toucher);;
	}
	
	// [Lewisk3] Checks if a button was recently pressed.
	action bool A_ButtonPressed(int btn, Actor ptr=NULL)
	{
		let src = ptr ? ptr : self;
		if(!src.player) return false;
		return (src.player.cmd.buttons & btn) && !(src.player.oldbuttons & btn);
	}
	action bool A_ButtonStatus(int btn, int bstate, Actor ptr=NULL)
	{
		let src = ptr ? ptr : self;
		if(!src.player) return false;
		bool btnstatus;
		UserCmd cmd = src.player.cmd;
		uint oldbtns = src.player.oldbuttons;
		switch(bstate)
		{
			case BTS_UP:
				btnstatus = !(cmd.buttons & btn); break;
			case BTS_DOWN:
				btnstatus =  (cmd.buttons & btn); break;
			case BTS_HELD:
				btnstatus = (cmd.buttons & btn) && (oldbtns & btn); break;
			case BTS_PRESSED:
				btnstatus =  (cmd.buttons & btn) && !(oldbtns & btn); break;
			case BTS_RELEASED:
				btnstatus = !(cmd.buttons & btn) && (oldbtns & btn); break;
		}
		return btnstatus;
	}
	action bool A_FirePressed() { return invoker.pbtn_fire; }
	action bool A_AltFirePressed() { return invoker.pbtn_altfire; }
	
	// [Lewisk3] Use this instead of using deprecated functions :P
	action void A_WeapSound(sound snd, uint flags = 0, bool firesound = false)
	{	
		double vol = firesound ? (invoker.first_shot ? 1.0 : 0.5) : 1.0;
		A_StartSound(snd, CHAN_WEAPON, flags, vol);
		if(firesound) invoker.first_shot = false;
	}
	
	// [Lewisk3] This plays the mechanism sound of the weapon,
	// essentially the sound of the thing that loads the next bullet.
	action void A_MechanismSound(Sound snd, uint flags = 0)
	{
		let rammo = GetDefaultByType(invoker.AmmoType2);
		double ammo_usedperc = double(countinv(invoker.AmmoType2)) / rammo.maxamount;
		A_StartSound( 
			snd, CHAN_WEAPON, 
			flags | CHANF_OVERLAP, 
			0.2 + (1.5 * (1.0-ammo_usedperc) )
		);
	}
	
	// For reloading clips/magazines
	action void A_ReloadClip()
	{
		let rammo = GetDefaultByType(invoker.AmmoType2);
		int reserves = countinv(invoker.AmmoType1);
		
		int takeammo = rammo.maxamount - countinv(invoker.AmmoType2); 
		if(takeammo > reserves) takeammo = reserves;
		
		GiveInventory(invoker.AmmoType2,takeammo);
		TakeInventory(invoker.AmmoType1,takeammo);
		A_CancelBackpackReload();
	}
	
	// Takes from primary ammunition pool, optionally has a type parameter
	// setting this to ammotype1 will take from the secondary pool. 
	// By default NULL results in using ammotype2
	action void A_TakeAmmo(int amt = 1, class<Inventory> type = NULL)
	{
		if(!type) type = invoker.ammotype2;
		A_TakeInventory(type, amt);
	}
	
	// For reloading one at a time, like a shotgun.
	action void A_ReloadSingle()
	{
		if(countinv(invoker.AmmoType1) > 0)
		{
			TakeInventory(invoker.AmmoType1,1);
			GiveInventory(invoker.AmmoType2,1);
			A_CancelBackpackReload();
		}
	}

	// For readability when checking ammunition.
	action int CountLoadedAmmo()
	{
		return countinv(invoker.AmmoType2);
	}
	action int CountReservedAmmo()
	{
		return countinv(invoker.AmmoType1);
	}
	
	// Check if we need to reload, if we do, jump to Reload.
	action state A_GunCheckReload()
	{
		return !countinv(invoker.AmmoType2) ? ResolveState("Reload") : ResolveState(NULL);
	}
	
	// Validate that a reload should be done, returns fallback if mag is already full 
	// or if no reserve ammo is found.
	action state A_ValidateReload(StateLabel fallback="Ready")
	{
		let rammo = GetDefaultByType(invoker.AmmoType2);
		if(countinv(invoker.AmmoType2) == rammo.maxamount || countinv(invoker.AmmoType1) == 0)
			return ResolveState(fallback);
		return ResolveState(NULL);
	}
	
	// Getters and Setters for readability.
	action void A_ScopeDisable()
	{
		invoker.enablezoom = false;
	}
	action void A_ScopeEnable()
	{
		invoker.enablezoom = true;
	}
	action void A_ScopeON()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if(psp) psp.scale = (0,0);
		invoker.zoomed = true;
		A_StartSound(invoker.snd_zoomin, flags:CHANF_OVERLAP);
	}
	action void A_ScopeOFF()
	{
		let psp = player.GetPSprite(PSP_WEAPON);
		if(psp) psp.scale = (1.,1.);
		invoker.zoomed = false;
		A_StartSound(invoker.snd_zoomout, flags:CHANF_OVERLAP);
	}
	action bool A_CheckInScope()
	{
		return invoker.zoomed;
	}
	action void A_HaloWeaponReady(uint flags, bool usescope = false)
	{
		if(usescope) A_ScopeEnable();
		A_RWeaponReady(flags);
		A_Overlay(SIGHT_OVERLAY, "Scope.Ready", true);
	}
	action bool A_LowerAim()
	{
		return A_GetWeapYOffs() > 0;
	}
	
	// Custom lower and raise.
	action void A_GunLower(int speed = 32)
	{
		if(invoker.zoomed) 
			A_ScopeDisable();
		else 
			A_RLower(speed);
	}
	
	action void A_GunRaise(int speed = 32)
	{
		A_RRaise(speed);
	}
	
	States
	{	
		Deselect.Quick:
			"####" "#" 1;
			"####" "#" 0 
			{
				A_GunLower(12);
			}
		loop;
		
		WaitState:
			"####" "#" 1;
		loop;
		
		Scope.Ready:
			TNT1 A 1
			{	
				bool zoom_in  = A_ButtonStatus(BT_ALTATTACK, BTS_DOWN) && !invoker.zoomed;
				bool zoom_out = A_ButtonStatus(BT_ALTATTACK, BTS_UP) && invoker.zoomed;
			
				if(invoker.zoom_btnstate == BTS_PRESSED)
				{					
					zoom_in  = A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED) && !invoker.zoomed;
					zoom_out = A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED) && invoker.zoomed;
				}
				
				State scope_on = ResolveState("Scope.ON");
				State scope_off = ResolveState("Scope.OFF");
				if(!invoker.enablezoom && !invoker.zoomed)
				{
					return ResolveState(null);
				}
				else if(!invoker.enablezoom)
				{
					zoom_in = false;
					zoom_out = true;
				}
				if(zoom_in) return scope_on;
				if(zoom_out) return scope_off;
				return ResolveState(null);
			}
		loop;
		
		Scope.ON:
			TNT1 A 1 A_ScopeON();
			TNT1 A 5 A_SetZoom(invoker.scopezoom, 3, true);
			TNT1 A 0 
			{
				bool holding = A_ButtonStatus(BT_ALTATTACK, BTS_HELD) && !A_ButtonStatus(BT_ALTATTACK, BTS_PRESSED);
				invoker.zoom_btnstate = holding ? 0 : BTS_PRESSED;
			}
		goto Scope.Ready;
		Scope.OFF:
			TNT1 A 1 A_ScopeOFF();
			TNT1 A 5 A_SetZoom(0, 3, true);
		goto Scope.Ready;
	}
}



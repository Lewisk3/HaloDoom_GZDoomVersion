class HaloProjectile : FastProjectile
{
	double meterspeed;
	double truedamage;
	double range_falloff;
	double range_max;
	double falloff_minimum;
	vector3 spawnpos;
	Actor hitactor;
	
	Property SetRanges : range_falloff, range_max;
	Property MinRangeDamage : falloff_minimum;
	Property BaseDamage : truedamage;
	Property Speed_MPS : meterspeed;
	
	Default
	{
		Radius 3;
		Height 3;
		Speed 0;
		Projectile;
		+INTERPOLATEANGLES;
		DamageType "Bullet";
		
		HaloProjectile.SetRanges 61, 123;
		HaloProjectile.MinRangeDamage 40; 
		HaloProjectile.BaseDamage 145;
		HaloProjectile.Speed_MPS 914.0;
	}
	
	void Particles(Color col = 0xFFF0E11A, double amt = 30, double size = 2, double spd = 5, vector3 pos_spread = (30,30,30), vector2 ang_spread = (90,30))
	{
		for(int i = 0; i < amt; i++)
		{
			double part_angle = (angle+180)+frandom(-ang_spread.x,ang_spread.x);
			double part_pitch = pitch+frandom(-ang_spread.y,ang_spread.y);

			vector3 partpos = (
				cos(part_angle)*frandom(-pos_spread.x,pos_spread.x),
				sin(part_angle)*frandom(-pos_spread.y,pos_spread.y),
				sin(part_pitch)*frandom(-pos_spread.z,pos_spread.z)
			);
			
			vector3 partvel = (
				sin(part_angle)  * cos(part_pitch+90),
				sin(part_angle)  * cos(part_pitch+90),
				sin(part_pitch)) * spd;
		
			A_SpawnParticle(
				col,SPF_FULLBRIGHT | SPF_RELATIVE,16,size,
				part_angle,
				partpos.x,partpos.y,partpos.z,
				partvel.x,partvel.y,partvel.z
			);
		}
	}
	
	override int SpecialMissileHit(Actor victim)
	{	
		if(victim == target || !victim.bSHOOTABLE) return 1;
		hitactor = victim;
		AdjustRangeDamage();
		double scaled_damage = truedamage * GAMEPLAY_DAMAGEMOD;
		
		HaloPlayer plr = HaloPlayer(target);
		bool killed = victim.health-scaled_damage <= 0;
		
		//console.printf("Damage output: %f, Dist: %f", truedamage, getTravelDistance());
		Sound hitsnd = "Hit/Normal";
		
		// Determine headshot
        // Preform ray cast to determine where the shooter is aiming.
        FLineTraceData lt;
        LineTrace(angle,128,pitch,0,0,0,0,lt);
        float dmgz = lt.HitLocation.z;
        float headz    = (victim.pos.z + victim.height);
        float head_top =  18;
        // Compare ray location with the head hit boundaries
        if(dmgz <= headz && dmgz >= headz-head_top && killed) 
		{
			hitsnd = "Hit/Crit";
			Halo_OverlayUI.SendNetworkEvent("hitmark:HitM_Headshot:1");
		}
		else if(killed)
		{
			hitsnd = "Hit/Killed";
			Halo_OverlayUI.SendNetworkEvent("hitmark:HitM_Killed:1");
		}
		
		victim.DamageMobJ(self,target,scaled_damage,DamageType,0,angle);
		class<Actor> blud = victim.GetBloodType(0);
		if(blud && bBLOODSPLATTER && victim.bISMONSTER) victim.Spawn(blud,pos);

		// Hit feedback
		if(plr && (!plr.soundwait || killed))
		{
			target.A_StartSound(hitsnd, killed ? CHAN_VOICE : CHAN_BODY, CHANF_OVERLAP);
			plr.soundwait = 2;
		}
		
		Halo_OverlayUI.SendNetworkEvent("hitmark:HitM_Normal:0");
		
		return -1;
	}
	
	double getTravelDistance(bool tometers = true)
	{
		double convert = tometers ? UNIT_METER : 1.0;
		return clamp(HaloMath.Distance3D(pos, spawnpos),1,int.max) / convert;
	}	
	virtual void AdjustRangeDamage()
	{
		// Do not calculate damage if we have no ranged damage.
		if(range_max <= 0) return;
		// Interpolate to minimum damage based on range maximum.
		double dist = getTravelDistance();
		// Negate damage at max range.
		if(dist >= range_max)
		{
			// Destroy bullet so feedback is better,
			// we wont get hit markers at above max range.
			Destroy(); 
			return;
		}
		
		// Dampen damage until minimum.
		if(dist >= range_falloff && range_falloff > 0)
		{
			double distmax = dist/range_max;
			double dmgmod = (-1.5 * (distmax**2)) + 1;
			dmgmod = clamp(dmgmod, falloff_minimum/100., 1.0);
			truedamage = default.truedamage*dmgmod;
		}
	}
	virtual void Init()
	{
		spawnpos = pos;
		A_SetSpeed((meterspeed / 35.)*UNIT_METER);
		
		// Re-calculate velocity with new speed.
		double cosp = cos(pitch);
		vel = (
			cos(angle) * cosp,
			sin(angle) * cosp,
			-sin(pitch)
		) * speed;
		
		SetDamage(0);
	}
	
	override void PostBeginPlay()
	{
		Init();
		super.PostBeginPlay();
	}
	override void Tick()
	{
		super.Tick();
		if(target) SetOrigin(Vec3Offset(target.vel.x,target.vel.y,target.vel.z), true);
	}
}

class NeedleCounter : Inventory
{
	Array<HaloNeedleProjectile> needles;
	default
	{
		inventory.maxamount 1;
	}
	int CountNeedles()
	{
		return needles.Size();
	}
	void AddNeedle(HaloNeedleProjectile needle)
	{
		needles.Push(needle);
	}
	void RemoveNeedle(HaloNeedleProjectile needle)
	{
		for(int i = 0; i < needles.Size(); i++)
		{
			if(needles[i] == needle) 
			{
				needles.Delete(i);
				break;
			}
		}
	}
	void ExplodeNeedles()
	{
		for(int i = 0; i < needles.Size(); i++)	needles[i].doexplode = true;
	}
}
class HaloNeedleProjectile : Actor
{
	bool doexplode;
	Actor hitactor;
	vector3 hitoffs;
	double hitz;
	double hitangle;
	double hitpitch;
	int explodetimer, explodedelay, explodecount;
	NeedleCounter needlecount;
	Property ExplodeDelay : explodedelay;
	Property ExplodeCount : explodecount;

	Default
	{
		Radius 2;
		Height 5;
		Projectile;
		Speed 40; // Don't increase speed, otherwise they can bounce through walls.
		Damage 1;
		BounceType "Doom";
		BounceCount 4;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		-BOUNCEONACTORS;
		+SEEKERMISSILE;
		+SCREENSEEKER;
		Scale 0.25;
		HaloNeedleProjectile.ExplodeDelay 100;
		HaloNeedleProjectile.ExplodeCount 10;
		Translation "0:255=@70[128, 17, 247]";
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if(hitactor || victim == target) return 1;
		hitactor = victim;
		bSOLID = false;
		bMISSILE = false;
		vel *= 0;
		hitoffs = Level.SphericalCoords(pos, victim.pos, (angle, pitch));
		hitangle = angle-victim.angle;
		hitpitch = pitch-victim.pitch;
		hitz = pos.z-victim.pos.z;
		explodetimer = explodedelay;
		needlecount = NeedleCounter(victim.FindInventory("NeedleCounter"));
		if(!needlecount) 
		{
			victim.GiveInventory("NeedleCounter", 1);
			needlecount = NeedleCounter(victim.FindInventory("NeedleCounter"));
		}
		needlecount.AddNeedle(self);
		SetState(ResolveState("Spawn.HitActor"));
		return -1;
	}
	
	override void Tick()
	{
		super.Tick();
		if(!hitactor) return;
		double hitdist = hitoffs.z*0.25;
		double realang = hitactor.angle+hitoffs.x+hitangle;
		vector3 newpos = hitactor.Vec3Offset(cos(realang)*-hitdist, sin(realang)*-hitdist, hitz);
		angle = realang;
		pitch = hitactor.pitch+hitpitch;
		SetOrigin(newpos, true);
	}
	
	States
	{
		Spawn:	
			TRAC A 1 Bright A_SeekerMissile(30, 50, SMF_PRECISE|SMF_LOOK); 
		loop;
		Spawn.HitActor:
			TRAC A 1 Bright 
			{
				StateLabel finalst = Null;
				explodetimer--;
				if(hitactor && hitactor.health <= 0 && needlecount) 
					hitactor.RemoveInventory(needlecount); 
				
				if(doexplode) finalst = "Death.Explode";
				if(!bMISSILE && (!hitactor || hitactor.health <= 0) || explodetimer <= 0) 
					finalst = "Death.Explode";
				return ResolveState(finalst);
			}
		loop;
		Death.Explode:
			TRAC A 1 
			{
				if((needlecount && needlecount.CountNeedles() >= explodecount) && !doexplode) 
				{
					needlecount.ExplodeNeedles();
					hitactor.DamageMobJ(self, self.target, 60, "Explosive", 0, angle);
				}
				if(hitactor) hitactor.DamageMobJ(self, self.target, 20, "Explosive", 0, angle);
				if(needlecount) needlecount.RemoveNeedle(self);
				for(int i = 0; i < 10; i++) 
				{
					A_SpawnParticle(
						"Purple", SPF_FULLBRIGHT|SPF_RELVEL,
						 35,5,
						 angle+frandom(-90,90), 
						 frandom(-20,20),frandom(-20,20),frandom(-10,10),
						 10,10,frandom(-8,8),0,0,-0.1,1.0,0.14,0.15);
				}
			}
		stop;
	}
	
}

class HaloBullet : HaloProjectile
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 100;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
		+BLOODSPLATTER
		Decal "BulletHitDecal";
		Scale 0.5;
	}
		
	States
	{
		Spawn:	
			TRAC A 1 Bright;
		loop;
		Death:
			TNT1 A 0 
			{
				if(!hitactor) 
				{
					Particles(0xFFfaf611,15,2,10);
					Spawn("MuzzleSmoke", pos);
				}
			}
		stop;
	}
}
class HaloProjectile : FastProjectile
{
	double meterspeed;
	double truedamage;
	double range_falloff;
	double range_max;
	double falloff_minimum;
	double headshot_multiplier;
	double explode_dmg;
	double explode_radius;
	bool do_converge;
	vector3 spawnpos;
	Actor hitactor;
	int ripamount;
	bool isHoming;
	double homingStrength;
	
	// Keep track of ripped-through targets so damage isn't done multiple times.
	Array<Actor> act_hits;
	
	Property SetRanges : range_falloff, range_max;
	Property MinRangeDamage : falloff_minimum;
	Property BaseDamage : truedamage;
	Property Speed_MPS : meterspeed;
	Property RipperCount : ripamount;
	Property ConvergeToAim : do_converge;
	Property HeadshotDMGFactor : headshot_multiplier;
	Property DoExplosiveDamage : explode_dmg, explode_radius;
	Property SetupHoming : isHoming, homingStrength;
	
	Default
	{
		Radius 3;
		Height 3;
		Speed 0;
		Projectile;
		+INTERPOLATEANGLES;
		+BLOODSPLATTER;
		DamageType "Bullet";
		
		HaloProjectile.SetRanges 61, 123;
		HaloProjectile.MinRangeDamage 40; 
		HaloProjectile.BaseDamage 145;
		HaloProjectile.Speed_MPS 914.0;
		HaloProjectile.RipperCount 0;
		HaloProjectile.ConvergeToAim true;
		HaloProjectile.HeadshotDMGFactor 1.0;
	}
	
	override int SpecialMissileHit(Actor victim)
	{	
		// Skip these victims
		if(victim == target || !victim.bSHOOTABLE) return 1;
		
		// Ripped through actors only take damage once.
		if(act_hits.Find(victim) != act_hits.Size()) return 1;
		
		// Determine if victim is vehicle we're the driver of
		if(target)
		{
			let curveh = Veh_Manager(target.FindInventory("Veh_Manager"));
			if(curveh && curveh.veh == victim) return 1;
		}
		hitactor = victim;
		
		// Adjust Damage
		AdjustRangeDamage();
		double scaled_damage = truedamage * GAMEPLAY_DAMAGEMOD;
		bool headshot = HaloMath.CheckHeadshot(self, victim);
		if(headshot) scaled_damage *= headshot_multiplier;
		
		// Damage Victim
		victim.DamageMobJ(self,target,ceil(scaled_damage),DamageType,0,angle);
		if(explode_dmg > 0) A_Explode(explode_dmg, explode_radius, 0);

		// Spawn Blood
		class<Actor> blud = victim.GetBloodType(0);
		if(blud && bBLOODSPLATTER && victim.bISMONSTER) victim.Spawn(blud,pos);
	
		// Rip through actors
		act_hits.Push(victim);
		if(ripamount > 0) 
		{
			ripamount--;
			return 1;
		}
		
		return -1;
	}
	
	double getTravelDistance(bool tometers = true)
	{
		double convert = tometers ? UNIT_METER : 1.0;
		return clamp(HaloMath.Distance3D(pos, spawnpos),1,int.max) / convert;
	}	
	virtual void AdjustRangeDamage()
	{
		// Do not calculate damage if we have no ranged damage.
		if(range_max <= 0) return;
		// Interpolate to minimum damage based on range maximum.
		double dist = getTravelDistance();
		// Negate damage at max range.
		if(dist >= range_max)
		{
			// Destroy bullet so feedback is better,
			// we wont get hit markers at above max range.
			Destroy(); 
			return;
		}
		
		// Dampen damage until minimum.
		if(dist >= range_falloff && range_falloff > 0)
		{
			double distmax = dist/range_max;
			double dmgmod = (-1.5 * (distmax**2)) + 1;
			dmgmod = clamp(dmgmod, falloff_minimum/100., 1.0);
			truedamage = default.truedamage*dmgmod;
		}
	}
	virtual void Init()
	{
		spawnpos = pos;
		A_SetSpeed((meterspeed / 35.)*UNIT_METER);
		
		// Re-calculate velocity with new speed.
		double cosp = cos(pitch);
		vel = (
			cos(angle) * cosp,
			sin(angle) * cosp,
			-sin(pitch)
		) * speed;
		
		SetDamage(0);
	}
	
	void DoConverge(vector3 aimpos, vector2 offs)
	{
		// Do not follow crosshair converge for vehicles
		let curveh = Veh_Manager(target.FindInventory("Veh_Manager"));
		if(curveh) return;
		
		// Converge
		if(do_converge)
		{
			vector3 toaim = level.SphericalCoords(pos, aimpos, (angle-offs.x, pitch-offs.y));
			angle -= toaim.x;
			pitch -= toaim.y;
		}
		else
		{
			angle -= offs.x;
			pitch -= offs.y;
		}
	}
	
	override void PostBeginPlay()
	{
		Init();
		super.PostBeginPlay();
	}
	
	override void Tick()
	{
		super.Tick();
		if(target && GetAge() < 5) SetOrigin(Vec3Offset(target.vel.x,target.vel.y,target.vel.z), true);
		
		if(isHoming)
		{
			// Find nearest viable target, track target.
			if(tracer)
			{
				vector3 dest = (tracer.pos.xy, tracer.pos.z+(tracer.height*0.5));
				vector3 trackingAngles = level.SphericalCoords(pos, dest, (angle, pitch));
				A_SetAngle(angle - (trackingAngles.x * homingStrength), SPF_INTERPOLATE);
				A_SetPitch(pitch - (trackingAngles.y * homingStrength), SPF_INTERPOLATE);
				
				// Update velocity
				vector3 newVel = HaloMath.V3Offset(angle, pitch, roll, 1.0,0,0, vel.Length());
				vel = newVel;
			}
			else
			{
				let it = ThinkerIterator.Create();
				Actor act;
				int mindist = int.max;
				while(act = Actor(it.Next()))
				{
					LookExParams look;
					look.FOV = 30;
					if(target && !target.IsVisible(act, false, look)) continue;
					if(!act.bSHOOTABLE) continue;
					if(target && !act.isHostile(target)) continue;
					int dist = Distance3DSquared(act);
					if(dist < mindist) 
					{
						tracer = act;
						mindist = dist;
					}
				}
			}
		}
		
	}
}

class HaloSlowProjectile : Actor
{
	bool do_converge;
	double meterspeed;
	vector3 spawnpos;
	
	Property ConvergeToAim : do_converge;
	Property Speed_MPS : meterspeed;

	Default
	{
		Projectile;
		+INTERPOLATEANGLES;
		+BLOODSPLATTER;
		
		HaloSlowProjectile.ConvergeToAim true;
		HaloSlowProjectile.Speed_MPS 10;
	}
	
	double getTravelDistance(bool tometers = true)
	{
		double convert = tometers ? UNIT_METER : 1.0;
		return clamp(HaloMath.Distance3D(pos, spawnpos),1,int.max) / convert;
	}	
	
	virtual void Init()
	{
		spawnpos = pos;
		A_SetSpeed((meterspeed / 35.)*UNIT_METER);
		
		// Re-calculate velocity with new speed.
		double cosp = cos(pitch);
		vel = (
			cos(angle) * cosp,
			sin(angle) * cosp,
			-sin(pitch)
		) * speed;
	}
	
	void DoConverge(vector3 aimpos, vector2 offs)
	{
		// Do not follow crosshair converge for vehicles
		let curveh = Veh_Manager(target.FindInventory("Veh_Manager"));
		if(curveh) return;
		
		// Converge
		if(do_converge)
		{
			vector3 toaim = level.SphericalCoords(pos, aimpos, (angle-offs.x, pitch-offs.y));
			angle -= toaim.x;
			pitch -= toaim.y;
		}
		else
		{
			angle -= offs.x;
			pitch -= offs.y;
		}
	}
	
	override void PostBeginPlay()
	{
		Init();
		super.PostBeginPlay();
	}
}

class NeedleCounter : Inventory
{
	Array<HaloNeedleProjectile> needles;
	default
	{
		inventory.maxamount 1;
	}
	int CountNeedles()
	{
		return needles.Size();
	}
	void AddNeedle(HaloNeedleProjectile needle)
	{
		needles.Push(needle);
	}
	void RemoveNeedle(HaloNeedleProjectile needle)
	{
		for(int i = 0; i < needles.Size(); i++)
		{
			if(needles[i] == needle) 
			{
				needles.Delete(i);
				break;
			}
		}
	}
	void ExplodeNeedles()
	{
		for(int i = needles.Size()-1; i >= 0; i--)	needles[i].doexplode = true;
	}
}
class HaloNeedleProjectile : HaloSlowProjectile
{
	double hitdmg;
	double shatterdmg;
	bool doexplode;
	Actor hitactor;
	vector3 hitoffs;
	vector3 hitrelpos;
	double hitangle;
	double hitpitch;
	double homTurnMax, homStrength;
	int explodetimer, explodedelay, explodecount;
	NeedleCounter needlecount;
	Property ExplodeDelay : explodedelay;
	Property ExplodeCount : explodecount;
	Property NeedleDamages : hitdmg, shatterdmg;
	Property NeedleHoming : homTurnMax, homStrength;

	Default
	{
		Radius 2;
		Height 5;
		Projectile;
		// Speed 40; Don't increase speed, otherwise they can bounce through walls.
		DamageFunction getNeedleDamage();
		BounceType "Doom";
		BounceCount 4;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		-BOUNCEONACTORS;
		+SEEKERMISSILE;
		+SCREENSEEKER;
		+BLOODSPLATTER;
		Scale 0.25;
		HaloSlowProjectile.Speed_MPS 33;
		HaloNeedleProjectile.NeedleDamages 2, 10;
		HaloNeedleProjectile.ExplodeDelay 35; // 1 second.
		HaloNeedleProjectile.ExplodeCount 7; 
		HaloNeedleProjectile.NeedleHoming 40, 0.05;
		Translation "0:255=@70[128, 17, 247]";
	}
	
	virtual int getNeedleDamage()
	{
		return hitdmg;
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		if(hitactor || victim == target) return 1;
		hitactor = victim;
		bSOLID = false;
		bMISSILE = false;
		vel *= 0;
		hitoffs = Level.SphericalCoords(pos, victim.pos, (angle, pitch));
		hitangle = angle-victim.angle;
		hitpitch = pitch-victim.pitch;
		hitrelpos = level.Vec3Diff(victim.pos, pos);
		hitrelpos.z += frandom(-victim.height*0.35,victim.height*0.35);
		hitangle += frandom(-15,15);
		explodetimer = explodedelay;
		needlecount = NeedleCounter(victim.FindInventory("NeedleCounter"));
		if(!needlecount) 
		{
			victim.GiveInventory("NeedleCounter", 1);
			needlecount = NeedleCounter(victim.FindInventory("NeedleCounter"));
		}
		needlecount.AddNeedle(self);
		SetState(ResolveState("Spawn.HitActor"));
		return -1;
	}
	
	override void Tick()
	{
		super.Tick();
		if(hitactor)
		{
			double hitdist = hitoffs.z*0.25;
			double realang = hitactor.angle+hitoffs.x+hitangle;
			vector3 newpos = hitactor.Vec3Offset(cos(realang)*-hitdist, sin(realang)*-hitdist, hitrelpos.z);
			angle = realang;
			pitch = hitactor.pitch+hitpitch;
			SetOrigin(newpos, true);
		}
		else // Do homing
		{
			// Find nearest viable target, track target.
			if(tracer)
			{
				vector3 dest = (tracer.pos.xy, tracer.pos.z+(tracer.height*0.5));
				vector3 trackingAngles = level.SphericalCoords(pos, dest, (angle, pitch));
				if( abs(trackingAngles.x) > homTurnMax ) return;
				
				A_SetAngle(angle - (trackingAngles.x * homStrength), SPF_INTERPOLATE);
				A_SetPitch(pitch - (trackingAngles.y * homStrength), SPF_INTERPOLATE);
				
				// Update velocity
				vector3 newVel = HaloMath.V3Offset(angle, pitch, roll, 1.0,0,0, vel.Length());
				vel = newVel;
			}
			else
			{
				let it = ThinkerIterator.Create();
				Actor act;
				int mindist = int.max;
				while(act = Actor(it.Next()))
				{
					LookExParams look;
					look.FOV = 30;
					if(target && !target.IsVisible(act, false, look)) continue;
					if(!act.bSHOOTABLE) continue;
					if(target && !act.isHostile(target)) continue;
					int dist = Distance3DSquared(act);
					if(dist < mindist) 
					{
						tracer = act;
						mindist = dist;
					}
				}
			}
		}
	}
		
	States
	{
		Spawn:	
			TRAC A 1 Bright 
			{
				SmokeTrail.Start("Purple", pos, pos - (vel * 5), (-angle, -pitch), 0.5);
			}
		loop;
		Spawn.HitActor:
			TRAC A 1 Bright 
			{
				StateLabel finalst = Null;
				explodetimer--;
				if(hitactor && hitactor.health <= 0 && needlecount) 
					hitactor.RemoveInventory(needlecount); 
				
				if(doexplode) finalst = "Death.Explode";
				if(!bMISSILE && (!hitactor || hitactor.health <= 0) || explodetimer <= 0) 
					finalst = "Death.Explode";
				return ResolveState(finalst);
			}
		loop;
		Death.Explode:
			TRAC A 1 
			{
				if((needlecount && needlecount.CountNeedles() >= explodecount) && !doexplode) 
				{
					if(hitactor)
					{
						vector3 explodePos = hitactor.pos + (0,0,hitactor.height*0.5);
						Spawn("NeedleExplosion_Flare", explodePos);
						Spawn("NeedleExplosion", explodePos);
					}
					A_StartSound("Halo/Weapons/Needler/SuperCombine", flags:CHANF_OVERLAP);
					needlecount.ExplodeNeedles();
					hitactor.DamageMobJ(self, self.target, shatterdmg * explodecount, "Explosive", 0, angle);
					A_Explode(128,128,0);
					
					for(int i = 0; i < 100; i++) 
					{
						double ang = frandom(0,360);
						double pit = frandom(-45,45);
						vector3 rdir = (
							cos(ang),
							sin(ang),
							-sin(pit)
						) * frandom(20,35);
						
						A_SpawnParticle(
							"Purple", SPF_FULLBRIGHT, 20, 10.0, ang,
							0,0, hitactor.height*0.5, rdir.x,rdir.y,rdir.z,0,0,0,
							frandom(0.5,1.0), 0.0125
						);
					}
				}
				
				if(hitactor) hitactor.DamageMobJ(self, self.target, shatterdmg, "Explosive", 0, angle);
				if(needlecount) needlecount.RemoveNeedle(self);
				Spawn("NeedleMiniExplosion", pos);
				
				for(int i = 0; i < 10; i++) 
				{
					A_SpawnParticle(
						"Purple", SPF_FULLBRIGHT|SPF_RELVEL,
						 35,5,
						 angle+frandom(-90,90), 
						 frandom(-20,20),frandom(-20,20),frandom(-10,10),
						 10,10,frandom(-8,8),0,0,-0.1,1.0,0.14,0.15);
				}
			}
		stop;
	}
}

class NeedleExplosion_Flare : TankRocket_Flare
{
	Default
	{
		Scale 0.75;
		RenderStyle "AddShaded";
		Alpha 1.0;
	}
	
	override void BeginPlay()
	{
		super.BeginPlay();
		SetShade(0xD6F843FF);
	}
}
class NeedleExplosion : FastActor
{
	Default
	{
		Scale 1.0;
		Alpha 1.0;
		RenderStyle "Add";
		//Translation "0:255=@60[248, 67, 255]";
	}
		
	States
	{
		Spawn:
			FX58 ABCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}
class NeedleMiniExplosion : NeedleExplosion
{
	Default
	{
		Scale 0.25;
		Translation "0:255=@60[248, 67, 255]";
	}
}

class HaloBullet : HaloProjectile
{
	Default
	{
		Radius 1;
		Height 1;
		Speed 100;
		RenderStyle "Add";
		+INTERPOLATEANGLES;
		+BLOODSPLATTER
		Decal "BulletHitDecal";
		Scale 0.5;
	}
		
	States
	{
		Spawn:	
			TRAC A 1 Bright;
		loop;
		Death:
			TNT1 A 0 
			{
				if(!hitactor) 
				{
					HaloMath.ParticlesFX(self, 0xFFfaf611,15,2,10);
					Spawn("MuzzleSmoke", pos);
				}
			}
		stop;
	}
}

// Railgun Beam
class RailgunProjectile : FastProjectile
{
	Actor source;
	double biridist;
	double aimdist;
	double expdmg;
	vector3 startpos;
	vector3 endpos;
	vector3 posoffs;
	vector3 dir;
	
	// Keep track of ripped-through targets so damage isn't done multiple times.
	int ripamount;
	Array<Actor> act_hits;
	Property RipperCount : ripamount;
	
	Default
	{
		Radius 10;
		Height 10;
		RailgunProjectile.RipperCount 10;
		Speed STANCHION_BMPS;
		Projectile;
	}
	
	override int SpecialMissileHit(Actor victim)
	{
		// Ripped through actors only take damage once.
		if(act_hits.Find(victim) != act_hits.Size()) return 1;
	
		victim.DamageMobj(source, self, damage, "Railgun", DMG_THRUSTLESS, angle);
		act_hits.Push(victim);	
		victim.BloodSplatter(pos, angle, true);
		
		let shock = Spawn("Railgun_Shockwave", pos);
		if(shock) 
		{
			shock.SetShade(0xFFfc9d03);
			shock.A_SetScale(0.05);
		}
		
		double inertia = HaloMath.GetInertia(victim.mass);
		inertia = clamp(inertia, 0.5, 2.0);
		victim.Thrust(20*inertia, angle);
		victim.vel.z += 10*inertia;
		
		// Rip through actors
		if(ripamount > 0) 
		{
			ripamount--;
			return 1;
		}
		return 0;
	}
	
	override bool CanCollideWith(Actor other, bool passive)
	{
		if(other == source) return false;
		return super.CanCollideWith(other, passive);
	}
	
	static RailgunProjectile FireRailgun(Actor source, double dmg, double expdmg, vector3 offs, vector2 viewoffs = (0,0))
	{
		vector3 spawnpos = HaloMath.RelativeV3Offset(source, 0,0,0, offs.x, offs.y, offs.z, 1.);
		let proj = RailgunProjectile(Actor.Spawn("RailgunProjectile", spawnpos));
		if(proj)
		{
			proj.angle = source.angle+viewoffs.x;
			proj.pitch = source.pitch+viewoffs.y;
			proj.startpos = spawnpos;
			proj.posoffs = offs;
			proj.source = source;
			proj.target = source;
			
			double cosp = cos(proj.pitch);
			proj.vel = (
				cos(proj.angle) * cosp,
				sin(proj.angle) * cosp,
				-sin(proj.pitch)
			) * ((proj.default.speed / 35) * UNIT_METER);
			proj.dir = proj.vel.Unit();
	
			FLineTraceData lt;
			proj.LineTrace(proj.angle, int.max, proj.pitch, TRF_THRUACTORS, offsetforward:source.radius+16, data:lt);
			vector3 hitpos = lt.HitLocation;
			proj.endpos = hitpos;
			proj.aimdist = lt.Distance;
			proj.SetDamage(dmg);
			proj.expdmg = expdmg;
			
			Spawn("Railgun_MuzzleExplosion", proj.pos);
			
			// Outer-most trail
			let smok = SmokeTrail.Start(0xFFFF0000, spawnpos, hitpos, (proj.angle, proj.pitch), 0.5, type:"RailgunTrail");
			if(smok)
			{
				smok.A_SetScale(20.0);
			}
			
			// Outer trail
			smok = SmokeTrail.Start(0xFFfc9d03, spawnpos, hitpos, (proj.angle, proj.pitch), 1.0, type:"RailgunTrail");
			if(smok)
			{
				smok.A_SetScale(10.0);
			}
			
			// Inner trail
			smok = SmokeTrail.Start(0xFFFFFFFF, spawnpos, hitpos, (proj.angle, proj.pitch), 3.0);
			if(smok)
			{
				smok.A_SetScale(5.0);
			}
			
			// Shockwave
			proj.Shockwave(0.2, 0, 0xFF313de8); 
			proj.Biri(10, 200, 0);
			
			//proj.Shockwave(0.1, 0.1);
			//proj.Biri(5, 100, 0.1);
			
			//proj.Shockwave(0.05, 0.25);
			//proj.Biri(5, 75, 0.25);
		}
		return proj;
	}
	
	void Shockwave(double scale, double dist = 0.10, Color col = 0xFFfc9d03)
	{
		vector3 forward = HaloMath.V3Offset(angle, pitch, roll, 40, 0,0, 1.);
		forward = level.vec3offset(forward, startpos);
		vector3 shockpos = level.vec3offset(forward, dir * (aimdist * dist));
		let shock = Spawn("Railgun_Shockwave", shockpos);
		if(shock) 
		{
			shock.SetShade(col);
			shock.A_SetScale(scale);
		}
	}
	
	void Biri(double amt = 5, double dist = 50, double fixed_dist = -1)
	{
		double ang = angle+180;
		biridist = fixed_dist >= 0 ? fixed_dist : frandom(0, 1.0);
		for(int i = 0; i < amt; i++)
		{
			vector3 biripos = level.vec3offset(startpos, dir * (aimdist * biridist));
			BiriBiri.DoLightning(biripos, (ang + frandom(-60,60), 0), dist:dist, 1.0, 10.0, 5, 200);
			if(fixed_dist < 0) biridist += frandom(-0.05, 0.05);
			biripos.z -= 10;
			Spawn("LightningLight", biripos);
			if(i == 0) Spawn("LightSmoke", biripos);
		}
	}
	
	override void Tick()
	{
		super.Tick();
		if (isFrozen()) return;
		Biri(3);
	}
	
	States
	{
		Spawn:
			TNT1 A 1;
		loop;
		
		Crash:
		XDeath:
		Death:
			TNT1 A 0 
			{
				Spawn("Railgun_Explosion", pos);
				A_Explode(expdmg, expdmg*0.5, 0);
			}
		Death.FadeOut:
			TNT1 A 1 
			{
				A_FadeOut(0.02);
				if(GetAge()%5 == 0)
				{
					for(int i = 0; i < 2; i++)
						BiriBiri.DoLightning(pos, (angle+frandom(-45, 45)+180, frandom(-90,90)), dist:80, 1.0, 6.0, 5, 100);
				}
			}
		wait;
	}
}

class LSR_Railgun : Laser
{
	Default
	{
		Radius 2;
		Scale 1.25;
		RenderStyle "Add";
		Alpha 0.75;
		Laser.Interpolation 1.0;
		Translation "0:255=@80[255,255,255]"; // 255 200 5
	}
	
	States
	{
		Spawn:
			BEAM A 1 Bright;
		loop;
	}	
}

class RailgunTrail : SmokeTrail
{
	Default
	{
		RenderStyle "AddShaded";
	}
	
	States
	{
		Spawn:
			BEAM A 10 Bright;
		Spawn.Loop:
			BEAM A 1 Bright A_FadeOut(0.02);
		loop;
	}
}

class Railgun_Shockwave : FastActor
{
	Default
	{
		RenderStyle "AddShaded";
		Scale 0.25;
	}
	
	override void Tick()
	{
		super.Tick();
		if(isFrozen()) return;
		
		A_SetScale(Scale.X + 0.008);
	}
	
	States
	{
		Spawn:
			BSW0 A 4 Bright;
			BSW0 A 1 Bright A_FadeOut(0.05);
		wait;
	}
}

class Railgun_Explosion : FastActor
{
	Default
	{
		Scale 1.75;
	}
	
	States
	{
		Spawn:
			TNT1 A 0;
			TNT1 A 1
			{
				A_StartSound("Halo/Scorpion/MissileExplosion", flags:CHANF_OVERLAP, attenuation: 0.1);
				Spawn("ImpactSparks", pos);
			}
			SX04 A 1 Bright
			{	
				let flare = Spawn("TankRocket_Flare", pos);
				if(flare) 
				{
					// flare.A_SetRenderStyle(1.0, STYLE_AddShaded);
					// flare.SetShade(0xFF313de8);
					flare.A_SetScale(0.5);
				}
				
				// Flying explosions
				for(int i = 0; i < random(15,30); i++)
				{
					double spawnang = frandom(0,180);
					double spawndist = frandom(-10, 10);
					vector3 spawndir = (
						cos(angle + spawnang),
						sin(angle + spawnang),
						0
					) * spawndist;
					
					spawndir.z = frandom(-30,30);
					let expl = Spawn("TankRocket_FlyingExplosion", level.vec3offset(pos, spawndir));
					if(expl)
					{
						expl.A_SetScale(0.25);
						double velang = frandom(-180,180);
						vector3 veldir = (
							cos(velang),
							sin(velang),
							sin(frandom(-45,45)) * 1.5
						);
						expl.vel = veldir * 10;
					}
				}
			}
			SX04 BCDEFGHIJKLMNOPQ 1 Bright;
		stop;
	}
}

class Railgun_MuzzleExplosion : FastActor
{
	Default
	{
		+ROLLSPRITE;
		Scale 0.5;
	}
	
	States
	{
		Spawn:	
			TNT1 A 0;
			FX58 A 1 Bright
			{
				let flare = Spawn("TankRocket_Flare", pos);
				if(flare) flare.A_SetScale(0.25);				
			}
			FX58 AAABCDEFGHIJKLMNOP 2 Bright
			{
				roll += 0.01;
				A_FadeOut(0.005);
			}
			FX58 Q 1 Bright A_FadeOut(0.05);
		stop;
	}
}
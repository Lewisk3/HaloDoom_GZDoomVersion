// [Samu] Man! Setting a good resolution was a true hassle!
// 		  Made it a bit faster, and also, replaced the reloading sound for a faster version.
//		  Gun's centered properly, and now contains a reloading function!
class Halo_Magnum_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 8;
	}
}

class Halo_Magnum_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 8;
		Inventory.MaxAmount 32;
		Inventory.Icon "HLAMG0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 8 Rounds for the Magnum";
		
		Ammo.BackpackMaxAmount 64;
	}
	
	States
	{
		Spawn:
			HLAM G -1 Bright;
		stop;
	}
}

class HaloMagnum_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges MAGNUM_RANGE1, MAGNUM_RANGE2;
		HaloProjectile.MinRangeDamage MAGNUM_MINDMG; 
		HaloProjectile.BaseDamage MAGNUM_DMG;
		HaloProjectile.Speed_MPS MAGNUM_BMPS;
		HaloProjectile.HeadshotDMGFactor MAGNUM_HEDMOD;
		HaloProjectile.ShieldDamageFactors 1.0, 1.0;
		HaloProjectile.RipperCount 2;
		
		Scale 2.0;
	}
}

class Halo_Magnum : HaloGun
{
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 2;
		Obituary "%o got a taste of Halo CE Competitive from %k's Magnum.";
		Inventory.PickupMessage	"Picked up the M6D-PD Magnum.";
		Tag "Magnum";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_Magnum_Reserves";
		Weapon.AmmoType2 "Halo_Magnum_Clip";
		Weapon.AmmoGive 12;
				
		// Recoil
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.15;
		HaloGun.BaseRecoil MAGNUM_RECOIL;
		HaloGun.Inaccuracy MAGNUM_ACCMOD;
		HaloGun.Crosshair "MagRet", 1.0;
		HaloGun.UIGraphic "WI_MAGNM", 0.8, 0.8;
		HaloGun.UISight "SI_MAG", 1.0, 0.7;
		HaloGun.SetupScope 1.25, 0.5;
		HaloGun.ZoomSounds "Halo/Weapons/Zoom/IN", "Halo/Weapons/Zoom/OUT";
		HaloGun.SetupUIAmmo "WI_AMM5", 16, 16, 0, 14;
		
		HaloGun.Availability "HL1, HL3, HL4, SpartanOverkill";
		HaloGun.PowerTier P_STRONG;
		HaloGun.Rarity 70;
		
		RecoilWeapon.YOffsetRange -10, 40;
	}

	override int GetPowerTier()
	{
		if(HaloPlayer.IsGameType("HL1")) return P_MID;
		if(HaloPlayer.IsGameType("SpartanOverkill")) return P_NORM;
		return super.GetPowerTier();
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		// Modify weapon stats if running with CE gametype.
		if(!Owner.player || Owner.player.ReadyWeapon != self) return;
		
		if(HaloPlayer.IsGameType("HL1")) 
		{
			damage_modifier = 0.35;
		}
		else
		{
			// Restore stats for other gametypes.
			damage_modifier = default.damage_modifier;
			SpawnTier = default.SpawnTier;
		}
	}
	
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/Mag_MD6/Fire");
		MarkSound("Halo/Weapons/Mag_MD6/Fire/Bass");
		MarkSound("Halo/Weapons/Mag_MD6/Mech");
		MarkSound("Halo/Weapons/Mag_MD6/Reload");
		MarkSound("Halo/Weapons/Mag_MD6/Select");
	}
	
	action void A_FireMagnum()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/Mag_MD6/Fire", 0);
		A_WeapSound("Halo/Weapons/Mag_MD6/Fire/Bass", CHANF_OVERLAP);
		A_ShootProjectile("HaloMagnum_Bullet", 12);
		A_SetSFXPos(25,-9,-10);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_SetSFXPos(25,-20,-12);
		A_SpawnSFX("SmallCasing", -90,20);
		A_TakeAmmo();
		A_UpdateSpread();
	}
	action state A_CheckRapidFire()
	{
		return A_JumpIf(A_FirePressed(), "Fire");
	}
	
	States
	{
		Ready:
			TNT1 A 0 A_JumpIf(!A_DoFullSelectAnimation(), "Ready.Chambered");
			TNT1 A 4 A_WeapSound("Halo/Weapons/Mag_MD6/Draw");
			W0D1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim(-5, true);
			W0D2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			W0D3 A 1;
		goto Ready.Active;
		Ready.Chambered:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Mag_MD6/Select");
			W0D2 UVWXYZ 1 A_DoSelectAnim(-5);
		Ready.Active:
			W0G1 A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
		
		Ready.Dryfire:
			W0G1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			W0D2 ZYXWVU 1;
			W0D2 U 1 A_GunLower();
		wait;
		
		//  - 210RPM -
		// 210/60 = 3.5
		// 35/3.5 = 10 frames.
		Fire:
			TNT1 A 0 A_JumpIf(CountLoadedAmmo() == 1, "Fire.LastShot");
			W0F1 A 1 bright
			{
				A_RecoilOffset(0,8,1);
				return A_GunCheckReload();
			}
			TNT1 A 0 
			{
				A_FireMagnum();
				A_ModifyRecoil(A_CheckInScope() ? 0.25 : 1.0);
				A_SetRecoil(6.47, 0, 2);
				A_SetZoom(0.90, 1);
				A_RQuakeEx(2,2,4,6,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RollQuake(2,10,3);
			}
			W0F1 C 1 bright A_RecoilOffset(16,-20,4);
			W0F1 D 1 
			{
				A_SetZoom(1.0, 8);
				A_Light(0);
				A_SetRecoil(-0.18, 0, 8);
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/Mag_MD6/Mech", CHANF_OVERLAP);
			W0F1 EFG 1 A_RecoilOffset(0,0,4);
			W0F1 HI 1;
			W0F1 JKLMNOPQRSTUVWXY 1; 
		goto Ready.Active;
	
		Fire.LastShot:
			W0F1 A 1 bright
			{
				A_RecoilOffset(0,8,1);
				return A_GunCheckReload();
			}
			TNT1 A 0 
			{
				A_FireMagnum();
				A_ModifyRecoil(A_CheckInScope() ? 0.25 : 1.0);
				A_SetRecoil(6.47, 0, 2);
				A_SetZoom(0.92, 1);
				A_RQuakeEx(2,2,4,6,0,20,"",QF_RELATIVE|QF_WAVE);
				A_RollQuake(2,10,3);
			}
			W0F1 Z 1 bright A_RecoilOffset(16,-20,4);
			W0F2 A 1 
			{
				A_SetZoom(1.0, 8);
				A_Light(0);
				A_SetRecoil(-0.18, 0, 8);
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/Mag_MD6/Mech", CHANF_OVERLAP);
			W0F2 BCD 1 A_RecoilOffset(0,0,4);
			W0F2 EF 1;
			W0F2 GHIJKLMNOPQRSTUV 1; 
		goto Reload;
		
		// [Lewisk] A_ValidateReload and A_WeapSound are not in the same state because 
		// that'll change the return type of the annon function to a State.
		// This results in the reload sound not being seperated from the 
		// conditional check.
		Reload:
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Reload.Empty");
			TNT1 A 0 A_StartSound("Halo/Weapons/Mag_MD6/Reload", CHAN_RELOADING, CHANF_OVERLAP);
			W0T1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			W0T2 ABCDEFGHIJKLMNOPQRS 1;
			W0T2 T 1 A_ReloadClip();
			W0T2 UVWXYZ 1;
			W0T3 ABCDEFGHIJKLMNOP 1;
			TNT1 A 0 A_GotoState("Ready.Active");
			
		Reload.Empty:
			TNT1 A 0 A_WeapSound("Halo/Weapons/Mag_MD6/Reload/Empty", CHANF_OVERLAP);
			W0R1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			W0R2 ABCDEFGHIJKLMNOPQRS 1;
			W0R2 T 1 A_ReloadClip();
			W0R2 UVWXYZ 1;
			W0R3 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1;
			W0R4 ABCD 1;
		goto Ready.Active;
		
		Spawn:
			MGFL A -1;
		stop;
	}
}

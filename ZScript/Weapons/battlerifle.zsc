class Halo_BAR_Clip : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 36;
	}
}
class Halo_BAR_Reserves : Ammo
{
	mixin WorldAmmoBehavior;
	Default 
	{
		Radius 8;
		Height 6;
		Scale 0.65;

		Inventory.Amount 36;
		Inventory.MaxAmount 144;
		Inventory.Icon "HLAMB0";
		Inventory.PickupSound "Halo/Pickup/Ammo";
		Inventory.PickupMessage "Picked up 36 Rounds for the Battle Rifle";
		
		Ammo.BackpackMaxAmount 216;
	}
	
	States
	{
		Spawn:
			HLAM B -1 Bright;
		stop;
	}
}

class HaloBattleRifle_Bullet : HaloBullet 
{
	Default
	{
		HaloProjectile.SetRanges BARIFLE_RANGE1, BARIFLE_RANGE2;
		HaloProjectile.MinRangeDamage BARIFLE_MINDMG; 
		HaloProjectile.BaseDamage BARIFLE_DMG;
		HaloProjectile.Speed_MPS BARIFLE_BMPS;
		HaloProjectile.RipperDamageFalloff 0.25;
		HaloProjectile.RipperCount 3;
		HaloProjectile.HeadshotDMGFactor BARIFLE_HEDMOD;
		
		// Do normal damage to body (1.0), don't deal any headshot bonus to head.
		HaloProjectile.ShieldDamageFactors 1.0, 1.0;
		Scale 0.5;
	}
}

class Halo_BattleRifle : HaloGun
{	
	Default
	{
		//$Category "HaloDoom/Weapons"
		Weapon.SlotNumber 1;
		Obituary "%o got a taste of competitive halo by %k's Battle Rifle.";
		Inventory.PickupMessage	"Picked up the Battle Rifle.";
		Tag "Battle Rifle";
		Weapon.BobSpeed 1.86;
		Weapon.BobRangeX 0.30;
		Weapon.AmmoType1 "Halo_BAR_Reserves";
		Weapon.AmmoType2 "Halo_BAR_Clip";
		Weapon.AmmoGive 36;
				
		// Recoil
		HaloGun.Bloom 0.8;
		HaloGun.BloomSpeed 0.30;
		HaloGun.BaseRecoil BARIFLE_RECOIL;
		HaloGun.Inaccuracy BARIFLE_ACCMOD;
		HaloGun.Crosshair "BARRet", 1.0;
		HaloGun.UIGraphic "WI_BTR", 1.0, 1.0;
		HaloGun.UISight "SI_BR", 0.3, 0.7;
		HaloGun.SetupScope 2.0, 0.25;
		HaloGun.ZoomSounds "Halo/Weapons/Zoom/IN", "Halo/Weapons/Zoom/OUT";
		HaloGun.SetupUIAmmo "WI_AMM6", 20, 12, 0, 9;
		HaloGun.UIAmmo_Scale_Offset 0.7, 0,0;
		
		HaloGun.Availability "HL2, HL3, HL4";
		HaloGun.PowerTier P_NORM;
		
		RecoilWeapon.YOffsetRange -5, 40;
	}
	
	override void GetStatsLore(out Array<String> stats, out string lore)
	{
		stats.Push("BR45 Heavy Barrel Service Rifle");
		stats.Push("Ammo Type: Misriah Armory 7.92Ã—57mm");
		stats.Push("Frame: Bullpup");
		stats.Push("Feed System: 36 Round Mag");	
		stats.Push(String.Format("Base Damage: %d", BARIFLE_DMG));
		
		lore = (
			"The BR45 Battle Rifle was the prime of the BR4 series, the first "
			"installment of the BR line of service rifles designed by Misriah "
			"Armories when they were commissioned by the UNSC. While mainly "
			"used by the army and navy, other branches complained about it "
			"being over engineered with intense recoil and inconsistent "
			"accuracy. Later models of the BR45 replaced the barrel with one "
			"that was longer and heavier and featured a faster cyclic rate in "
			"the rifling for better accuracy. The BR4 series was eventually "
			"replaced by its younger brother, "
			"the BR5 series around 2525. "
		);
	}
	
	override void MarkPrecacheSounds()
	{
		// Prevent stutters by precaching weapon sounds.
		MarkSound("Halo/Weapons/BattleRifle/Fire");
		MarkSound("Halo/Weapons/BattleRifle/Fire/Bass");
		MarkSound("Halo/Weapons/BattleRifle/Mech");
		MarkSound("Halo/Weapons/BattleRifle/Reload/Full");
		MarkSound("Halo/Weapons/BattleRifle/Reload/Empty");
		MarkSound("Halo/Weapons/BattleRifle/Select");
	}
	
	action void A_FireRifle()
	{
		A_Light(2);
		A_WeapSound("Halo/Weapons/BattleRifle/Fire", 0);
		A_WeapSound("Halo/Weapons/BattleRifle/Fire/Bass", CHANF_OVERLAP);
		A_ShootProjectile("HaloBattleRifle_Bullet", 10);	
		A_SetSFXPos(20,-22,-15);
		A_SpawnSFX("BulletCasing", -90,-20);
		A_SetSFXPos(25,-10,-10);
		A_SpawnSFX("MuzzleSmoke", 0,0);
		A_TakeAmmo();
	}
	
	action void A_ReloadSound()
	{
		Sound reload_snd = "Halo/Weapons/BattleRifle/Reload/Full";
		if(!CountLoadedAmmo()) reload_snd = "Halo/Weapons/BattleRifle/Reload/Empty";
		A_StartSound(reload_snd, CHAN_RELOADING, CHANF_OVERLAP);
	}
	
	States
	{
		
		Ready:
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/BattleRifle/Select");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Chamber");
			}
			W2S1 ABCDEFGHIJKLMNOPQRSTUVWXY 1 A_DoSelectAnim(-20);
		goto Ready.Active;
		Ready.Chamber:
			W2D1 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim(0, true);
			W2D2 ABCDEFGHIJKLMNOPQRSTUVWXYZ 1 A_DoSelectAnim(0, true);
			W2D3 ABCDE 1;
		Ready.Active:
			W2I1 A 1 A_HaloWeaponReady(WRF_ALLOWRELOAD, true);
		loop;
		
		Ready.Dryfire:
			W2I1 A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			W2S1 MLKJIHGEDCB 1;
			W2S1 A 1 A_GunLower();
		wait;
		
		
		//  - 900RPM -
		// 900/60 = ~15
		// 35/15 = ~2 frames.
		Fire:
			TNT1 A 0 A_GunCheckReload();
			W2F1 A 1 Bright
			{
				A_ModifyRecoil(A_CheckInScope() ? 0.25 : 1.0);
			}
			W2F1 B 1 Bright
			{
				A_FireRifle();
				A_SetRecoil(0.3, 0, 4);
				A_RollQuake(2,6,1);
				A_RQuakeEx(1,2,2,2,0,20,"",QF_RELATIVE);
				A_UpdateSpread();
			}
			W2F1 C 1 Bright;
			W2F1 D 1 Bright
			{
				A_RecoilOffset(0,8,2);
				A_MechanismSound("Halo/Weapons/BattleRifle/Mech");
				A_GunCheckReload();
				A_Light(0);
			}
			W2F1 E 1 
			{
				A_FireRifle();
				A_SetRecoil(0.3, 0, 4);
				A_RQuakeEx(1,2,2,3,0,20,"",QF_RELATIVE);
			}
			W2F1 F 1 Bright;
			W2F1 G 1 Bright
			{
				A_RollQuake(-2,8,2);
				A_MechanismSound("Halo/Weapons/BattleRifle/Mech");
				A_GunCheckReload();
				A_Light(0);
			}
			W2F1 H 1 
			{
				A_FireRifle();
				A_SetRecoil(-0.15, 0, 8);
				//A_RQuakeEx(2,0,2,4,0,20,"",QF_RELATIVE);
				A_RQuakeEx(2,3,2,3,0,20,"",QF_RELATIVE|QF_WAVE);
			}
			W2F1 I 1;
			W2F1 J 1 A_MechanismSound("Halo/Weapons/BattleRifle/Mech");
			W2F1 KL 1 
			{
				A_SetRecoil(-0.3, 0, 4);
				A_Light(0);
			}
			W2F1 MNOPQR 1
			{
				A_SetRecoil(0.2, 0, 2);
				A_RecoilOffset(0,0,4);
			}
			W2F1 ST 1;
		goto Ready.Active;
		
		Reload: // 44
			TNT1 A 0 A_ValidateReload("Ready.Dryfire");
			TNT1 A 0 A_ScopeDisable();
			TNT1 A 0 A_ReloadSound();
			TNT1 A 0 A_JumpIf(!CountReloadAmmo(), "Reload.Empty");
			W2R1 ABCDEFGHIJKLM 1;
			W2R1 N 1 A_SetRecoil(0, -0.4, 3);
			W2R1 OPQRSTUVWXYZ 1;
			W2R2 ABCDEFGHIJKLM 1;
			W2R2 N 1 A_SetRecoil(0,  0.4, 3);
			TNT1 A 0 A_ReloadClip();
			W2R2 OPQRSTUVWXYZ 1;
			W2R3 ABCDEFGHIJKLMNO 1;
		goto Ready.Active;
		
		Reload.Empty: // 25
			W2R3 PQRSTUVWXYZ 1;
			W2R4 AB 1;
			W2R4 C 1 A_SetRecoil(0, -0.4, 3);
			W2R4 DEFGHIJKLMNOPQRSTUVWXYZ 1;
			W2R5 AB 1;
			W2R5 C 1 A_SetRecoil(0,  0.4, 3);
			TNT1 A 0 A_ReloadClip();
			W2R5 DEFGHIJKLMNOPQRS 1;
			W2R5 T 1 A_SetRecoil(0.4, 0, 3);
			W2R5 UVWXYZ 1;
			W2R6 A 1;
			W2R6 B 1 A_SetRecoil(0, -0.4, 3);
			W2R6 CDEFGHIJKLMNOPQRSTUVWXYZ 1;
			W2R7 A 1;
		goto Ready.Active;
		
		Spawn:
			W2G1 A -1;
		stop;
	}
}

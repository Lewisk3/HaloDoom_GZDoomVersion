
class Halo_ScatterShotBattery : Ammo 
{
	Default
	{
		Inventory.MaxAmount 100;
	}
}

class HaloScatterShot_Proj : HaloSlowProjectile 
{
	Default
	{
		HaloSlowProjectile.SetRanges 0, 0; 
		HaloSlowProjectile.MinRangeDamage 100; 
		HaloSlowProjectile.BaseDamage SCATTERSHOT_DMG; 
		HaloSlowProjectile.Speed_MPS  SCATTERSHOT_BMPS;
		HaloSlowProjectile.HeadshotDMGFactor SCATTERSHOT_HEDMOD;
		
		RenderStyle "Add";
		// Translation "0:255=@65[5,240,44]";
		Alpha 1.0;
		Scale 0.02;
		DamageType "Plasma";
		+ROLLSPRITE;
		+INTERPOLATEANGLES;
		
		// boin boin
		BounceType "Doom";
		BounceCount 4;
		+BOUNCEONWALLS;
		+BOUNCEONFLOORS;
		+BOUNCEONCEILINGS;
		+USEBOUNCESTATE;
		-BOUNCEONACTORS;
	}
	
	virtual void A_DoLightning(double amt = 4)
	{
		vector2 view;
		for(int i = 0; i < amt; i++)
		{
			view.x = angle + frandom(-60,60) + 180;
			view.y = pitch + frandom(-35,35);
			BiriBiri.DoLightning(pos, view, type:"UnmakerLightning", dist:25, 0.5, 20.0, 10.0, 30, 0);
		}
	}
	
	override void Tick()
	{
		super.Tick();
		if(level.isFrozen()) return;
		
		A_SetRoll(roll+5, SPF_INTERPOLATE);

		Spawn("HaloScatterShot_Trail", pos);
	}
	
	States
	{
		Spawn:
			ELBL AB 2 Bright A_JumpIf(!bMISSILE, "Death"); // WTAF GZDoom?!?!
		loop;
		
		Bounce:
			"####" "#" 1
			{
				isHoming = true;
				homingStrength = 0.30;
				homingFOV = 30;
			}
		goto Spawn;
		
		Death:
		XDeath:
		Crash:
			TNT1 A 1 
			{	
				HaloMath.ParticlesFX(self, "Orange", 30, 3, 10);
				A_DoLightning();
			}
		stop;
	}
}

class HaloScatterShot_Trail : CheapActor
{
	Default
	{
		RenderStyle "Add";
		Alpha 1.0;
		Scale 0.02;
		+ROLLSPRITE;
		+INTERPOLATEANGLES;
		+NOGRAVITY;
	}
	
	override void Tick()
	{
		super.Tick();
		A_SetRoll(roll+5, SPF_INTERPOLATE);
		A_SetScale(Scale.X * 0.93);
		alpha *= 0.93;
		if(alpha <= 0.05) Destroy(); 
	}
	
	States
	{
		Spawn:
			ELBL AB 2 Bright;
		loop;
	}
}

class Halo_ScatterShot : HaloGun
{
	Default
	{
		Weapon.SlotNumber 5;
		Obituary "%o's guts were scattered by %k's Scatter Shot.";
		Inventory.PickupMessage	"Picked up the Scatter Shot.";
		Tag "Scatter Shot";
		Weapon.BobSpeed 2.12;
		Weapon.BobRangeX 0.63;
		Weapon.AmmoType1 "Halo_ScatterShotBattery";
		Weapon.AmmoType2 "Halo_ScatterShotBattery";
		Weapon.AmmoGive 100;
		HaloGun.HasBattery true, 5;
		
		HaloGun.Availability "HL4, StarWars";
		HaloGun.PowerTier P_STRONG;
		HaloGun.Rarity 10;
				
		// Recoil
		RecoilWeapon.RecoilSpeed 20;
		HaloGun.Bloom 1.25;
		HaloGun.BloomSpeed 0.08;
		HaloGun.BaseRecoil 1;
		HaloGun.Inaccuracy 1;
		HaloGun.Crosshair "SSRet", 1.0;
		HaloGun.UIGraphic "MISSNG", 0.8, 0.7;
		
		HaloGun.UISight "SCSGADS", 1.5, 1.0;
		HaloGun.SetupScope 1.25, 0.5;
		+HaloGun.SI_Fullscreen;
		+HaloGun.SI_Rotate;
		+HaloGun.SI_AlwaysHide;
		
		HaloGun.ZoomSounds "Halo/Weapons/ScatterShot/Zoom/IN", "Halo/Weapons/ScatterShot/Zoom/OUT";

		RecoilWeapon.YOffsetRange -10, 40;
	}
	
	action void A_FireSpreadShots(vector2 offs = (8, -4), double fireAngle = 0, double spacing = 5)
	{
		double soffs = -spacing;
		vector3 aimpos = HaloMath.getPlayerAim(PlayerPawn(self));
		for(int i = 0; i < 5; i++)
		{
			vector2 spread = (soffs, 0);
			spread = RotateVector(spread, fireAngle);
			spread.y += 1.2;
			
			vector3 firepos; Actor proj;
			[firepos, proj] = A_ShootProjectile("HaloScatterShot_Proj", offs.x, offs.y);
			if(proj) HaloSlowProjectile(proj).DoConverge(aimpos, spread);
			
			soffs += (spacing*0.5);
		}
	}
	
	action void A_FireScatterShot()
	{
		A_Light(4);
		A_WeapSound("Halo/Weapons/ScatterShot/Fire", CHANF_OVERLAP, true);
		A_WeapSound("Halo/Weapons/ScatterShot/Fire/Bass", CHANF_OVERLAP, true);
		
		double spread = 6;
		double xoffs = 14;
		if(A_CheckInScope())
		{
			spread = 1;
			xoffs = 0;
		}
		
		A_FireSpreadShots( (xoffs, 0),   45, spread);
		A_FireSpreadShots( (xoffs, 0),  -45, spread);
					
		A_TakeAmmo(5);
		A_UpdateSpread();
	}

	States
	{
		
		Ready:
			TNT1 A 0 A_WeapSound("Halo/Weapons/ScatterShot/Draw");
			WQS1 GFEDCBA 1 A_DoSelectAnim();
		Ready.Active:
			WQI1 A 1 
			{
				A_HaloWeaponReady(usescope:true);
				if(A_CheckInScope()) A_ResetSightGraphic();
			}
		loop;
		
		Ready.Dryfire:
			WQI1 A 4 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 1 A_GunRaise();
		wait;

		Deselect:
			WQS1 ABCDEFG 1;
			WQS1 G 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			WQF1 A 1 Bright;
			WQF1 B 1 Bright
			{
				A_SetZoom(0.88, 2);
				A_SetRecoil(4.20, 0, 2);
				A_FireScatterShot();
				A_RollQuake(6,10,1);
				A_RecoilOffset(15, 30, 4);
			}
			WQF1 C 2 Bright;
			WQF1 D 1 Bright
			{
				A_Light(0);
			}
			WQF1 EEEEEEEE 2
			{		
				A_RecoilOffset(0,0,18);
				A_SetZoom(1.0, 8);
			}
			WQF1 FGHI 1;
			WQI1 A 8;
		goto Ready.Active;
		
		Spawn:
			WQP1 A -1;
		stop;
	}
}

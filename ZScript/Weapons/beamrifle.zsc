class Halo_BeamRifle_Battery : Ammo 
{
	Default 
	{
		Inventory.MaxAmount 100;
	}
}

class BeamRifleLaserDecal : LaserBeamDecal
{
	Default
	{
		Translation "0:255=@64[128,8,128]";
	}
}

class LSR_BeamRifle : LaserBeam
{
	bool turnOff;
	double laserDmg;
	Property LaserDamage : laserDmg;

	Default
	{
		Alpha 2.0;
		Scale 1.5;
		LSR_BeamRifle.LaserDamage BEAMRIFLE_DMG;
		LaserBeam.LaserColor "Purple"; 
		LaserBeam.TrackWeapon true, PSP_WEAPON;
		LaserBeam.AimFromWeapon false;
		LaserBeam.LaserDecal "BeamRifleLaserDecal";
		DamageType "Fire";
		+BRIGHT;
	}
	
	override void BeamTick()
	{
		aimAtCrosshair();
		
		if(hitData.hitType != TRACE_HitNone) 
			OnImpact(hitData.HitLocation, hitData.hitActor);
	
		if(turnOff)
		{
			alpha -= 0.15;
			A_SetScale(Scale.X * 0.87, Scale.Y);
	
			if(alpha <= 0.1 || Scale.X <= 0.05) Destroy();
		}
	}
	
	override void OnImpact(vector3 hitPos, Actor hitActor)
	{
		super.OnImpact(hitPos, hitActor);
				
		if(hitActor) 
		{	
			hitActor.DamageMobj(self, target, laserDmg, DamageType);
			
			// Spawn Blood
			if( hitActor.bISMONSTER && !hitActor.bNOBLOOD ) 
				hitActor.SpawnBlood( hitPos, angle, ceil(laserDmg) );
		}

		for(int i = 0; i < floor(3 * halodoom_effectintensity); i++)
		{
			let smoke = Spawn("RisingSmoke", hitData.hitLocation);
			if(smoke) smoke.A_SetScale(0.25);
		}
	}
}

class LSR_BeamRifleCore : LSR_BeamRifle
{
	Default
	{
		Alpha 2.0;
		Scale 0.75;
		LaserBeam.LaserColor "Pink"; 
	}
	
	override void OnImpact(vector3 hitPos, Actor hitActor) {}
}

class Halo_BeamRifle : HaloGun
{
	double heat;
	double lsrTics;
	LSR_BeamRifle lsrbeam, lsrbeamCore;
	
	Default
	{
		Weapon.SlotNumber 6;
		Obituary "%o was melted by %k's particle beam.";
		Inventory.PickupMessage	"Picked up the Type-50 particle beam rifle.";
		Tag "Particle Beam Rifle.";
		Weapon.BobSpeed 1.36;
		Weapon.BobRangeX 0.45;
		Weapon.AmmoType1 "Halo_BeamRifle_Battery";
		Weapon.AmmoType2 "Halo_BeamRifle_Battery";
		Weapon.AmmoGive 100;
		HaloGun.HasBattery true, 1;
		
		HaloGun.Availability GT_HL2 | GT_HL3 | GT_HL4;
		HaloGun.PowerTier P_POWER | P_ENERGY;
				
		// Recoil
		HaloGun.Bloom 0.16;
		HaloGun.BloomSpeed 0.30;
		HaloGun.BaseRecoil 1;
		HaloGun.Inaccuracy 1;
		HaloGun.Crosshair "PlsRRet", 0.75;
		HaloGun.UIGraphic "WI_BEAM", 0.6;
		
		RecoilWeapon.YOffsetRange 0, 40;
	}
		
	action void A_BeginLaser()
	{
		A_WeapSound("Halo/Weapons/BeamRifle/Laser/Fire", CHANF_OVERLAP);
		A_Light(2);
		if(!invoker.lsrbeam)
		{
			invoker.lsrbeam = LSR_BeamRifle(LaserBeam.Create(self, 5, 1.5, -1, type:"LSR_BeamRifle"));
			invoker.lsrbeam.setEnabled(true);
			
			invoker.lsrbeamCore = LSR_BeamRifle(LaserBeam.Create(self, 5, 1.5, -1, type:"LSR_BeamRifleCore")); 
			invoker.lsrbeamCore.setEnabled(true);
		}
		else
		{
			invoker.lsrbeam.setEnabled(true);
			invoker.lsrbeamCore.setEnabled(true);
		}
	}
	
	action void A_EndLaser(bool dosound = true)
	{
		A_StopSound(CHAN_VOICE);
		if(dosound) A_WeapSound("Halo/Weapons/BeamRifle/Laser/LoopEnd");
		A_Light(0);
		if(invoker.lsrbeam)
		{
			invoker.lsrbeam.turnOff = true;
			if(invoker.lsrbeamCore) invoker.lsrbeamCore.turnOff = true;
		}
	}
	
	override void DoEffect()
	{
		super.DoEffect();
		
		heat = clamp(heat, 0, 1.5);
	}
		
	States
	{
		DoSmoke:	
			TNT1 AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA 3 
			{
				let psp = player.GetPSprite(OverlayID());
				if(psp) psp.frame = random(3,8);
				A_SetSFXPos(25,-8,-10);
				double amt = (invoker.heat * 5) * halodoom_effectintensity;
				
				for(int i = 0; i < floor(amt); i++)
					A_SpawnSFX("MuzzleSmoke", 0,0);
			}
		stop;
	
		Ready:
			TNT1 A 0 
			{	
				A_WeapSound("Halo/Weapons/BeamRifle/Draw");
				return A_JumpIf(A_DoFullSelectAnimation(), "Ready.Pickup");
			}
			WLS1 GFEDCBA 1 A_DoSelectAnim(0, true);
		goto Ready.Active;
		Ready.Pickup:
			WLD1 ABCDEFGHIJKLMNOPQ 1 A_DoSelectAnim();
		Ready.Active:
			WLG1 A 1 
			{
				invoker.heat *= 0.96;
				A_HaloWeaponReady(0);
				A_Overlay(69, "DoSmoke");
			}
		loop;
		
		Ready.Dryfire:
			WLS1 A 12 A_WeapSound("Halo/Weapons/DryFire", CHANF_OVERLAP);
		goto Ready.Active;

		Select:
			TNT1 A 0 A_GunRaise();
		wait;

		Deselect:
			TNT1 A 0 A_EndLaser(false);
			WLS1 ABCDEFG 1;
			WLS1 G 1 A_GunLower();
		wait;
		
		Fire:
			TNT1 A 0 A_JumpIf(invoker.heat >= 1.0, "Overheat");
			TNT1 A 0 A_JumpIf(!CountLoadedAmmo(), "Ready.Dryfire");
			WLF1 AB 1 Bright;
			TNT1 A 0 
			{
				A_BeginLaser(); 
				A_SetZoom(0.93, 3);
			}
		Fire.Loop:
			TNT1 A 0 A_StartSound("Halo/Weapons/BeamRifle/Laser/Loop", CHAN_VOICE, CHANF_LOOPING);
			WLF1 CDEFGHIJKLCDEFGHIJKLCDEFGHIJKL 1 Bright
			{
				if(invoker.lsrTics++ >= 3) 
				{
					A_TakeAmmo(1);
					invoker.lsrTics = 0;
				}
				
				A_RecoilOffset(frandom(-4,4), frandom(-8,8), 2);
				A_RollQuake(1,10,1, true);
				A_Light( (!(GetAge()%4)) * 2 );
				invoker.heat += 0.017;
				
				let res = ResolveState(null);
				if(invoker.heat >= 1.0) res = ResolveState("Overheat");
				if(!CountLoadedAmmo()) 
				{
					A_EndLaser();
					res = ResolveState("Ready.DryFire");
				}
				return res;
			}
			TNT1 A 0 
			{
				A_Light(0);
				A_SetZoom(1.0, 3);
			}
		Fire.Done:
			WLF1 MNOP 1 
			{
				A_EndLaser();
				A_RecoilOffset(0,0,6);
			}
			WLG1 A 12;
		goto Ready.Active;
		
		Reload:
		Overheat:
			TNT1 A 0 
			{
				invoker.handsbusy = true; // Disable hand actions while overheating
				A_EndLaser();
				A_RecoilOffset(0,0,6);
				return A_JumpIf(invoker.heat < 0.5, "Ready.Dryfire");
			}
			TNT1 A 0 A_WeapSound("Halo/Weapons/BeamRifle/Overheat/Start", CHANF_OVERLAP);
			WLH1 ABC 1 Bright;
			TNT1 A 0 A_RollQuake(2,35,1);
			TNT1 A 0 A_StartSound("Halo/Weapons/BeamRifle/Overheat/Loop", CHAN_VOICE, CHANF_LOOPING);
			WLH1 DEFGHIJKLMNOPQRSTU 2 Bright
			{
				for(int i = 0; i < floor(4 * halodoom_effectintensity); i++) 
				{
					A_SetSFXPos(25, -20 + frandom(-8,8), -10 + frandom(-10,10));
					A_SpawnSFX("MuzzleSmoke", 0,0);
				}
				invoker.heat -= 0.1;
			}
			TNT1 A 0 
			{
				A_WeapSound("Halo/Weapons/BeamRifle/Overheat/End", CHANF_OVERLAP);
				A_StopSound(CHAN_VOICE);
			}
			WLH1 VWXYZ 2 Bright;
			WLH2 AB 1;
			TNT1 A 0 
			{
				invoker.heat = 0;
				invoker.handsbusy = false; // Enable hand actions.
			}
		goto Ready.Active;
			
		Spawn:
			WLP1 A -1;
		stop;
	}
}

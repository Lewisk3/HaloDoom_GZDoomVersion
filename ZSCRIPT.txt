version "4.5"

// Essentials
#include "ZScript/math.zsc"
#include "ZScript/events.zsc"
#include "ZScript/spawns.zsc"
#include "pickup.cfg"
#include "skill.cfg"
#include "ZScript/PickupSystem/halopickup_events.zsc"
#include "ZScript/PickupSystem/weapbehavior.zsc"
#include "ZScript/Weapons/Base/soundbase.zsc"

// Player(s)
#include "ZScript/Player/haloplayer.zsc"
#include "ZScript/Player/hplr_movement.zsc"
#include "ZScript/Player/spartan_two.zsc"
#include "ZScript/Player/spartan_three.zsc"
#include "ZScript/Player/spartan_four.zsc"

// UI
#include "ZScript/SBS/halo_sbs_base.zsc"
#include "ZScript/SBS/halo_sbs_3D.zsc"
#include "ZScript/UI/halo_hud.zsc"
#include "ZScript/UI/overlay_ui.zsc"
#include "ZScript/UI/hitmarkers.zsc"

// Menu(s)
#include "ZScript/Menus/Base/halomenu_base.zsc"
#include "ZScript/Menus/Base/halomenu_elements.zsc"
#include "ZScript/Menus/halomenu_title.zsc"
#include "ZScript/Menus/halomenu_splash.zsc"
#include "ZScript/Menus/halomenu_playerselection.zsc"
#include "ZScript/Menus/halomenu_skillmenu.zsc"

// Items
#include "ZScript/Items/keys.zsc"
#include "ZScript/Items/powerups.zsc"
#include "ZScript/Weapons/grapple.zsc"

// Weapon base
#include "ZScript/Weapons/Base/recoilbase.zsc"
#include "ZScript/Weapons/Base/gunbase.zsc"
#include "ZScript/Weapons/Base/projectilebase.zsc"
#include "ZScript/Weapons/Base/ammobase.zsc"
#include "ZScript/Weapons/sfx.zsc"

// Weapons
#include "ZScript/Weapons/magnum.zsc"
#include "ZScript/Weapons/shotgun.zsc"
#include "ZScript/Weapons/supershotgun.zsc"
#include "ZScript/Weapons/assaultrifle.zsc"
#include "ZScript/Weapons/battlerifle.zsc"
#include "ZScript/Weapons/sniper_rifle.zsc"
#include "ZScript/Weapons/stanchion.zsc"
#include "ZScript/Weapons/carbine.zsc"
#include "ZScript/Weapons/PlasmaPistol.zsc"
#include "ZScript/Weapons/PlasmaRifle.zsc"
#include "ZScript/Weapons/Needler.zsc"
#include "ZScript/Weapons/bulldog.zsc"
#include "ZScript/Weapons/grenades.zsc"
#include "ZScript/Weapons/gravityhammer.zsc"
#include "ZScript/Weapons/fuelrod.zsc"

// Vehicles
#include "ZScript/Vehicles/Kinematics/kine_parts.zsc" 
#include "ZScript/Vehicles/veh_parts.zsc"
#include "ZScript/Vehicles/veh_halobase.zsc"
#include "ZScript/Vehicles/veh_ghost.zsc"
#include "ZScript/Vehicles/veh_warthog.zsc"
#include "ZScript/Vehicles/veh_scorpion.zsc"
#include "ZScript/Vehicles/veh_weapons.zsc" 
#include "ZScript/Vehicles/veh_wraith.zsc" 
#include "ZScript/Vehicles/veh_mantis.zsc" 

// Laser(s)
#include "ZScript/Lasers/base/smoothlaser_base.zsc"
#include "ZScript/Lasers/base/laser_base.zsc"
#include "ZScript/Lasers/base/laserfx_base.zsc"
#include "ZScript/Lasers/halo_lasers.zsc"

// BiriBiri (Lightning)
#include "ZScript/Lightning/biribiri_base.zsc"
#include "ZScript/Lightning/biribiri_parts.zsc"

// [>> Gameplay Constants <<]
const UNIT_METER = 8.f;

class NadeThrow : Actor
{
	Default
	{
		+NOGRAVITY;
	}

	void AimNade(Actor toAct, class<Actor> nade, double maxPitch = 90, double aimSens = 1.0, double aimDist = 128)
	{
		if(!toAct) return;

		// Source and Destination
		vector3 fromPos = (
			pos.xy,
			pos.z + (height)
		);
		vector3 toPos = (
			toAct.pos.xy, 
			toAct.pos.z + (toAct.height * 0.5) 
		);
		
		vector3 diff = level.vec3diff(fromPos, toPos);

		// Spawn grenade, calculate values from instance.
		let nade = Spawn(nade, fromPos);
		if(!nade) return;	
		nade.target = self;
		
		// Modify toPos Z component based on how many units the thrown grenade
		// fall by the time it reaches the destination.
		double dist = diff.xy.Length();
		if(dist >= aimDist)
		{
			double grav = 1.0 + ceil(nade.GetGravity() * (level.gravity * 0.010769));
			double ticsDist = diff.Length() / double(max(nade.Speed,1.0));		
			double fallDist = ticsDist * grav;
			toPos.z += fallDist * aimSens;
		}
		
		// Recalculate differences.
		diff = level.vec3diff(fromPos, toPos);
		double aimPitch = VectorAngle( sqrt(diff.y*diff.y + diff.x*diff.x), diff.z );
		aimPitch = min(aimPitch, maxPitch);

		// Modify grenade velocity
		double a = AngleTo(toAct);
		double p = -aimPitch;
		nade.vel = (
			cos(a) * cos(p),
			sin(a) * cos(p),
			-sin(p)
		) * nade.Speed;
	}

	States
	{
		Spawn:
			TROO A 1 
			{
				A_Look();
				AimNade(target, "NadeExample");
				if(target) A_FaceTarget();
			}
		loop;
	}
}
class NadeExample : Actor
{
	Default
	{
		Speed 12;
		BounceType "Doom";
		BounceCount 2;
		
		Projectile;
		-NOGRAVITY;
		Gravity 0.65;
	}
	
	States
	{
		Spawn:
			PLSS A 1 
			{
				Spawn("NadeGuide", pos);
			}
		loop;
	}
}
class NadeGuide : Actor
{
	Default
	{	
		+NOINTERACTION;
	}
			
	States
	{
		Spawn:
			PUFF A 2;
		stop;
	}
}